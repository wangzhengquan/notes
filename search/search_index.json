{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6211\u7684\u4e2a\u4eba\u7b14\u8bb0\u662f\u6211\u5728\u7cfb\u7edf\u6027\u5b66\u4e60\u4e00\u4e9b\u6280\u672f\u8bfe\u7a0b\u7684\u65f6\u5019\u505a\u7684\u8bb0\u5f55\uff0c\u4ee5\u4fbf\u68b3\u7406\u81ea\u5df1\u5b66\u4e60\u8fc7\u7684\u5185\u5bb9\u3002","title":"\u7b80\u4ecb"},{"location":"database/sql/","text":"aggregate having The following sql is error, since SELECT execute on the condition of WHERE clause, but the WHERE condition in the following sql depends on the result of aggregate function AVG in the SELECT clause. SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid and avg_gpa > 3.9 GROUP BY e.cid; It should be write as following, in this case HAVING always execute after SELECT clause has completed execution. SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid HAVING avg_gpa > 3.9; DATE/TIME timestamp of now for postgresql / mysql SELECT NOW(); for postgresql / mysql / sqlite / sqlserver SELECT CURRENT_TIMESTAMP; extract day from timestamp for postgresql SELECT EXTRACT(DAY FROM DATE('2020-09-01')); calculate days between two timestamp for postgresql SELECT DATE('2020-09-01') - DATE('2020-01-01') AS days; for mysql SELECT ROUND((UNIX_TIMESTAMP(DATE('2020-09-01')) - UNIX_TIMESTAMP(DATE('2020-01-01'))) / (60*60*24), 0) AS days; SELECT DATEDIFF(DATE('2020-09-01') , DATE('2020-01-01')) AS days; for sqlite SELECT CAST(julianday(DATE('2020-09-01')) - julianday(DATE('2020-01-01')) AS INT) AS days; for sqlserver SELECT DATEDIFF(DAY, '2020-01-01', '2020-09-01'); Nested queries ALL: \u6240\u6709 inner queries \u8fd4\u56de\u7684\u8bb0\u5f55\u90fd\u5fc5\u987b\u6ee1\u8db3\u6761\u4ef6 ANY\uff1a\u4efb\u610f inner queries \u8fd4\u56de\u7684\u8bb0\u5f55\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef IN\uff1a\u4e0e ANY \u7b49\u4ef7 EXISTS\uff1ainner queries \u8fd4\u56de\u7684\u8868\u4e0d\u4e3a\u7a7a Demo : Find all the student's name who has enrolled the course '15-445' SELECT name FROM student WHERE sid = ANY( SELECT sid FROM enrolled WHERE cid = '15-445' ) The above sql is equivalent to the following sql, but the latter outperforms the former. In the former's query, every time the outer SELECT it must excute the inner query once more. In the latter's query, \"WHERE cid='15-445'\" only excute once, then the inner query use the JOIN method to query every student that has the sid equals the sid that has been find in the outer query. SELECT (SELECT S.name FROM student AS S WHERE S.sid = E.sid) AS sname FROM enrolled AS E WHERE cid='15-445'; Demo: find all the course that no student has ever enrolled. SELECT * FROM course WHERE NOT EXISTS( SELECT * FROM enrolled WHERE course.cid = enrolled.cid ) Note: The inner query can reference the outer query, but the outer query can not reference the inner query. In this example the inner query can reference the 'course' of the outer query. Window Functions Window Functions is sort of like Aggregation Functions, but instead of aggregation multiple rows as one row, it compute every row's Window Function. PARTITION keyword in Window Functions corresponse to the GROUP keyword in Aggregation Functions. Special window functions: - ROW_NUMBER()\u2192 # of the current row - RANK()\u2192 Order position of the current row. Demo: Find the student with the highest grade for each course. SELECT * FROM ( SELECT *, RANK() OVER (PARTITION BY cid ORDER BY grade ASC) AS rank FROM enrolled ) AS ranking WHERE ranking.rank = 1; Common Table Expressions Provides a way to write auxiliary statements for use in a larger query. Think of it like a temp table just for one query. Alternative to nested queries and views. WITH cteName AS ( SELECT 1 ) SELECT * FROM cteName You can bind output columns to names before the AS keyword. WITH cteName (col1, col2) AS ( SELECT 1, 2 ) SELECT col1 + col2 FROM cteName Find student record with the highest id that is enrolled in at least one course. WITH cteSource(maxId) AS ( SELECT MAX(sid) FROM enrolled ) SELECT name FROM student, cteSource WHERE student.sid = cteSource.maxId Print the sequence of numbers from 1 to 10. WITH cteSource (counter) AS ( SELECT 1 UNION ALL SELECT counter + 1 FROM cteSource WHERE counter < 10 ) SELECT * FROM cteSource;","title":"SQL"},{"location":"database/sql/#aggregate","text":"","title":"aggregate"},{"location":"database/sql/#having","text":"The following sql is error, since SELECT execute on the condition of WHERE clause, but the WHERE condition in the following sql depends on the result of aggregate function AVG in the SELECT clause. SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid and avg_gpa > 3.9 GROUP BY e.cid; It should be write as following, in this case HAVING always execute after SELECT clause has completed execution. SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid HAVING avg_gpa > 3.9;","title":"having"},{"location":"database/sql/#datetime","text":"","title":"DATE/TIME"},{"location":"database/sql/#timestamp-of-now","text":"for postgresql / mysql SELECT NOW(); for postgresql / mysql / sqlite / sqlserver SELECT CURRENT_TIMESTAMP;","title":"timestamp of now"},{"location":"database/sql/#extract-day-from-timestamp","text":"for postgresql SELECT EXTRACT(DAY FROM DATE('2020-09-01'));","title":"extract day from timestamp"},{"location":"database/sql/#calculate-days-between-two-timestamp","text":"for postgresql SELECT DATE('2020-09-01') - DATE('2020-01-01') AS days; for mysql SELECT ROUND((UNIX_TIMESTAMP(DATE('2020-09-01')) - UNIX_TIMESTAMP(DATE('2020-01-01'))) / (60*60*24), 0) AS days; SELECT DATEDIFF(DATE('2020-09-01') , DATE('2020-01-01')) AS days; for sqlite SELECT CAST(julianday(DATE('2020-09-01')) - julianday(DATE('2020-01-01')) AS INT) AS days; for sqlserver SELECT DATEDIFF(DAY, '2020-01-01', '2020-09-01');","title":"calculate days between two timestamp"},{"location":"database/sql/#nested-queries","text":"ALL: \u6240\u6709 inner queries \u8fd4\u56de\u7684\u8bb0\u5f55\u90fd\u5fc5\u987b\u6ee1\u8db3\u6761\u4ef6 ANY\uff1a\u4efb\u610f inner queries \u8fd4\u56de\u7684\u8bb0\u5f55\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef IN\uff1a\u4e0e ANY \u7b49\u4ef7 EXISTS\uff1ainner queries \u8fd4\u56de\u7684\u8868\u4e0d\u4e3a\u7a7a Demo : Find all the student's name who has enrolled the course '15-445' SELECT name FROM student WHERE sid = ANY( SELECT sid FROM enrolled WHERE cid = '15-445' ) The above sql is equivalent to the following sql, but the latter outperforms the former. In the former's query, every time the outer SELECT it must excute the inner query once more. In the latter's query, \"WHERE cid='15-445'\" only excute once, then the inner query use the JOIN method to query every student that has the sid equals the sid that has been find in the outer query. SELECT (SELECT S.name FROM student AS S WHERE S.sid = E.sid) AS sname FROM enrolled AS E WHERE cid='15-445'; Demo: find all the course that no student has ever enrolled. SELECT * FROM course WHERE NOT EXISTS( SELECT * FROM enrolled WHERE course.cid = enrolled.cid ) Note: The inner query can reference the outer query, but the outer query can not reference the inner query. In this example the inner query can reference the 'course' of the outer query.","title":"Nested queries"},{"location":"database/sql/#window-functions","text":"Window Functions is sort of like Aggregation Functions, but instead of aggregation multiple rows as one row, it compute every row's Window Function. PARTITION keyword in Window Functions corresponse to the GROUP keyword in Aggregation Functions. Special window functions: - ROW_NUMBER()\u2192 # of the current row - RANK()\u2192 Order position of the current row. Demo: Find the student with the highest grade for each course. SELECT * FROM ( SELECT *, RANK() OVER (PARTITION BY cid ORDER BY grade ASC) AS rank FROM enrolled ) AS ranking WHERE ranking.rank = 1;","title":"Window Functions"},{"location":"database/sql/#common-table-expressions","text":"Provides a way to write auxiliary statements for use in a larger query. Think of it like a temp table just for one query. Alternative to nested queries and views. WITH cteName AS ( SELECT 1 ) SELECT * FROM cteName You can bind output columns to names before the AS keyword. WITH cteName (col1, col2) AS ( SELECT 1, 2 ) SELECT col1 + col2 FROM cteName Find student record with the highest id that is enrolled in at least one course. WITH cteSource(maxId) AS ( SELECT MAX(sid) FROM enrolled ) SELECT name FROM student, cteSource WHERE student.sid = cteSource.maxId Print the sequence of numbers from 1 to 10. WITH cteSource (counter) AS ( SELECT 1 UNION ALL SELECT counter + 1 FROM cteSource WHERE counter < 10 ) SELECT * FROM cteSource;","title":"Common Table Expressions"},{"location":"database/B%2B%20Tree/B%2B%20Tree/","text":"B + Tree is a variation of the B-tree data structure. In a B + tree, data pointers are stored only at the leaf nodes of the tree. In a B+ tree structure of a leaf node differs from the structure of internal nodes. The leaf nodes have an entry for every value of the search field, along with a data pointer to the record (or to the block that contains this record). The leaf nodes of the B+ tree are linked together to provide ordered access to the search field to the records. Internal nodes of a B+ tree are used to guide the search. Some search field keys from the leaf nodes are repeated in the internal nodes of the B+ tree. Structure of B+ Tree B+ Trees contain two types of nodes: Internal Nodes : Internal Nodes have n keys and n+1 values(pointers) which point to child nodes. In actual implementation, the key number were also n+1 , but the key at position 0 in an internal node is a virtual key, such as the gray one in the diagram above. The virtual key conceptually represents the minimum key of the node, however, it may not necessarily have the minimum or even an actual value associated with it. Another noteworthy characteristic ,as illustrated in the diagram, is that the internal node's key equals the first key of it's child node to which its key's pointer points. Leaf Nodes : Leaf Nodes have n keys and n values. The Structure of the Internal Nodes of a B+ Tree of Order n is as Follows Each internal node is of the form: <K0 P0>, <K1 P1>, ..., <Km-1 Pm-1>, <Km Pm> where m < n+1 and each Pi is a tree pointer (i.e points to another node of the tree) and, each Ki is a key . Every internal node has : K0 < K1 < \u2026 < Km , for m < n+1 For each search field value \u2018X\u2019 in the sub-tree pointed at by Pi , the following condition holds: Ki =< X < Ki+1 for 0 < i < m , X >= Ki for i = m , and X <= Ki for i = 0 Each internal node has at most n+1 tree pointers. The root node has at least two pointers, while the other internal nodes have at least ceil(n/2) tree pointers each. The Structure of the Leaf Nodes of a B+ Tree of Order \u2018n\u2019 is as Follows Each leaf node is of the form: <K0, D0>, <K1, D1>, ... , <Km-1, Dm-1>, <Km, Dm>, P_next> where m <= n and each Di is a data pointer (i.e points to actual record in the disk whose key value is Ki or to a disk file block containing that record) and, P_next points to next leaf node in the B+ tree. Using the Pnext pointer it is viable to traverse all the leaf nodes, just like a linked list, thereby achieving ordered access to the records stored in the disk. Every leaf node has : K0 < K1 < \u2026 < Km , for m < n Each leaf node has at least ceil((n-1)/2) and at most n values. All leaf nodes are at the same level. Searching a Record in B+ Trees Start from root , find the bigest index such that key >= node.key_i . Proceed to the next level of node via the pointer located at this index of the current node, until reaching the leaf node that houses the desired key. BPlusTreeSearch(key){ node = root; while(!node.IsLeaf()){ i = IndexOfKeyInInternalNode(node, key); if(i == -1) return null; node = DiskRead(node.elements[i].value); } i = IndexOfKeyInLeafNode(node, key); if(i == -1) return null; return node.elements[i]; } IndexOfKeyInInternalNode(node, key) { for(i = node.Size()-1; i > 0 && key < node.elements[i].key; i--) ; return i; } IndexOfKeyInLeafNode(node, key) { for(i = 0, size = node.Size(); i < size; i++) { if(key == node.elements[i].key){ return i; } } return -1; } Insertion in B+ Trees When an internal node contains 'n+1' keys or a leaf node contains 'n' keys, it is considered to be in an overflow state. 1 : Every element is inserted into a leaf node. So, go to the appropriate leaf node as described in \"Searching a Record in B+ Trees\" section. 2 : Insert the key into the leaf node in increasing order. If there is an overflow go ahead with the following steps mentioned below to deal with overflow while maintaining the B+ Tree properties. 3 : overflow happens 3.1 : Split the node into two nodes. First node contains ceil((n-1)/2) values. Second node contains the remaining values. 3.2 : If the split node is not the root, we recursively insert the first element of the second node into its parent node. This process continues until we find a suitable place for the element or reach the root node. 3.3 : However, if the split node is the root, we create a new node whose children are the two split nodes and make this node the new root of the tree. This means that the height of the tree increases by one. Insertion example In this example n=5 . As the diagram shows that I insert 55 in the tree, the leaf node overflows, it is split and the element, in this case 50, is copied up (bubbled up) to it's parent node. If the parent node is also full, this process continues recursively until a node with space is found or a new root is created. Deletion in B+ Tree The minimum number of keys in a node is 'ceil((n-1)/2)', It is considered to be underflow if number of keys is less than minimum number . The deletion strategy for the B+ tree is as follows: 1 : Locate the deleted key in the leaf nodes throught searching method. 2 : Delete the key and its associated value if the key is discovered in a leaf node. 3 : If the current node is root, proceed to step 3.1-3.2. Otherwise, proceed to step 4. 3.1 : If the root is a internal node and contains only one child node then set the child node as the new root node and delete the original root node. This means that the height of the tree decreases by one. 3.2 : The deletion process is end. 4 : If the node dose not underflows, assigne the parent's key whose pointer points to the current node as the first key of the current node to handle the case where the deleted key happens to be the minimum key of the current node prior to deletion. Otherwise continue to the next step. 5 : Borrow from slibing node If any sibling node contains more keys than the required minimum, we can borrow a key from that sibling node. 5.1 : borrow from left slibing node When borrowing from the left, the last element of the left node is transferred to the current node. Assigne the parent's key whose pointer points to the current node as the first key(the borrowed one) of the current node. 5.2 : borrow from right slibing node When borrowing from the right, the first element from the right node is transferred to the current node. Consequently, the key in the parent node, whose pointer points to the right node, should be assigned as the new first key (the second key before the transfer) of the right node. Assigne the parent's key whose pointer points to the current node as the first key of the current node to handle the case where the deleted key happens to be the minimum key of the current node prior to deletion. 6 : Coalesce with slibing node If neither of the node's sibling nodes has more than the required minimum number of keys, then it should be coalesced with one of its sibling nodes. 6.1 : left sibling node coalesce with the current node If the left node is not null, the current node is coalesced into the left node, following which the current node is deleted. Recursively deleted the parent's key whose pointer points to the deleted node. 6.2 : the current node coalesce with the right sibling node If the right node is not null, it is coalesced into the current node, following which the right node is deleted. Assigne the parent's key whose pointer points to the current node as the first key of the current node to handle the case where the deleted key happens to be the minimum key of the current node prior to deletion. Recursively deleted the parent's key whose pointer points to the deleted node. Deletion example In the following examples n=5 . Example for borrow from right slibing node Example for coalesce with slibing node https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html","title":"B+ Tree"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#structure-of-b-tree","text":"B+ Trees contain two types of nodes: Internal Nodes : Internal Nodes have n keys and n+1 values(pointers) which point to child nodes. In actual implementation, the key number were also n+1 , but the key at position 0 in an internal node is a virtual key, such as the gray one in the diagram above. The virtual key conceptually represents the minimum key of the node, however, it may not necessarily have the minimum or even an actual value associated with it. Another noteworthy characteristic ,as illustrated in the diagram, is that the internal node's key equals the first key of it's child node to which its key's pointer points. Leaf Nodes : Leaf Nodes have n keys and n values.","title":"Structure of B+ Tree"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#the-structure-of-the-internal-nodes-of-a-b-tree-of-order-n-is-as-follows","text":"Each internal node is of the form: <K0 P0>, <K1 P1>, ..., <Km-1 Pm-1>, <Km Pm> where m < n+1 and each Pi is a tree pointer (i.e points to another node of the tree) and, each Ki is a key . Every internal node has : K0 < K1 < \u2026 < Km , for m < n+1 For each search field value \u2018X\u2019 in the sub-tree pointed at by Pi , the following condition holds: Ki =< X < Ki+1 for 0 < i < m , X >= Ki for i = m , and X <= Ki for i = 0 Each internal node has at most n+1 tree pointers. The root node has at least two pointers, while the other internal nodes have at least ceil(n/2) tree pointers each.","title":"The Structure of the Internal Nodes of a B+ Tree of Order n is as Follows"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#the-structure-of-the-leaf-nodes-of-a-b-tree-of-order-n-is-as-follows","text":"Each leaf node is of the form: <K0, D0>, <K1, D1>, ... , <Km-1, Dm-1>, <Km, Dm>, P_next> where m <= n and each Di is a data pointer (i.e points to actual record in the disk whose key value is Ki or to a disk file block containing that record) and, P_next points to next leaf node in the B+ tree. Using the Pnext pointer it is viable to traverse all the leaf nodes, just like a linked list, thereby achieving ordered access to the records stored in the disk. Every leaf node has : K0 < K1 < \u2026 < Km , for m < n Each leaf node has at least ceil((n-1)/2) and at most n values. All leaf nodes are at the same level.","title":"The Structure of the Leaf Nodes of a B+ Tree of Order \u2018n\u2019 is as Follows"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#searching-a-record-in-b-trees","text":"Start from root , find the bigest index such that key >= node.key_i . Proceed to the next level of node via the pointer located at this index of the current node, until reaching the leaf node that houses the desired key. BPlusTreeSearch(key){ node = root; while(!node.IsLeaf()){ i = IndexOfKeyInInternalNode(node, key); if(i == -1) return null; node = DiskRead(node.elements[i].value); } i = IndexOfKeyInLeafNode(node, key); if(i == -1) return null; return node.elements[i]; } IndexOfKeyInInternalNode(node, key) { for(i = node.Size()-1; i > 0 && key < node.elements[i].key; i--) ; return i; } IndexOfKeyInLeafNode(node, key) { for(i = 0, size = node.Size(); i < size; i++) { if(key == node.elements[i].key){ return i; } } return -1; }","title":"Searching a Record in B+ Trees"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#insertion-in-b-trees","text":"When an internal node contains 'n+1' keys or a leaf node contains 'n' keys, it is considered to be in an overflow state. 1 : Every element is inserted into a leaf node. So, go to the appropriate leaf node as described in \"Searching a Record in B+ Trees\" section. 2 : Insert the key into the leaf node in increasing order. If there is an overflow go ahead with the following steps mentioned below to deal with overflow while maintaining the B+ Tree properties. 3 : overflow happens 3.1 : Split the node into two nodes. First node contains ceil((n-1)/2) values. Second node contains the remaining values. 3.2 : If the split node is not the root, we recursively insert the first element of the second node into its parent node. This process continues until we find a suitable place for the element or reach the root node. 3.3 : However, if the split node is the root, we create a new node whose children are the two split nodes and make this node the new root of the tree. This means that the height of the tree increases by one.","title":"Insertion in B+ Trees"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#insertion-example","text":"In this example n=5 . As the diagram shows that I insert 55 in the tree, the leaf node overflows, it is split and the element, in this case 50, is copied up (bubbled up) to it's parent node. If the parent node is also full, this process continues recursively until a node with space is found or a new root is created.","title":"Insertion example"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#deletion-in-b-tree","text":"The minimum number of keys in a node is 'ceil((n-1)/2)', It is considered to be underflow if number of keys is less than minimum number . The deletion strategy for the B+ tree is as follows: 1 : Locate the deleted key in the leaf nodes throught searching method. 2 : Delete the key and its associated value if the key is discovered in a leaf node. 3 : If the current node is root, proceed to step 3.1-3.2. Otherwise, proceed to step 4. 3.1 : If the root is a internal node and contains only one child node then set the child node as the new root node and delete the original root node. This means that the height of the tree decreases by one. 3.2 : The deletion process is end. 4 : If the node dose not underflows, assigne the parent's key whose pointer points to the current node as the first key of the current node to handle the case where the deleted key happens to be the minimum key of the current node prior to deletion. Otherwise continue to the next step. 5 : Borrow from slibing node If any sibling node contains more keys than the required minimum, we can borrow a key from that sibling node. 5.1 : borrow from left slibing node When borrowing from the left, the last element of the left node is transferred to the current node. Assigne the parent's key whose pointer points to the current node as the first key(the borrowed one) of the current node. 5.2 : borrow from right slibing node When borrowing from the right, the first element from the right node is transferred to the current node. Consequently, the key in the parent node, whose pointer points to the right node, should be assigned as the new first key (the second key before the transfer) of the right node. Assigne the parent's key whose pointer points to the current node as the first key of the current node to handle the case where the deleted key happens to be the minimum key of the current node prior to deletion. 6 : Coalesce with slibing node If neither of the node's sibling nodes has more than the required minimum number of keys, then it should be coalesced with one of its sibling nodes. 6.1 : left sibling node coalesce with the current node If the left node is not null, the current node is coalesced into the left node, following which the current node is deleted. Recursively deleted the parent's key whose pointer points to the deleted node. 6.2 : the current node coalesce with the right sibling node If the right node is not null, it is coalesced into the current node, following which the right node is deleted. Assigne the parent's key whose pointer points to the current node as the first key of the current node to handle the case where the deleted key happens to be the minimum key of the current node prior to deletion. Recursively deleted the parent's key whose pointer points to the deleted node.","title":"Deletion in B+ Tree"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#deletion-example","text":"In the following examples n=5 .","title":"Deletion example"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#example-for-borrow-from-right-slibing-node","text":"","title":"Example for borrow from right slibing node"},{"location":"database/B%2B%20Tree/B%2B%20Tree/#example-for-coalesce-with-slibing-node","text":"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html","title":"Example for coalesce with slibing node"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/","text":"Shaders In the simplest possible configuration, you will need two shaders : one called Vertex Shader, which will be executed for each vertex, and one called Fragment Shader, which will be executed for each sample. If we use 4x antialising, we have 4 samples in each pixel. Shaders are programmed in a language called GLSL : GL Shader Language, which is part of OpenGL. Unlike C or Java, GLSL has to be compiled at run time, which means that each and every time you launch your application, all your shaders are recompiled. Shaders code run in GPU, so we need some way to share data between CPU and GPU. Per-Vertex Data Per-Vertex Data in OpenGl is stored in a buffer called Vertex Buffer Object (VBO). VBO is used to send the attributes (Vertex positions, Vertex colors, Texture coordinate, Normal vectors) of vertices to Vertex Shader, one item of buffer bind one vertex. The OpenGL buffer is created, bound, filled and configured with the standard functions ( glGenBuffers , glBindBuffer , glBufferData , glVertexAttribPointer ) ; Step 1: Generate the Buffer First, you ask OpenGL to create a buffer object for you. It returns a unique ID (an unsigned integer) that you use to refer to that buffer. GLuint VBO_ID; glGenBuffers(1, &VBO_ID); // Generate 1 buffer and store its ID in VBO_ID Step 2: Bind the Buffer OpenGL is a state machine. To work with a specific buffer, you must first \"bind\" it, making it the currently active buffer for a specific target. For vertex data, the target isGL_ARRAY_BUFFER. // Make our new buffer the active GL_ARRAY_BUFFER glBindBuffer(GL_ARRAY_BUFFER, VBO_ID); AnyGL_ARRAY_BUFFERoperations will now affectVBO_ID. Step 3: Buffer the Data This is the crucial step where you copy your vertex data from your application's memory (on the CPU) to the buffer's memory (on the GPU). // Our vertex data in an array on the CPU float vertices[] = { // positions // colors -0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f, // bottom left 0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, // bottom right 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f // top center }; // Copy the data into the currently bound buffer (VBO_ID) glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); Let's break down glBufferData : target:GL_ARRAY_BUFFER, the buffer type we're working with. size: The total size of the data in bytes (sizeof(vertices)). data: A pointer to the actual vertex data (vertices). usage: A hint to OpenGL about how we'll use this data. GL_STATIC_DRAW: The data will be set once and used many times (e.g., a static model) GL_DYNAMIC_DRAW: The data will be changed frequently and used many times (e.g., a character's animation). GL_STREAM_DRAW: The data will be set once and used only a few times. Step 4: Configure - Set Vertex Attribute Pointers The GPU now has your data, but it doesn't know how to interpret it. Is it just a big blob of floats? You need to tell it: \"Okay, the first 3 floats of each vertex are its position. The next 3 floats are its color.\" This is done with glVertexAttribPointer . // Tell OpenGL how to interpret the position data (attribute 0) glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0); glEnableVertexAttribArray(0); // Enable attribute 0 // Tell OpenGL how to interpret the color data (attribute 1) glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float))); glEnableVertexAttribArray(1); // Enable attribute 1 Let's break down glVertexAttribPointer : index: The vertex attribute's location. In shaders, you'd have layout (location = 0) in vec3 aPos; . This 0 matches the index. size: The number of components per vertex attribute (e.g., 3 for a vec3 position). type: The data type of the components (GL_FLOAT). normalized: Whether the data should be normalized (we don't need this for floats). stride: The byte-offset between consecutive vertices. Our vertex has 6 floats (3 pos + 3 color), so the stride is 6 * sizeof(float) . pointer(offset): The offset of the first component of this attribute in the vertex. For position, it's 0. For color, it starts after the 3 position floats, so its offset is 3 * sizeof(float) . Corresponding code in Vertex Shader // Input vertex data, different for all executions of this shader. layout(location = 0) in vec3 vertexPosition_modelspace; layout(location = 1) in vec3 vertexColor; Step 5: Draw! Now, in your render loop, you just need to bind the VBO and tell OpenGL to draw. // In the render loop glBindBuffer(GL_ARRAY_BUFFER, VBO_ID); glDrawArrays(GL_TRIANGLES, 0, 3); // Draw 3 vertices, starting from index 0 Improvement with VAOs: The process in Step 4 and 5 is often simplified by a Vertex Array Object (VAO) , which \"remembers\" all the glVertexAttribPointer calls and VBO bindings for you. In modern OpenGL, you'd set up a VAO once, and in the render loop, you would just bind the VAO and call glDrawArrays . Step 6: Cleanup When you're done with the buffer (e.g., closing the application), you should delete it to free up GPU memory. glDeleteBuffers(1, &VBO_ID); Global Data Global Data in OpenGl called Uniform. Uniform can be used to send global data to all shaders. Its key characteristic is that its value is uniform (constant and unchanging) for every single vertex and fragment processed within a single draw call. Step 1: Declare the Uniform in the Shader (GLSL) ou declare it in your shader code just like a global variable, using the uniform keyword. uniform vec3 LightPosition_worldspace; Step 2: Get the Uniform's \"Location\" In your CPU-side code, after you've compiled and linked your shader program, you need to ask OpenGL for the \"location\" of your uniform. This is just an integer ID that OpenGL uses to refer to that specific uniform. You only need to do this once after creating the shader program. GLuint LightID = glGetUniformLocation(programID, \"LightPosition_worldspace\"); // It's good practice to check if the uniform was found. // It might not be found if it's unused in the shader, as the compiler may optimize it out. if (LightID == -1) { // Handle error... } Step 3: Set the Uniform's Value This is done in your render loop , right before you make a draw call (glDrawArraysorglDrawElements). Crucially, you mustglUseProgramfirst to make your shader active, as theglUniformfunctions operate on the currently active program. // In the render loop... glm::vec3 lightPos = glm::vec3(4, 4, 4); glUniform3f(LightID, lightPos.x, lightPos.y, lightPos.z); Compare VBOs and Uniforms VBOs hold data that is different for each vertex (like positions). They are loaded once into GPU memory. Uniforms hold data that is the same for all vertices in a draw call (like a transformation matrix or global color). They are set from the CPU just before drawing. Together, VBOs and Uniforms form the fundamental way you communicate all necessary rendering data to the GPU in modern OpenGL. Feature Vertex Attribute (from VBO) Uniform Scope Per-Vertex Per-Draw Call (Global to the shader program) Data Source Read from a Vertex Buffer Object (VBO) Set directly from CPU application code before drawing. Variability Value is different for each vertex. Value is the same for all vertices and fragments. Typical Use Position, per-vertex color, normals, texture coordinates. Transformation matrices, time, lighting properties, global color. Texture Data Texture data is stored in buffer, but unlike vertex data, it is global data rather than per-vertex data, so Texture Data is a form of global buffer data. Sending texture data is the third pillar of getting data to the GPU, alongside VBOs (per-vertex data) and Uniforms (global data). 1. What is a Texture in OpenGL? In OpenGL, a Texture is a memory object, typically living on the GPU, that stores image data. This data can be 1D, 2D, or 3D, but the most common form is a 2D texture used to wrap an image around a 3D model. The process involves: Loading an image file (like a .png or .jpg) into your application's memory (CPU). Creating an OpenGL texture object. Uploading the pixel data from your application to the texture object on the GPU. Telling the shader how to use this texture. 2. The Workflow: A Step-by-Step Guide Here is the complete process for loading and using a texture. Step 0: Load the Image from a File (CPU-Side) OpenGL itself does not know how to open and read image files. You must use a third-party library for this. The most popular and easiest one for beginners is stb_image.h . You include this library and it gives you a simple function to load an image into a byte array. #include \"stb_image.h\" // A popular single-header image loading library int width, height, nrChannels; unsigned char *data = stbi_load(\"container.jpg\", &width, &height, &nrChannels, 0); if (data) { // Image loaded successfully! // 'width' and 'height' have the image dimensions. // 'nrChannels' is 3 for RGB, 4 for RGBA. // 'data' is a pointer to the raw pixel data. } else { // Failed to load image } Step 1: Generate a Texture Object Just like with VBOs, you ask OpenGL to generate a unique ID for your texture. GLuint textureID; glGenTextures(1, &textureID); Step 2: Bind the Texture You bind the texture to make it the active one for a specific target. For standard images, the target is GL_TEXTURE_2D. glBindTexture(GL_TEXTURE_2D, textureID); All subsequent texture commands for GL_TEXTURE_2D will now configure the texture with ID textureID. Step 3: Set Texture Parameters (Wrapping and Filtering) Before you upload the data, you should tell OpenGL how to handle the texture when it's rendered. Wrapping: What happens if the texture coordinates are outside the [0, 1] range? GL_REPEAT: The texture repeats. GL_CLAMP_TO_EDGE: The edge color is stretched. Filtering: What happens when the texture is scaled up (magnified) or down (minified)? GL_NEAREST: \"Pixelated\" look. Fast but blocky. GL_LINEAR: \"Blurry\" look. Smooth but can be blurry up close. // Set texture wrapping parameters glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); // S is for the x-axis (like U) glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); // T is for the y-axis (like V) // Set texture filtering parameters glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); // Minification (zoomed out) glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); // Magnification (zoomed in) Step 4: Upload the Texture Data to the GPU This is the core step where you send the pixel data from Step 0 to the currently bound texture object on the GPU. The function for this is glTexImage2D. // Using the variables from stb_image.h // Note: We check nrChannels to determine the format GLenum format = (nrChannels == 4) ? GL_RGBA : GL_RGB; glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data); Let's break down the glTexImage2D parameters: target: GL_TEXTURE_2D. level: Mipmap level. 0 is the base level. internalFormat: The format OpenGL should use to store the texture (e.g., GL_RGB). width, height: Dimensions of the image from Step 0. border: Legacy, should always be 0. format: The format of the source data you are providing (GL_RGB or GL_RGBA). type: The data type of the source data (GL_UNSIGNED_BYTE for standard images). data: The pointer to the image data we loaded with stb_image. Step 5: Generate Mipmaps (Optional but Recommended) Mipmaps are pre-calculated, smaller versions of your texture that OpenGL will automatically use when the object is far away. This prevents visual artifacts (moir\u00e9 patterns) and improves performance. glGenerateMipmap(GL_TEXTURE_2D); This automatically generates all the smaller mipmap levels from the base image you just uploaded. For this to work best, you should set your GL_TEXTURE_MIN_FILTER to one of the mipmap options, like GL_LINEAR_MIPMAP_LINEAR. Step 6: Free the Image Data from CPU Memory Once the data is on the GPU, you no longer need the copy in your application's memory. stbi_image_free(data); full code : #include \"stb_image.h\" // Don't forget to include this // A helper function to load a texture from a file unsigned int loadTexture(const char* path) { unsigned int textureID; glGenTextures(1, &textureID); int width, height, nrChannels; // Tell stb_image.h to flip loaded textures on the y-axis (common in OpenGL) stbi_set_flip_vertically_on_load(true); unsigned char *data = stbi_load(path, &width, &height, &nrChannels, 0); if (data) { GLenum format; if (nrChannels == 1) format = GL_RED; else if (nrChannels == 3) format = GL_RGB; else if (nrChannels == 4) format = GL_RGBA; glBindTexture(GL_TEXTURE_2D, textureID); glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data); glGenerateMipmap(GL_TEXTURE_2D); // Set texture wrapping and filtering options glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); } else { std::cout << \"Failed to load texture: \" << path << std::endl; } stbi_image_free(data); // Free the CPU-side image memory return textureID; } 3. How to Use the Texture in Shaders Now that the texture is on the GPU, you need to tell your shader how to access it. This involves Texture Units and a special uniform type called a Sampler . A GPU has a limited number of \"texture slots\" or Texture Units (e.g., 16 or 32). You need to: Activate a texture unit. Bind your texture to that unit. Tell the shader which unit to look at. In the Shader (GLSL): You need two things: The texture coordinates from the vertex shader. A sampler2D uniform in the fragment shader. Vertex Shader: #version 330 core layout (location = 0) in vec3 aPos; layout (location = 1) in vec2 aTexCoord; // Comes from a VBO out vec2 TexCoord; // Pass texture coords to the fragment shader void main() { gl_Position = vec4(aPos, 1.0); TexCoord = aTexCoord; } Fragment Shader: #version 330 core out vec4 FragColor; in vec2 TexCoord; // Received from the vertex shader // The texture sampler uniform. // This will get its data from a specific texture unit. uniform sampler2D ourTexture; void main() { // The texture() function looks up the color from the texture // at the given texture coordinates. FragColor = texture(ourTexture, TexCoord); } In your Render Loop (C++): Before you draw, you must bind the texture to a texture unit and tell the sampler uniform which unit to use. // In the render loop... glUseProgram(shaderProgramID); // 1. Activate texture unit 0 glActiveTexture(GL_TEXTURE0); // 2. Bind your texture to the active unit glBindTexture(GL_TEXTURE_2D, textureID); // 3. Tell the 'ourTexture' sampler to use texture unit 0 // glGetUniformLocation is used to get the location of \"ourTexture\" glUniform1i(glGetUniformLocation(shaderProgramID, \"ourTexture\"), 0); // 4. Draw your object glBindVertexArray(VAO); glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0); The magic is in the glUniform1i(..., 0) call. You are setting the integer value of the sampler2D uniform to 0, which corresponds to GL_TEXTURE0 , the unit you just bound your texture to. If you were using a second texture, you would bind it to GL_TEXTURE1 and set its corresponding sampler uniform to 1. references https://www.opengl-tutorial.org/beginners-tutorials/tutorial-2-the-first-triangle/","title":"Data shared between CPU and GPU"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#shaders","text":"In the simplest possible configuration, you will need two shaders : one called Vertex Shader, which will be executed for each vertex, and one called Fragment Shader, which will be executed for each sample. If we use 4x antialising, we have 4 samples in each pixel. Shaders are programmed in a language called GLSL : GL Shader Language, which is part of OpenGL. Unlike C or Java, GLSL has to be compiled at run time, which means that each and every time you launch your application, all your shaders are recompiled. Shaders code run in GPU, so we need some way to share data between CPU and GPU.","title":"Shaders"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#per-vertex-data","text":"Per-Vertex Data in OpenGl is stored in a buffer called Vertex Buffer Object (VBO). VBO is used to send the attributes (Vertex positions, Vertex colors, Texture coordinate, Normal vectors) of vertices to Vertex Shader, one item of buffer bind one vertex. The OpenGL buffer is created, bound, filled and configured with the standard functions ( glGenBuffers , glBindBuffer , glBufferData , glVertexAttribPointer ) ;","title":"Per-Vertex  Data"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-1-generate-the-buffer","text":"First, you ask OpenGL to create a buffer object for you. It returns a unique ID (an unsigned integer) that you use to refer to that buffer. GLuint VBO_ID; glGenBuffers(1, &VBO_ID); // Generate 1 buffer and store its ID in VBO_ID","title":"Step 1: Generate the Buffer"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-2-bind-the-buffer","text":"OpenGL is a state machine. To work with a specific buffer, you must first \"bind\" it, making it the currently active buffer for a specific target. For vertex data, the target isGL_ARRAY_BUFFER. // Make our new buffer the active GL_ARRAY_BUFFER glBindBuffer(GL_ARRAY_BUFFER, VBO_ID); AnyGL_ARRAY_BUFFERoperations will now affectVBO_ID.","title":"Step 2: Bind the Buffer"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-3-buffer-the-data","text":"This is the crucial step where you copy your vertex data from your application's memory (on the CPU) to the buffer's memory (on the GPU). // Our vertex data in an array on the CPU float vertices[] = { // positions // colors -0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f, // bottom left 0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, // bottom right 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 1.0f // top center }; // Copy the data into the currently bound buffer (VBO_ID) glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); Let's break down glBufferData : target:GL_ARRAY_BUFFER, the buffer type we're working with. size: The total size of the data in bytes (sizeof(vertices)). data: A pointer to the actual vertex data (vertices). usage: A hint to OpenGL about how we'll use this data. GL_STATIC_DRAW: The data will be set once and used many times (e.g., a static model) GL_DYNAMIC_DRAW: The data will be changed frequently and used many times (e.g., a character's animation). GL_STREAM_DRAW: The data will be set once and used only a few times.","title":"Step 3: Buffer the Data"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-4-configure-set-vertex-attribute-pointers","text":"The GPU now has your data, but it doesn't know how to interpret it. Is it just a big blob of floats? You need to tell it: \"Okay, the first 3 floats of each vertex are its position. The next 3 floats are its color.\" This is done with glVertexAttribPointer . // Tell OpenGL how to interpret the position data (attribute 0) glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0); glEnableVertexAttribArray(0); // Enable attribute 0 // Tell OpenGL how to interpret the color data (attribute 1) glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float))); glEnableVertexAttribArray(1); // Enable attribute 1 Let's break down glVertexAttribPointer : index: The vertex attribute's location. In shaders, you'd have layout (location = 0) in vec3 aPos; . This 0 matches the index. size: The number of components per vertex attribute (e.g., 3 for a vec3 position). type: The data type of the components (GL_FLOAT). normalized: Whether the data should be normalized (we don't need this for floats). stride: The byte-offset between consecutive vertices. Our vertex has 6 floats (3 pos + 3 color), so the stride is 6 * sizeof(float) . pointer(offset): The offset of the first component of this attribute in the vertex. For position, it's 0. For color, it starts after the 3 position floats, so its offset is 3 * sizeof(float) . Corresponding code in Vertex Shader // Input vertex data, different for all executions of this shader. layout(location = 0) in vec3 vertexPosition_modelspace; layout(location = 1) in vec3 vertexColor;","title":"Step 4: Configure - Set Vertex Attribute Pointers"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-5-draw","text":"Now, in your render loop, you just need to bind the VBO and tell OpenGL to draw. // In the render loop glBindBuffer(GL_ARRAY_BUFFER, VBO_ID); glDrawArrays(GL_TRIANGLES, 0, 3); // Draw 3 vertices, starting from index 0 Improvement with VAOs: The process in Step 4 and 5 is often simplified by a Vertex Array Object (VAO) , which \"remembers\" all the glVertexAttribPointer calls and VBO bindings for you. In modern OpenGL, you'd set up a VAO once, and in the render loop, you would just bind the VAO and call glDrawArrays .","title":"Step 5: Draw!"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-6-cleanup","text":"When you're done with the buffer (e.g., closing the application), you should delete it to free up GPU memory. glDeleteBuffers(1, &VBO_ID);","title":"Step 6: Cleanup"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#global-data","text":"Global Data in OpenGl called Uniform. Uniform can be used to send global data to all shaders. Its key characteristic is that its value is uniform (constant and unchanging) for every single vertex and fragment processed within a single draw call.","title":"Global Data"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-1-declare-the-uniform-in-the-shader-glsl","text":"ou declare it in your shader code just like a global variable, using the uniform keyword. uniform vec3 LightPosition_worldspace;","title":"Step 1: Declare the Uniform in the Shader (GLSL)"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-2-get-the-uniforms-location","text":"In your CPU-side code, after you've compiled and linked your shader program, you need to ask OpenGL for the \"location\" of your uniform. This is just an integer ID that OpenGL uses to refer to that specific uniform. You only need to do this once after creating the shader program. GLuint LightID = glGetUniformLocation(programID, \"LightPosition_worldspace\"); // It's good practice to check if the uniform was found. // It might not be found if it's unused in the shader, as the compiler may optimize it out. if (LightID == -1) { // Handle error... }","title":"Step 2: Get the Uniform's \"Location\""},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-3-set-the-uniforms-value","text":"This is done in your render loop , right before you make a draw call (glDrawArraysorglDrawElements). Crucially, you mustglUseProgramfirst to make your shader active, as theglUniformfunctions operate on the currently active program. // In the render loop... glm::vec3 lightPos = glm::vec3(4, 4, 4); glUniform3f(LightID, lightPos.x, lightPos.y, lightPos.z);","title":"Step 3: Set the Uniform's Value"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#compare-vbos-and-uniforms","text":"VBOs hold data that is different for each vertex (like positions). They are loaded once into GPU memory. Uniforms hold data that is the same for all vertices in a draw call (like a transformation matrix or global color). They are set from the CPU just before drawing. Together, VBOs and Uniforms form the fundamental way you communicate all necessary rendering data to the GPU in modern OpenGL. Feature Vertex Attribute (from VBO) Uniform Scope Per-Vertex Per-Draw Call (Global to the shader program) Data Source Read from a Vertex Buffer Object (VBO) Set directly from CPU application code before drawing. Variability Value is different for each vertex. Value is the same for all vertices and fragments. Typical Use Position, per-vertex color, normals, texture coordinates. Transformation matrices, time, lighting properties, global color.","title":"Compare VBOs and  Uniforms"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#texture-data","text":"Texture data is stored in buffer, but unlike vertex data, it is global data rather than per-vertex data, so Texture Data is a form of global buffer data. Sending texture data is the third pillar of getting data to the GPU, alongside VBOs (per-vertex data) and Uniforms (global data).","title":"Texture Data"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#1-what-is-a-texture-in-opengl","text":"In OpenGL, a Texture is a memory object, typically living on the GPU, that stores image data. This data can be 1D, 2D, or 3D, but the most common form is a 2D texture used to wrap an image around a 3D model. The process involves: Loading an image file (like a .png or .jpg) into your application's memory (CPU). Creating an OpenGL texture object. Uploading the pixel data from your application to the texture object on the GPU. Telling the shader how to use this texture.","title":"1. What is a Texture in OpenGL?"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#2-the-workflow-a-step-by-step-guide","text":"Here is the complete process for loading and using a texture.","title":"2. The Workflow: A Step-by-Step Guide"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-0-load-the-image-from-a-file-cpu-side","text":"OpenGL itself does not know how to open and read image files. You must use a third-party library for this. The most popular and easiest one for beginners is stb_image.h . You include this library and it gives you a simple function to load an image into a byte array. #include \"stb_image.h\" // A popular single-header image loading library int width, height, nrChannels; unsigned char *data = stbi_load(\"container.jpg\", &width, &height, &nrChannels, 0); if (data) { // Image loaded successfully! // 'width' and 'height' have the image dimensions. // 'nrChannels' is 3 for RGB, 4 for RGBA. // 'data' is a pointer to the raw pixel data. } else { // Failed to load image }","title":"Step 0: Load the Image from a File (CPU-Side)"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-1-generate-a-texture-object","text":"Just like with VBOs, you ask OpenGL to generate a unique ID for your texture. GLuint textureID; glGenTextures(1, &textureID);","title":"Step 1: Generate a Texture Object"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-2-bind-the-texture","text":"You bind the texture to make it the active one for a specific target. For standard images, the target is GL_TEXTURE_2D. glBindTexture(GL_TEXTURE_2D, textureID); All subsequent texture commands for GL_TEXTURE_2D will now configure the texture with ID textureID.","title":"Step 2: Bind the Texture"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-3-set-texture-parameters-wrapping-and-filtering","text":"Before you upload the data, you should tell OpenGL how to handle the texture when it's rendered. Wrapping: What happens if the texture coordinates are outside the [0, 1] range? GL_REPEAT: The texture repeats. GL_CLAMP_TO_EDGE: The edge color is stretched. Filtering: What happens when the texture is scaled up (magnified) or down (minified)? GL_NEAREST: \"Pixelated\" look. Fast but blocky. GL_LINEAR: \"Blurry\" look. Smooth but can be blurry up close. // Set texture wrapping parameters glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); // S is for the x-axis (like U) glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); // T is for the y-axis (like V) // Set texture filtering parameters glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); // Minification (zoomed out) glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); // Magnification (zoomed in)","title":"Step 3: Set Texture Parameters (Wrapping and Filtering)"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-4-upload-the-texture-data-to-the-gpu","text":"This is the core step where you send the pixel data from Step 0 to the currently bound texture object on the GPU. The function for this is glTexImage2D. // Using the variables from stb_image.h // Note: We check nrChannels to determine the format GLenum format = (nrChannels == 4) ? GL_RGBA : GL_RGB; glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data); Let's break down the glTexImage2D parameters: target: GL_TEXTURE_2D. level: Mipmap level. 0 is the base level. internalFormat: The format OpenGL should use to store the texture (e.g., GL_RGB). width, height: Dimensions of the image from Step 0. border: Legacy, should always be 0. format: The format of the source data you are providing (GL_RGB or GL_RGBA). type: The data type of the source data (GL_UNSIGNED_BYTE for standard images). data: The pointer to the image data we loaded with stb_image.","title":"Step 4: Upload the Texture Data to the GPU"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-5-generate-mipmaps-optional-but-recommended","text":"Mipmaps are pre-calculated, smaller versions of your texture that OpenGL will automatically use when the object is far away. This prevents visual artifacts (moir\u00e9 patterns) and improves performance. glGenerateMipmap(GL_TEXTURE_2D); This automatically generates all the smaller mipmap levels from the base image you just uploaded. For this to work best, you should set your GL_TEXTURE_MIN_FILTER to one of the mipmap options, like GL_LINEAR_MIPMAP_LINEAR.","title":"Step 5: Generate Mipmaps (Optional but Recommended)"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#step-6-free-the-image-data-from-cpu-memory","text":"Once the data is on the GPU, you no longer need the copy in your application's memory. stbi_image_free(data); full code : #include \"stb_image.h\" // Don't forget to include this // A helper function to load a texture from a file unsigned int loadTexture(const char* path) { unsigned int textureID; glGenTextures(1, &textureID); int width, height, nrChannels; // Tell stb_image.h to flip loaded textures on the y-axis (common in OpenGL) stbi_set_flip_vertically_on_load(true); unsigned char *data = stbi_load(path, &width, &height, &nrChannels, 0); if (data) { GLenum format; if (nrChannels == 1) format = GL_RED; else if (nrChannels == 3) format = GL_RGB; else if (nrChannels == 4) format = GL_RGBA; glBindTexture(GL_TEXTURE_2D, textureID); glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data); glGenerateMipmap(GL_TEXTURE_2D); // Set texture wrapping and filtering options glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); } else { std::cout << \"Failed to load texture: \" << path << std::endl; } stbi_image_free(data); // Free the CPU-side image memory return textureID; }","title":"Step 6: Free the Image Data from CPU Memory"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#3-how-to-use-the-texture-in-shaders","text":"Now that the texture is on the GPU, you need to tell your shader how to access it. This involves Texture Units and a special uniform type called a Sampler . A GPU has a limited number of \"texture slots\" or Texture Units (e.g., 16 or 32). You need to: Activate a texture unit. Bind your texture to that unit. Tell the shader which unit to look at. In the Shader (GLSL): You need two things: The texture coordinates from the vertex shader. A sampler2D uniform in the fragment shader. Vertex Shader: #version 330 core layout (location = 0) in vec3 aPos; layout (location = 1) in vec2 aTexCoord; // Comes from a VBO out vec2 TexCoord; // Pass texture coords to the fragment shader void main() { gl_Position = vec4(aPos, 1.0); TexCoord = aTexCoord; } Fragment Shader: #version 330 core out vec4 FragColor; in vec2 TexCoord; // Received from the vertex shader // The texture sampler uniform. // This will get its data from a specific texture unit. uniform sampler2D ourTexture; void main() { // The texture() function looks up the color from the texture // at the given texture coordinates. FragColor = texture(ourTexture, TexCoord); } In your Render Loop (C++): Before you draw, you must bind the texture to a texture unit and tell the sampler uniform which unit to use. // In the render loop... glUseProgram(shaderProgramID); // 1. Activate texture unit 0 glActiveTexture(GL_TEXTURE0); // 2. Bind your texture to the active unit glBindTexture(GL_TEXTURE_2D, textureID); // 3. Tell the 'ourTexture' sampler to use texture unit 0 // glGetUniformLocation is used to get the location of \"ourTexture\" glUniform1i(glGetUniformLocation(shaderProgramID, \"ourTexture\"), 0); // 4. Draw your object glBindVertexArray(VAO); glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0); The magic is in the glUniform1i(..., 0) call. You are setting the integer value of the sampler2D uniform to 0, which corresponds to GL_TEXTURE0 , the unit you just bound your texture to. If you were using a second texture, you would bind it to GL_TEXTURE1 and set its corresponding sampler uniform to 1.","title":"3. How to Use the Texture in Shaders"},{"location":"graphics/opengl/Data%20shared%20between%20CPU%20and%20GPU/#references","text":"https://www.opengl-tutorial.org/beginners-tutorials/tutorial-2-the-first-triangle/","title":"references"},{"location":"graphics/opengl/Matrices%20in%20opengl/","text":"_The engines don\u2019t move the ship at all. The ship stays where it is and the engines move the universe around it. ---- Futurama Homogeneous coordinates Until then, we only considered 3D vertices as a (x,y,z) triplet. Let\u2019s introduce w. We will now have (x,y,z,w) vectors. This will be more clear soon, but for now, just remember this: - If w == 1, then the vector (x,y,z,1) is a position in space. - If w == 0, then the vector (x,y,z,0) is a direction. (In fact, remember this forever.) What difference does this make? Well, for a rotation, it doesn\u2019t change anything. When you rotate a point or a direction, you get the same result. However, for a translation (when you move the point in a certain direction), things are different. What could mean \u201ctranslate a direction\u201d? Not much. Homogeneous coordinates allow us to use a single mathematical formula to deal with these two cases. Translation matrices These are the most simple tranformation matrices to understand. A translation matrix look like this: where X,Y,Z are the values that you want to add to your position. So if we want to translate the vector (10,10,10,1) of 10 units in the X direction, we get: \u2026and we get a (20,10,10,1) homogeneous vector! Remember, the 1 means that it is a position, not a direction. So our transformation didn\u2019t change the fact that we were dealing with a position, which is good. Let\u2019s now see what happens to a vector that represents a direction towards the -z axis: (0,0,-1,0) \u2026i.e. our original (0,0,-1,0) direction, which is great because, as I said earlier, moving a direction does not make sense. So, how does this translate to code? In C++, with GLM: #include <glm/gtx/transform.hpp> // after <glm/glm.hpp> glm::mat4 myMatrix = glm::translate(glm::mat4(), glm::vec3(10.0f, 0.0f, 0.0f)); glm::vec4 myVector(10.0f, 10.0f, 10.0f, 0.0f); glm::vec4 transformedVector = myMatrix * myVector; // guess the result In GLSL: vec4 transformedVector = myMatrix * myVector; Well, in fact, you almost never do this in GLSL. Most of the time, you use glm::translate() in C++ to compute your matrix, send it to GLSL, and do only the multiplication. The Identity matrix This one is special. It doesn\u2019t do anything. But I mention it because it\u2019s as important as knowing that multiplying A by 1.0 gives A. In C++: glm::mat4 myIdentityMatrix = glm::mat4(1.0f); Scaling matrices Scaling matrices are quite easy too: So if you want to scale a vector (position or direction, it doesn\u2019t matter) by 2.0 in all directions: and the w still didn\u2019t change. You may ask: what is the meaning of \u201cscaling a direction\u201d? Well, often, not much, so you usually don\u2019t do such a thing, but in some (rare) cases it can be handy. (notice that the identity matrix is only a special case of scaling matrices, with (X,Y,Z) = (1,1,1). It\u2019s also a special case of translation matrix with (X,Y,Z)=(0,0,0), by the way) In C++: // Use #include <glm/gtc/matrix_transform.hpp> and #include <glm/gtx/transform.hpp> glm::mat4 myScalingMatrix = glm::scale(glm::mat4(1), glm::vec3(2,2,2)); Rotation matrices These are quite complicated. I\u2019ll skip the details here, as it\u2019s not important to know their exact layout for everyday use. For more information, please have a look to the Matrices and Quaternions FAQ (popular resource, probably available in your language as well). You can also have a look at the Rotations tutorials . In C++: // Use #include <glm/gtc/matrix_transform.hpp> and #include <glm/gtx/transform.hpp> glm::vec3 myRotationAxis(??,??,??); glm::rotate( angle_in_degrees, myRotationAxis ); Cumulating transformations So now we know how to rotate, translate, and scale our vectors. It would be great to combine these transformations. This is done by multiplying the matrices together, for instance: TransformedVector = TranslationMatrix * RotationMatrix * ScaleMatrix * OriginalVector; !!! BEWARE!!! This lines actually performs the scaling FIRST, and THEN the rotation, and THEN the translation. This is how matrix multiplication works. Try it yourself: make one step ahead (beware of your computer) and turn left; turn left, and make one step ahead Writing the operations in another order wouldn\u2019t produce the same result. As a matter of fact, the order above is what you will usually need for game characters and other items: Scale it first if needed; then set its direction, then translate it. For instance, given a ship model (rotations have been removed for simplification): The wrong way: You translate the ship by (10,0,0). Its center is now at 10 units of the origin. You scale your ship by 2. Every coordinate is multiplied by 2 relative to the origin , which is far away\u2026 So you end up with a big ship, but centered at 2*10 = 20. Which you don\u2019t want. The right way: You scale your ship by 2. You get a big ship, centered on the origin. You translate your ship. It\u2019s still the same size, and at the right distance. Matrix-matrix multiplication is very similar to matrix-vector multiplication, so I\u2019ll once again skip some details and redirect you the the Matrices and Quaternions FAQ if needed. For now, we\u2019ll simply ask the computer to do it: in C++, with GLM: glm::mat4 myModelMatrix = myTranslationMatrix * myRotationMatrix * myScaleMatrix; glm::vec4 myTransformedVector = myModelMatrix * myOriginalVector; in GLSL: mat4 transform = mat2 * mat1; vec4 out_vec = transform * in_vec; The Model, View and Projection matrices For the rest of this tutorial, we will suppose that we know how to draw Blender\u2019s favourite 3d model: the monkey Suzanne. The Model, View and Projection matrices are a handy tool to separate transformations cleanly. The Model matrix This model, just as our beloved red triangle, is defined by a set of vertices. The X,Y,Z coordinates of these vertices are defined relative to the object\u2019s center: that is, if a vertex is at (0,0,0), it is at the center of the object. We\u2019d like to be able to move this model, maybe because the player controls it with the keyboard and the mouse. Easy, you just learnt do do so: translation\\*rotation\\*scale , and done. You apply this matrix to all your vertices at each frame (in GLSL, not in C++!) and everything moves. Something that doesn\u2019t move will be at the center of the world . Your vertices are now in World Space . This is the meaning of the black arrow in the image below: We went from Model Space (all vertices defined relatively to the center of the model) to World Space (all vertices defined relatively to the center of the world). We can sum this up with the following diagram: The View matrix Let\u2019s quote Futurama again: The engines don\u2019t move the ship at all. The ship stays where it is and the engines move the universe around it. So initially your camera is at the origin of the World Space. In order to move the world, you simply introduce another matrix. Let\u2019s say you want to move your camera of 3 units to the right (+X). This is equivalent to moving your whole world (meshes included) 3 units to the LEFT! (-X). While you brain melts, let\u2019s do it: // Use #include <glm/gtc/matrix_transform.hpp> and #include <glm/gtx/transform.hpp> glm::mat4 ViewMatrix = glm::translate(glm::mat4(), glm::vec3(-3.0f, 0.0f ,0.0f)); Again, the image below illustrates this: We went from World Space (all vertices defined relatively to the center of the world, as we made so in the previous section) to Camera Space (all vertices defined relatively to the camera). Before you head explodes from this, enjoy GLM\u2019s great glm::lookAt function: glm::mat4 CameraMatrix = glm::lookAt( cameraPosition, // the position of your camera, in world space cameraTarget, // where you want to look at, in world space upVector // probably glm::vec3(0,1,0), but (0,-1,0) would make you looking upside-down, which can be great too ); Here\u2019s the compulsory diagram: This is not over yet, though. The Projection matrix We\u2019re now in Camera Space. This means that after all theses transformations, a vertex that happens to have x==0 and y==0 should be rendered at the center of the screen. But we can\u2019t use only the x and y coordinates to determine where an object should be put on the screen: its distance to the camera (z) counts, too! For two vertices with similar x and y coordinates, the vertex with the biggest z coordinate will be more on the center of the screen than the other. This is called a perspective projection: And luckily for us, a 4x4 matrix can represent this projection: // Generates a really hard-to-read matrix, but a normal, standard 4x4 matrix nonetheless glm::mat4 projectionMatrix = glm::perspective( glm::radians(FoV), // The vertical Field of View, in radians: the amount of \"zoom\". Think \"camera lens\". Usually between 90\u00b0 (extra wide) and 30\u00b0 (quite zoomed in) 4.0f / 3.0f, // Aspect Ratio. Depends on the size of your window. Notice that 4/3 == 800/600 == 1280/960, sounds familiar? 0.1f, // Near clipping plane. Keep as big as possible, or you'll get precision issues. 100.0f // Far clipping plane. Keep as little as possible. ); One last time: We went from Camera Space (all vertices defined relatively to the camera) to Homogeneous Space (all vertices defined in a small cube. Everything inside the cube is onscreen). And the final diagram: Here\u2019s another diagram so that you understand better what happens with this Projection stuff. Before projection, we\u2019ve got our blue objects, in Camera Space, and the red shape represents the frustum of the camera: the part of the scene that the camera is actually able to see. Multiplying everything by the Projection Matrix has the following effect: In this image, the frustum is now a perfect cube (between -1 and 1 on all axes, it\u2019s a little bit hard to see it), and all blue objects have been deformed in the same way. Thus, the objects that are near the camera ( = near the face of the cube that we can\u2019t see) are big, the others are smaller. Seems like real life! Let\u2019s see what it looks like from the \u201cbehind\u201d the frustum: Here you get your image! It\u2019s just a little bit too square, so another mathematical transformation is applied (this one is automatic, you don\u2019t have to do it yourself in the shader) to fit this to the actual window size: And this is the image that is actually rendered! Cumulating transformations: the ModelViewProjection matrix \u2026Just a standard matrix multiplication as you already love them! // C++: compute the matrix glm::mat4 MVPmatrix = projection * view * model; // Remember: inverted! // GLSL: apply it transformed_vertex = MVP * in_vertex; Putting it all together First step: include the GLM GTC matrix transform functions: #include <glm/gtc/matrix_transform.hpp> Second step: generating our MVP matrix. This must be done for each model you render. // Projection matrix: 45\u00b0 Field of View, 4:3 ratio, display range: 0.1 unit <-> 100 units glm::mat4 Projection = glm::perspective(glm::radians(45.0f), (float) width / (float)height, 0.1f, 100.0f); // Or, for an ortho camera: //glm::mat4 Projection = glm::ortho(-10.0f,10.0f,-10.0f,10.0f,0.0f,100.0f); // In world coordinates // Camera matrix glm::mat4 View = glm::lookAt( glm::vec3(4,3,3), // Camera is at (4,3,3), in World Space glm::vec3(0,0,0), // and looks at the origin glm::vec3(0,1,0) // Head is up (set to 0,-1,0 to look upside-down) ); // Model matrix: an identity matrix (model will be at the origin) glm::mat4 Model = glm::mat4(1.0f); // Our ModelViewProjection: multiplication of our 3 matrices glm::mat4 mvp = Projection * View * Model; // Remember, matrix multiplication is the other way around Third step: give it to GLSL // Get a handle for our \"MVP\" uniform // Only during the initialisation GLuint MatrixID = glGetUniformLocation(programID, \"MVP\"); // Send our transformation to the currently bound shader, in the \"MVP\" uniform // This is done in the main loop since each model will have a different MVP matrix (At least for the M part) glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &mvp[0][0]); Fourth step: use it in GLSL to transform our vertices in SimpleVertexShader.vertexshader // Input vertex data, different for all executions of this shader. layout(location = 0) in vec3 vertexPosition_modelspace; // Values that stay constant for the whole mesh. uniform mat4 MVP; void main(){ // Output position of the vertex, in clip space: MVP * position gl_Position = MVP * vec4(vertexPosition_modelspace,1); } https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/","title":"Matrices in opengl"},{"location":"graphics/opengl/Matrices%20in%20opengl/#homogeneous-coordinates","text":"Until then, we only considered 3D vertices as a (x,y,z) triplet. Let\u2019s introduce w. We will now have (x,y,z,w) vectors. This will be more clear soon, but for now, just remember this: - If w == 1, then the vector (x,y,z,1) is a position in space. - If w == 0, then the vector (x,y,z,0) is a direction. (In fact, remember this forever.) What difference does this make? Well, for a rotation, it doesn\u2019t change anything. When you rotate a point or a direction, you get the same result. However, for a translation (when you move the point in a certain direction), things are different. What could mean \u201ctranslate a direction\u201d? Not much. Homogeneous coordinates allow us to use a single mathematical formula to deal with these two cases.","title":"Homogeneous coordinates"},{"location":"graphics/opengl/Matrices%20in%20opengl/#translation-matrices","text":"These are the most simple tranformation matrices to understand. A translation matrix look like this: where X,Y,Z are the values that you want to add to your position. So if we want to translate the vector (10,10,10,1) of 10 units in the X direction, we get: \u2026and we get a (20,10,10,1) homogeneous vector! Remember, the 1 means that it is a position, not a direction. So our transformation didn\u2019t change the fact that we were dealing with a position, which is good. Let\u2019s now see what happens to a vector that represents a direction towards the -z axis: (0,0,-1,0) \u2026i.e. our original (0,0,-1,0) direction, which is great because, as I said earlier, moving a direction does not make sense. So, how does this translate to code? In C++, with GLM: #include <glm/gtx/transform.hpp> // after <glm/glm.hpp> glm::mat4 myMatrix = glm::translate(glm::mat4(), glm::vec3(10.0f, 0.0f, 0.0f)); glm::vec4 myVector(10.0f, 10.0f, 10.0f, 0.0f); glm::vec4 transformedVector = myMatrix * myVector; // guess the result In GLSL: vec4 transformedVector = myMatrix * myVector; Well, in fact, you almost never do this in GLSL. Most of the time, you use glm::translate() in C++ to compute your matrix, send it to GLSL, and do only the multiplication.","title":"Translation matrices"},{"location":"graphics/opengl/Matrices%20in%20opengl/#the-identity-matrix","text":"This one is special. It doesn\u2019t do anything. But I mention it because it\u2019s as important as knowing that multiplying A by 1.0 gives A. In C++: glm::mat4 myIdentityMatrix = glm::mat4(1.0f);","title":"The Identity matrix"},{"location":"graphics/opengl/Matrices%20in%20opengl/#scaling-matrices","text":"Scaling matrices are quite easy too: So if you want to scale a vector (position or direction, it doesn\u2019t matter) by 2.0 in all directions: and the w still didn\u2019t change. You may ask: what is the meaning of \u201cscaling a direction\u201d? Well, often, not much, so you usually don\u2019t do such a thing, but in some (rare) cases it can be handy. (notice that the identity matrix is only a special case of scaling matrices, with (X,Y,Z) = (1,1,1). It\u2019s also a special case of translation matrix with (X,Y,Z)=(0,0,0), by the way) In C++: // Use #include <glm/gtc/matrix_transform.hpp> and #include <glm/gtx/transform.hpp> glm::mat4 myScalingMatrix = glm::scale(glm::mat4(1), glm::vec3(2,2,2));","title":"Scaling matrices"},{"location":"graphics/opengl/Matrices%20in%20opengl/#rotation-matrices","text":"These are quite complicated. I\u2019ll skip the details here, as it\u2019s not important to know their exact layout for everyday use. For more information, please have a look to the Matrices and Quaternions FAQ (popular resource, probably available in your language as well). You can also have a look at the Rotations tutorials . In C++: // Use #include <glm/gtc/matrix_transform.hpp> and #include <glm/gtx/transform.hpp> glm::vec3 myRotationAxis(??,??,??); glm::rotate( angle_in_degrees, myRotationAxis );","title":"Rotation matrices"},{"location":"graphics/opengl/Matrices%20in%20opengl/#cumulating-transformations","text":"So now we know how to rotate, translate, and scale our vectors. It would be great to combine these transformations. This is done by multiplying the matrices together, for instance: TransformedVector = TranslationMatrix * RotationMatrix * ScaleMatrix * OriginalVector; !!! BEWARE!!! This lines actually performs the scaling FIRST, and THEN the rotation, and THEN the translation. This is how matrix multiplication works. Try it yourself: make one step ahead (beware of your computer) and turn left; turn left, and make one step ahead Writing the operations in another order wouldn\u2019t produce the same result. As a matter of fact, the order above is what you will usually need for game characters and other items: Scale it first if needed; then set its direction, then translate it. For instance, given a ship model (rotations have been removed for simplification): The wrong way: You translate the ship by (10,0,0). Its center is now at 10 units of the origin. You scale your ship by 2. Every coordinate is multiplied by 2 relative to the origin , which is far away\u2026 So you end up with a big ship, but centered at 2*10 = 20. Which you don\u2019t want. The right way: You scale your ship by 2. You get a big ship, centered on the origin. You translate your ship. It\u2019s still the same size, and at the right distance. Matrix-matrix multiplication is very similar to matrix-vector multiplication, so I\u2019ll once again skip some details and redirect you the the Matrices and Quaternions FAQ if needed. For now, we\u2019ll simply ask the computer to do it: in C++, with GLM: glm::mat4 myModelMatrix = myTranslationMatrix * myRotationMatrix * myScaleMatrix; glm::vec4 myTransformedVector = myModelMatrix * myOriginalVector; in GLSL: mat4 transform = mat2 * mat1; vec4 out_vec = transform * in_vec;","title":"Cumulating transformations"},{"location":"graphics/opengl/Matrices%20in%20opengl/#the-model-view-and-projection-matrices","text":"For the rest of this tutorial, we will suppose that we know how to draw Blender\u2019s favourite 3d model: the monkey Suzanne. The Model, View and Projection matrices are a handy tool to separate transformations cleanly.","title":"The Model, View and Projection matrices"},{"location":"graphics/opengl/Matrices%20in%20opengl/#the-model-matrix","text":"This model, just as our beloved red triangle, is defined by a set of vertices. The X,Y,Z coordinates of these vertices are defined relative to the object\u2019s center: that is, if a vertex is at (0,0,0), it is at the center of the object. We\u2019d like to be able to move this model, maybe because the player controls it with the keyboard and the mouse. Easy, you just learnt do do so: translation\\*rotation\\*scale , and done. You apply this matrix to all your vertices at each frame (in GLSL, not in C++!) and everything moves. Something that doesn\u2019t move will be at the center of the world . Your vertices are now in World Space . This is the meaning of the black arrow in the image below: We went from Model Space (all vertices defined relatively to the center of the model) to World Space (all vertices defined relatively to the center of the world). We can sum this up with the following diagram:","title":"The Model matrix"},{"location":"graphics/opengl/Matrices%20in%20opengl/#the-view-matrix","text":"Let\u2019s quote Futurama again: The engines don\u2019t move the ship at all. The ship stays where it is and the engines move the universe around it. So initially your camera is at the origin of the World Space. In order to move the world, you simply introduce another matrix. Let\u2019s say you want to move your camera of 3 units to the right (+X). This is equivalent to moving your whole world (meshes included) 3 units to the LEFT! (-X). While you brain melts, let\u2019s do it: // Use #include <glm/gtc/matrix_transform.hpp> and #include <glm/gtx/transform.hpp> glm::mat4 ViewMatrix = glm::translate(glm::mat4(), glm::vec3(-3.0f, 0.0f ,0.0f)); Again, the image below illustrates this: We went from World Space (all vertices defined relatively to the center of the world, as we made so in the previous section) to Camera Space (all vertices defined relatively to the camera). Before you head explodes from this, enjoy GLM\u2019s great glm::lookAt function: glm::mat4 CameraMatrix = glm::lookAt( cameraPosition, // the position of your camera, in world space cameraTarget, // where you want to look at, in world space upVector // probably glm::vec3(0,1,0), but (0,-1,0) would make you looking upside-down, which can be great too ); Here\u2019s the compulsory diagram: This is not over yet, though.","title":"The View matrix"},{"location":"graphics/opengl/Matrices%20in%20opengl/#the-projection-matrix","text":"We\u2019re now in Camera Space. This means that after all theses transformations, a vertex that happens to have x==0 and y==0 should be rendered at the center of the screen. But we can\u2019t use only the x and y coordinates to determine where an object should be put on the screen: its distance to the camera (z) counts, too! For two vertices with similar x and y coordinates, the vertex with the biggest z coordinate will be more on the center of the screen than the other. This is called a perspective projection: And luckily for us, a 4x4 matrix can represent this projection: // Generates a really hard-to-read matrix, but a normal, standard 4x4 matrix nonetheless glm::mat4 projectionMatrix = glm::perspective( glm::radians(FoV), // The vertical Field of View, in radians: the amount of \"zoom\". Think \"camera lens\". Usually between 90\u00b0 (extra wide) and 30\u00b0 (quite zoomed in) 4.0f / 3.0f, // Aspect Ratio. Depends on the size of your window. Notice that 4/3 == 800/600 == 1280/960, sounds familiar? 0.1f, // Near clipping plane. Keep as big as possible, or you'll get precision issues. 100.0f // Far clipping plane. Keep as little as possible. ); One last time: We went from Camera Space (all vertices defined relatively to the camera) to Homogeneous Space (all vertices defined in a small cube. Everything inside the cube is onscreen). And the final diagram: Here\u2019s another diagram so that you understand better what happens with this Projection stuff. Before projection, we\u2019ve got our blue objects, in Camera Space, and the red shape represents the frustum of the camera: the part of the scene that the camera is actually able to see. Multiplying everything by the Projection Matrix has the following effect: In this image, the frustum is now a perfect cube (between -1 and 1 on all axes, it\u2019s a little bit hard to see it), and all blue objects have been deformed in the same way. Thus, the objects that are near the camera ( = near the face of the cube that we can\u2019t see) are big, the others are smaller. Seems like real life! Let\u2019s see what it looks like from the \u201cbehind\u201d the frustum: Here you get your image! It\u2019s just a little bit too square, so another mathematical transformation is applied (this one is automatic, you don\u2019t have to do it yourself in the shader) to fit this to the actual window size: And this is the image that is actually rendered!","title":"The Projection matrix"},{"location":"graphics/opengl/Matrices%20in%20opengl/#cumulating-transformations-the-modelviewprojection-matrix","text":"\u2026Just a standard matrix multiplication as you already love them! // C++: compute the matrix glm::mat4 MVPmatrix = projection * view * model; // Remember: inverted! // GLSL: apply it transformed_vertex = MVP * in_vertex;","title":"Cumulating transformations: the ModelViewProjection matrix"},{"location":"graphics/opengl/Matrices%20in%20opengl/#putting-it-all-together","text":"First step: include the GLM GTC matrix transform functions: #include <glm/gtc/matrix_transform.hpp> Second step: generating our MVP matrix. This must be done for each model you render. // Projection matrix: 45\u00b0 Field of View, 4:3 ratio, display range: 0.1 unit <-> 100 units glm::mat4 Projection = glm::perspective(glm::radians(45.0f), (float) width / (float)height, 0.1f, 100.0f); // Or, for an ortho camera: //glm::mat4 Projection = glm::ortho(-10.0f,10.0f,-10.0f,10.0f,0.0f,100.0f); // In world coordinates // Camera matrix glm::mat4 View = glm::lookAt( glm::vec3(4,3,3), // Camera is at (4,3,3), in World Space glm::vec3(0,0,0), // and looks at the origin glm::vec3(0,1,0) // Head is up (set to 0,-1,0 to look upside-down) ); // Model matrix: an identity matrix (model will be at the origin) glm::mat4 Model = glm::mat4(1.0f); // Our ModelViewProjection: multiplication of our 3 matrices glm::mat4 mvp = Projection * View * Model; // Remember, matrix multiplication is the other way around Third step: give it to GLSL // Get a handle for our \"MVP\" uniform // Only during the initialisation GLuint MatrixID = glGetUniformLocation(programID, \"MVP\"); // Send our transformation to the currently bound shader, in the \"MVP\" uniform // This is done in the main loop since each model will have a different MVP matrix (At least for the M part) glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &mvp[0][0]); Fourth step: use it in GLSL to transform our vertices in SimpleVertexShader.vertexshader // Input vertex data, different for all executions of this shader. layout(location = 0) in vec3 vertexPosition_modelspace; // Values that stay constant for the whole mesh. uniform mat4 MVP; void main(){ // Output position of the vertex, in clip space: MVP * position gl_Position = MVP * vec4(vertexPosition_modelspace,1); } https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/","title":"Putting it all together"},{"location":"graphics/opengl/VBO%20Indexing/","text":"Indexed VBO in OpenGL when building your VBO, we always duplicated our vertices whenever two triangles shared an edge, hence the emergence of index VBOs, which enables to reuse the same vertex over and over again. This is done with an index buffer . Using indexing is very simple. First, you need to create an additional buffer, which you fill with the right indices. The code is the same as before, but now it\u2019s an ELEMENT_ARRAY_BUFFER, not an ARRAY_BUFFER. std::vector<unsigned int> indices; // fill \"indices\" as needed // Generate a buffer for the indices GLuint elementbuffer; glGenBuffers(1, &elementbuffer); glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer); glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STATIC_DRAW); and to draw the mesh, simply replace glDrawArrays by this : // Index buffer glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer); // Draw the triangles ! glDrawElements( GL_TRIANGLES, // mode indices.size(), // count GL_UNSIGNED_INT, // type (void*)0 // element array buffer offset );","title":"VBO Indexing"},{"location":"graphics/opengl/VBO%20Indexing/#indexed-vbo-in-opengl","text":"when building your VBO, we always duplicated our vertices whenever two triangles shared an edge, hence the emergence of index VBOs, which enables to reuse the same vertex over and over again. This is done with an index buffer . Using indexing is very simple. First, you need to create an additional buffer, which you fill with the right indices. The code is the same as before, but now it\u2019s an ELEMENT_ARRAY_BUFFER, not an ARRAY_BUFFER. std::vector<unsigned int> indices; // fill \"indices\" as needed // Generate a buffer for the indices GLuint elementbuffer; glGenBuffers(1, &elementbuffer); glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer); glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned int), &indices[0], GL_STATIC_DRAW); and to draw the mesh, simply replace glDrawArrays by this : // Index buffer glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer); // Draw the triangles ! glDrawElements( GL_TRIANGLES, // mode indices.size(), // count GL_UNSIGNED_INT, // type (void*)0 // element array buffer offset );","title":"Indexed VBO in OpenGL"},{"location":"math/Windowing%20transformations/","text":"Often in graphics we need to create a transform matrix that takes points in the rectangle $[x_l,x_h] \u00d7 [y_l,y_h] \u00d7 [z_l,z_h]$ to the rectangle $[x_l\u2032, x_h\u2032] \u00d7 [y_l\u2032, y_h\u2032 ]\u00d7 [z_l\u2032, z_h\u2032 ]$. This can be accomplished with a single scale and translate in sequence. However, it is more intuitive to create the transform from a sequence of three operations: 1. Move the point$(x_l,y_l,z_l)$ to the origin. 2. Scale the rectangle to be the same size as the target rectangle. 3. Move the origin to point $(x_l\u2032,y_l\u2032,z_l\u2032)$. Remembering that the right-hand matrix is applied first, we can write $$ \\begin{align} window &= translate (x_l',y_l',z_l') * scale\\left(\\frac{x_h'-x_l'}{x_h-x_l}, \\frac{y_h'-y_l'}{y_h-y_l}, \\frac{z_h'-z_l'}{z_h-z_l}\\right) * translate(\u2212x_l,\u2212y_l,\u2212z_l) \\ &= \\left[ \\begin{matrix} 1 & 0 & 0 & x_l' \\ 0 & 1 & 0 & y_l' \\ 0 & 0 & 1 & z_l' \\ 0 & 0 & 0 & 1 \\ \\end{matrix} \\right] \\left[ \\begin{matrix} \\frac{x_h'-x_l'}{x_h-x_l} & 0 & 0 & 0 \\ 0 & \\frac{y_h'-y_l'}{y_h-y_l} & 0 & 0 \\ 0 & 0 & \\frac{z_h'-z_l'}{z_h-z_l} & 0 \\ 0 & 0 & 0 & 1 \\ \\end{matrix} \\right] \\left[ \\begin{matrix} 1 & 0 & 0 & -x_l \\ 0 & 1 & 0 & -y_l \\ 0 & 0 & 1 & -z_l \\ 0 & 0 & 0 & 1 \\ \\end{matrix} \\right] \\ &= \\left[ \\begin{matrix} \\frac{x_h'-x_l'}{x_h-x_l} & 0 & 0 & \\frac{x_l'x_h-x_h'x_l}{x_h-x_l} \\ 0 & \\frac{y_h'-y_l'}{y_h-y_l} & 0 & \\frac{y_l'y_h-y_h'x_l}{y_h-y_l} \\ 0 & 0 & \\frac{z_h'-z_l'}{z_h-z_l} & \\frac{z_l'z_h-z_h'z_l}{z_h-z_l} \\ 0 & 0 & 0 & 1 \\ \\end{matrix} \\right] \\end{align} $$","title":"Windowing transformations"},{"location":"math/distance%20from%20point%20to%20plane/","text":"The distance from a point $P(x_0,y_0,z_0)$ to a plane $Ax+By+Cz+D=0$ is, $$d=\\frac{|Ax_0+By_0+Cz_0+D)|}{\\sqrt{A^2+B^2+C^2}}$$ To derive this formula, we can use vector projection . Here's a step-by-step derivation: Step 1: Rewrite the Plane Equation The general equation of a plane is: $$Ax+By+Cz+D=0$$ We can express it in normal vector form : $$\\vec{N}\u22c5\\vec{X}=-D$$ where: - $N=(A,B,C)$ is the normal vector to the plane, - $X=(x,y,z)$ is any point on the plane, So, the plane equation becomes: $$\\vec{N}\u22c5\\vec{X}+D=0$$ Step 2: Find a Reference Point on the Plane Let $Q(x_1,y_1,z_1)$ be any point on the plane. Then: $$Ax_1+By_1+Cz_1+D=0$$ We can solve for D: $$D=\u2212(Ax_1+By_1+Cz_1)$$ Step 3: Express the Distance as a Projection The shortest distance from $P(x_0,y_0,z_0)$ to the plane is the length of the perpendicular dropped from P to the plane. This is equivalent to the projection of the vector $\\vec{PQ}$ (where Q is any point on the plane) onto the normal vector $\\vec{N}$ The vector $\\vec{PQ}$ is: $$\\vec{PQ}=(x_1\u2212x_0,y_1\u2212y_0,z_1\u2212z_0)$$ The distance d is the magnitude of the projection of $\\vec{PQ}$ onto $\\vec{N}$ $$d=|proj_\\vec{N}\\vec{PQ}| = \\frac{\\left|\\vec{PQ}.\\vec{N}\\right|}{|\\vec{N}|} $$ Substituting $\\vec{PQ}$ and $\\vec{N}$ $$d=\\frac{|A(x_1-x_0)+B(y_1-y_0)+C(z_1-z_0)|}{\\sqrt{A^2+B^2+C^2}}$$ But since Q lies on the plane, we have $Ax_1+By_1+Cz_1=\u2212D$, so: $$d=\\frac{|-D-Ax_0-By_0-Cz_0)|}{\\sqrt{A^2+B^2+C^2}}$$ This simplifies to: $$d=\\frac{|Ax_0+By_0+Cz_0+D)|}{\\sqrt{A^2+B^2+C^2}}$$","title":"distance from point  to plane"},{"location":"math/distance%20from%20point%20to%20plane/#step-1-rewrite-the-plane-equation","text":"The general equation of a plane is: $$Ax+By+Cz+D=0$$ We can express it in normal vector form : $$\\vec{N}\u22c5\\vec{X}=-D$$ where: - $N=(A,B,C)$ is the normal vector to the plane, - $X=(x,y,z)$ is any point on the plane, So, the plane equation becomes: $$\\vec{N}\u22c5\\vec{X}+D=0$$","title":"Step 1: Rewrite the Plane Equation"},{"location":"math/distance%20from%20point%20to%20plane/#step-2-find-a-reference-point-on-the-plane","text":"Let $Q(x_1,y_1,z_1)$ be any point on the plane. Then: $$Ax_1+By_1+Cz_1+D=0$$ We can solve for D: $$D=\u2212(Ax_1+By_1+Cz_1)$$","title":"Step 2: Find a Reference Point on the Plane"},{"location":"math/distance%20from%20point%20to%20plane/#step-3-express-the-distance-as-a-projection","text":"The shortest distance from $P(x_0,y_0,z_0)$ to the plane is the length of the perpendicular dropped from P to the plane. This is equivalent to the projection of the vector $\\vec{PQ}$ (where Q is any point on the plane) onto the normal vector $\\vec{N}$ The vector $\\vec{PQ}$ is: $$\\vec{PQ}=(x_1\u2212x_0,y_1\u2212y_0,z_1\u2212z_0)$$ The distance d is the magnitude of the projection of $\\vec{PQ}$ onto $\\vec{N}$ $$d=|proj_\\vec{N}\\vec{PQ}| = \\frac{\\left|\\vec{PQ}.\\vec{N}\\right|}{|\\vec{N}|} $$ Substituting $\\vec{PQ}$ and $\\vec{N}$ $$d=\\frac{|A(x_1-x_0)+B(y_1-y_0)+C(z_1-z_0)|}{\\sqrt{A^2+B^2+C^2}}$$ But since Q lies on the plane, we have $Ax_1+By_1+Cz_1=\u2212D$, so: $$d=\\frac{|-D-Ax_0-By_0-Cz_0)|}{\\sqrt{A^2+B^2+C^2}}$$ This simplifies to: $$d=\\frac{|Ax_0+By_0+Cz_0+D)|}{\\sqrt{A^2+B^2+C^2}}$$","title":"Step 3: Express the Distance as a Projection"},{"location":"math/Quaternions/Quaternions/","text":"Readers are recommended to have read the Rodrigues' rotation article ahead of time as it will be used to compare results. Crash course on imaginary/complex numbers Before we can get into understanding quaternions we first need to understand the concept of imaginary and complex numbers. The names might seem daunting, but for our purposes the concepts are pretty straight forward. Imaginary numbers have a very simple purpose, to solve equations that real numbers couldn\u2019t! For example: $$x^2 + 25 = 0$$ There is no real number solution to this equation because any real number we take to the power of two will result in a positive number. So in order for the above equation to be true it must be that: $$x^2 = -25$$ This is what we call an imaginary number. They are special in the sense that they square to a real negative value. So far we have used $x$ as a variable, but usually when representing imaginary numbers we use what is called the imaginary unit i where $i^2 = -1$. That way we can represent any imaginary number as a product of a real number and i . For example: $$(5 i)^2 + 25 = 25 (i^2) + 25 = -25 + 25 = 0$$ You might notice that the imaginary unit has a pattern when taken to different powers: Power Pattern $i^0 = 1$ $i^1 = i$ $i^2 = -1$ $i^3 = -i$ $i^4 = 1$ $i^5 = i$ $i^6 = -1$ $i^7 = -i$ ... You'll note that this pattern also holds true for negative powers. Simply take notice that $i^{-1} = (1/i) * (i/i) = i/i^2 = i/-1 = -i$ and the rest of the negative powers become trivial to calculate. This pattern of 1, i, -1, -i may feel familiar to you. If we treat the real number part of the pattern as being on the x-axis and the imaginary parts as being on the y-axis then the pattern is essentially the same as x , y, -x, -y which is rotating 90 degrees counter-clockwise. Since these patterns share so much in common we can use a combination of imaginary and real numbers to represent numbers on a two dimensional grid. We call these complex numbers and we place them on the complex plane. Interestingly, if we multiply a complex number by i we're left with a resulting complex number that has been rotated 90 degrees counter-clockwise. $$ \\begin{align} & (2 + i) \\ & (2 + i) i = 2 i + i^2 = -1 + 2 i \\ & (2 + i) i^2 = (-1 + 2 i) i = -i + 2 i^2 = -2 - i \\ & (2 + i) i^3 = (-2 - i) i = -2 i - i^2 = 1 - 2 i \\ & (2 + i) i^4 = (1 - 2 i) i = i - 2*i^2 = 2 + i \\ \\end{align} $$ We can expand on this concept by instead multiplying with a complex number that gives us control of the angle we rotate by. We can trace a unit circle with $cos\u03b8 + sin\u03b8*i$ so if we multiply it by a complex number we get a general formula for rotating counter-clockwise by any angle, we call this a rotor. $$ \\begin{align} (w + xi) (cos\u03b8 + sin\u03b8 i) & = w cos\u03b8 + w sin\u03b8 i + x cos\u03b8 i + x sin\u03b8 i^2 \\ & = w cos\u03b8 - x sin\u03b8 + (w sin\u03b8 + x*cos\u03b8)i \\ \\end{align} $$ You might be somewhat familiar with this formula. It's just the 2D rotation matrix in complex number form! The quaternion is born Prior to quaternions most people saw the complex plane in 2D and simply figured if they wanted to add a third dimension they just had to add another imaginary number, say $j^2 = -1$. Quickly however they found this didn't quite work due to multiplication requiring us to know the product of two imaginary numbers. $$ \\begin{flalign } (w_1 + x_1 i + y_1 j)(w_2 + x_2 i + y_2 j) &= w_1 w_2 + w_1 x_2 i + w_1 y_2 j &\\ & \\quad + x_1 w_2 i + x_1 x_2 i^2 + x_1 y_2 ij \\ & \\quad + y_1 w_2 j + y_1 x_2 ji + y_1 y_2 j^2 \\ &= w_1 w_2 - x_1 x_2 - y_1 y_2 \\ & \\quad + (w_1 x_2 + x_1 w_2)i \\ & \\quad + (w_1 y_2 + y_1 w_2)j \\ & \\quad + x_1 y_2 ij + y_1 x_2 ji \\end{flalign } $$ Note: $ij$ and $ji$ are not commutative due to their imaginary nature. For quite sometime this problem didn't see much attention until an Irish mathematician named William Rowan Hamilton who figured the best way to solve it was to add a third imaginary number. Famously the condition he wrote was: $$ i^2 = j^2 = k^2 = i j k = -1 $$ This may seem a bit confusing, but it we separate this out (and again respect the non-commutativity) we get a few equalities we can use to expand. i^2 = -1 j^2 = -1 k^2 = -1 i*j = k j*k = i k*i = j j*i = -k k*j = -i i*k = -j In short Hamilton said that instead of stumping ourselves by not knowing a real number that is the resulting product of two imaginary numbers just set its product to another imaginary number and from there we can figure stuff out. Quaternion Operations (Add & Multiplication) We have quaternions in the following form: $$ q = w + xi + yj + zk $$ We can store that same information as an ordered pair by splitting up the real number part from the imaginary part. Thus the above becomes: $$ q = [w, xi + yj + zk] $$ If we treat i , j , and k as separate axes then we can store the second element of the ordered pair as a 3 dimensional vector, We can also write q as: $$ \\begin{align} & q = [w, \\vec{v}] \\end{align} $$ where $w$ is the scalar part and $\\vec{v} = (x, y, z)$ is the vector part. Let $$q_1 = [w_1, \\vec{v_1}] \\qquad q_2 = [w_2, \\vec{v_2}]$$ If we wanted to add or subtract two quaternions its quite straight forward. We just add/subtract each individual component. $$ \\begin{align} & q_1 + q_2 = [w_1 + w_2, \\vec{v_1} + \\vec{v_2}] \\ & q_1 - q_2 = [w_1 - w_2, \\vec{v_1} - \\vec{v_2}] \\ \\end{align} $$ Multiplication is not quite as simple as addition and subtraction. We can figure out how to do this calculation by applying the equalities Hamilton's equation. $$ \\begin{flalign } q_1 * q_2 &=[w\u2081, \\vec{v\u2081}] [w\u2082, \\vec{v\u2082}] &\\ &= (w_1 + x_1i + y_1j + z_1k)(w_2 + x_2i + y_2j + z_2k) & \\ & \\text{Expanding\u200b using the distributive property} \\ &= w_1w_2 + w_1(x_2i + y_2j + z_2k) \\ & \\quad + x_1w_2i + x_1x_2i^2 + x_1y_2ij + x_1z_2ik \\ & \\quad + y_1w_2j + y_1x_2ji + y_1y_2j^2 + y_1z_2jk \\ & \\quad + z_1w_2k + z_1x_2ki + z_1y_2kj + z_1z_2k^2 \\ &= w_1w_2 - x_1x_2 - y_1y_2 - z_1z_2 \\ & \\quad + w_1(x_2i + y_2j + z_2k) + w_2(x_1i + y_1j + z_1k) \\ & \\quad + x_1y_2k - x_1z_2j - y_1x_2k + y_1z_2i + z_1x_2j - z_1y_2i \\ &=[w\u2081w\u2082 - \\vec{v\u2081}\u00b7\\vec{v\u2082}, \\; w\u2081\\vec{v\u2082} + w\u2082\\vec{v\u2081} + \\vec{v\u2081}\u00d7\\vec{v\u2082}] \\end{flalign*} $$ Definitions Quaternion Conjugate and Inverse The conjugate of $q = [w, \\vec{v}]$ is $\\bar{q} = [w, -\\vec{v}]$. The norm (magnitude squared) is $||q||\u00b2 = ||q \\bar{q}|| = w\u00b2 + x\u00b2 + y\u00b2 + z\u00b2$. The inverse is $q\u207b\u00b9 = \\bar{q} / ||q||\u00b2$. We can use Multiplication form of the equation to find : $$ \\begin{flalign } q * \\bar{q} &= [w\u00b2 + (\\vec{v} . \\vec{v}), \\, w\\vec{v} - w\\vec{v} + (\\vec{v} \\times \\vec{v})] & \\ &= [w\u00b2 + (\\vec{v} . \\vec{v}), \\, (0, 0, 0)] & \\ &= [w\u00b2 + x\u00b2 + y\u00b2 + z\u00b2, \\, (0, 0, 0)] \\end{flalign } $$ $$ \\begin{flalign } q * q^{-1} &= (q * \\bar{q}) / ||q||\u00b2 & \\ &= [1, (0, 0, 0)] \\end{flalign } $$ Representing a 3D Vector A 3D vector $\\vec{p} = (p_x, p_y, p_z)$ is represented as a pure quaternion , which is a quaternion with a zero scalar part: $$p = 0 + p_xi + p_yj + p_zk = [0, \\vec{p}]$$ The Unit Rotation Quaternion For a rotation by angle \u03b8 around a unit vector axis $\\vec{u} = (u_x, u_y, u_z)$, the corresponding unit quaternion (||q|| = 1) is: $$q = [cos(\u03b8/2), sin(\u03b8/2) \\vec{u}] $$ Since ||q|| = 1, its inverse is simply its conjugate: $q\u207b\u00b9 = \\bar{q}$ Prove the validity of Quaternions Assume $\\vec{u}$ is a unit vector. Let $q = [w, \\vec{v}]$, where w = cos(\u03b8/2) , $\\vec{v} = sin(\u03b8/2) * \\vec{u}$ . Let $p = [0, \\vec{p}]$. The Rodrigues' Rotation Formula $$\\vec{p_{rot}} = \\vec{p}cos\u03b8 + (\\vec{u} \\times \\vec{p})sin\u03b8 + \\vec{u}(\\vec{u} \u22c5 \\vec{p})(1 - cos\u03b8)$$ gives the result $\\vec{p_{rot}}$ of rotating a vector $\\vec{p}$ around a unit vector axis $\\vec{u}$ by an angle \u03b8. The Quaternion Formula is: $$p' = q p \\bar{q}$$ If we can show that the vector part of $p'$ equals $\\vec{p_{rot}}$, we have proven the validity of quaternion rotation. Expanding the Quaternion Product Part A: Calculate $q p$ Using the general quaternion multiplication rule $$[w\u2081, \\vec{v\u2081}][w\u2082, \\vec{v\u2082}] = [w\u2081 w\u2082 - \\vec{v\u2081}\u00b7\\vec{v\u2082}, w\u2081 \\vec{v\u2082} + w\u2082 \\vec{v\u2081} + \\vec{v\u2081}\u00d7\\vec{v\u2082}]$$we get: $$ \\begin{align} q p & = [w, \\vec{v}] * [0, \\vec{p}] \\ & = [w 0 - \\vec{v} \u22c5 \\vec{p}, \\; w \\vec{p} + 0 \\vec{v} + \\vec{v} \\times \\vec{p}] \\ & = [-\\vec{v} \u22c5 \\vec{p}, \\; w\\vec{p} + \\vec{v} \u00d7 \\vec{p}] \\end{align} $$ Part B: Calculate $(q p) \\bar{q}$ Now we multiply the result from Part A by $\\bar{q} = [w, -\\vec{v}]$. Let $q p = [w', \\vec{v'}]$ where $w' = -\\vec{v} \u22c5 \\vec{p}$ and $\\vec{v'} = w\\vec{p} + \\vec{v} \u00d7 \\vec{p}$. $$ \\begin{align} p' &= [w', \\, \\vec{v'}] [w, \\, -\\vec{v}] \\ &= [w'w - \\vec{v'} \u22c5 -\\vec{v}), \\, w'\\vec{v} + w\\vec{v'} + \\vec{v'} \\times -\\vec{v}] \\ &= [w'w + \\vec{v'} \u22c5 \\vec{v}, \\, -w'\\vec{v} + w\\vec{v'} - \\vec{v'} \\times\\vec{v}] \\end{align} $$ The final result $p'$ should be a pure quaternion (representing the rotated vector). Let's prove its scalar part is zero. $$ \\begin{align} Scalar \\, part &=w'w + \\vec{v'} \u22c5 \\vec{v} \\ &= (-\\vec{v} \u22c5 \\vec{p})w + (w\\vec{p} + \\vec{v} \u00d7 \\vec{p}) \u22c5 \\vec{v} \\hspace{1cm} \\text{ Substitute w' and v' } \\ &= -w(\\vec{v} \u22c5 \\vec{p}) + w(\\vec{p} \u22c5 \\vec{v}) + (\\vec{v} \u00d7 \\vec{p}) \u22c5 \\vec{v} \\end{align} $$ The term$(\\vec{v} \u00d7 \\vec{p}) \u22c5 \\vec{v}$ is the dot product of a vector with the result of a cross product involving that same vector. The result of $\\vec{v} \u00d7 \\vec{p}$ is a vector orthogonal to $\\vec{v}$. The dot product of two orthogonal vectors is zero. So, $Scalar \\, part= -w(\\vec{v} \u22c5 \\vec{p}) + w(\\vec{p} \u22c5 \\vec{v}) + 0 = 0$. This confirms p' is a pure quaternion, as required. Now for the complex part. The vector part is: $-w'\\vec{v} + w\\vec{v'} - \\vec{v'} \\times\\vec{v}$. Substitute w', $\\vec{v'}$, w, and $\\vec{v}$: $-w'\\vec{v} = -(-\\vec{v} \u22c5 \\vec{p}) \\vec{v} = (\\vec{v} \u22c5 \\vec{p}) \\vec{v}$ $w\\vec{v'} = w(w\\vec{p} + \\vec{v} \u00d7 \\vec{p}) = w\u00b2\\vec{p} + w(\\vec{v} \u00d7 \\vec{p})$ $- \\vec{v'} \u00d7 \\vec{v} = -(w\\vec{p} + \\vec{v} \u00d7 \\vec{p}) \u00d7 \\vec{v} = -(w(\\vec{p} \u00d7 \\vec{v}) + (\\vec{v} \u00d7 \\vec{p}) \u00d7 \\vec{v})$ Using the vector triple product identity $(\\vec{a} \u00d7 \\vec{b}) \u00d7 \\vec{c} = (\\vec{a} \u22c5 \\vec{c})\\vec{b} - (\\vec{b} \u22c5 \\vec{c})\\vec{a}$: $(\\vec{v} \u00d7 \\vec{p}) \u00d7 \\vec{v} = (\\vec{v} \u22c5 \\vec{v}) \\vec{p} - (\\vec{p} \u22c5 \\vec{v}) \\vec{v} = ||\\vec{v}||\u00b2\\vec{p} - (\\vec{p} \u22c5 \\vec{v}) \\vec{v}$ So, $-(\\vec{v'} \u00d7 \\vec{v}) = -w(\\vec{p} \u00d7 \\vec{v}) - ||\\vec{v}||\u00b2\\vec{p} + (\\vec{p} \u22c5 \\vec{v}) \\vec{v}$ Since $\\vec{p} \u00d7 \\vec{v} = - \\vec{v} \u00d7 \\vec{p}$, this becomes $w(\\vec{v} \u00d7 \\vec{p}) - ||\\vec{v}||\u00b2\\vec{p} + (\\vec{p} \u22c5 \\vec{v}) \\vec{v}$ Now, let's add the three parts together: $$ \\begin{align} p'_{vec} = & (\\vec{v} \u22c5 \\vec{p})\\vec{v} \\qquad (from 1) \\ & + w\u00b2\\vec{p} + w(\\vec{v} \u00d7 \\vec{p}) \\qquad (from 2) \\ & + w(\\vec{v} \u00d7 \\vec{p}) - ||\\vec{v}||\u00b2\\vec{p} + (\\vec{p} \u22c5 \\vec{v}) \\vec{v} \\qquad (from 3) \\end{align} $$ Combine like terms: $$p'_{vec} = (w\u00b2 - ||\\vec{v}||\u00b2) \\vec{p} + 2w(\\vec{v} \u00d7 \\vec{p}) + 2(\\vec{v} \u22c5 \\vec{p}) \\vec{v}$$ Finally, substitute $w = cos(\u03b8/2)$ and $\\vec{v} = sin(\u03b8/2)\\vec{u}$: $w\u00b2 - ||\\vec{v}||\u00b2 = cos\u00b2(\u03b8/2) - sin\u00b2(\u03b8/2)||\\vec{u}||\u00b2 = cos\u00b2(\u03b8/2) - sin\u00b2(\u03b8/2) = cos\u03b8$ (Double angle identity) $2w(\\vec{v} \u00d7 \\vec{p}) = 2cos(\u03b8/2)(sin(\u03b8/2)\\vec{u} \u00d7 \\vec{p}) = 2cos(\u03b8/2)sin(\u03b8/2)(\\vec{u} \u00d7 \\vec{p}) = sin\u03b8(\\vec{u} \u00d7 \\vec{p})$ (Double angle identity) $2(\\vec{v} \u22c5 \\vec{p}) \\vec{v} = 2(sin(\u03b8/2)\\vec{u} \u22c5 \\vec{p}) (sin(\u03b8/2)\\vec{u}) = 2sin\u00b2(\u03b8/2)(\\vec{u} \u22c5 \\vec{p}) \\vec{u} = (1 - cos\u03b8)(\\vec{u} \u22c5 \\vec{p}) \\vec{u}$ (half-angle identity $2sin\u00b2(\u03b8/2) = 1 - cos\u03b8$) Substitute these back into the expression for $p' {vec}$: $$p' {vec} = cos\u03b8\\vec{p} + sin\u03b8(\\vec{u} \u00d7 \\vec{p}) + (1 - cos\u03b8)(\\vec{u} \u22c5 \\vec{p}) \\vec{u}$$ Rearranging to match the standard form of Rodrigues' formula: $$p'_{vec} = \\vec{p}cos\u03b8 + (\\vec{u} \u00d7 \\vec{p})sin\u03b8 + \\vec{u}(\\vec{u} \u22c5 \\vec{p})(1 - cos\u03b8)$$ This is identical to Rodrigues' Rotation Formula. We have mathematically proven that the quaternion operation $p' = q p \\bar{q}$ produces a new pure quaternion $p'$ whose vector part is precisely the result of rotating the original vector $\\vec{p}$ around the axis $\\vec{u}$ by the angle \u03b8.","title":"Quaternions"},{"location":"math/Quaternions/Quaternions/#crash-course-on-imaginarycomplex-numbers","text":"Before we can get into understanding quaternions we first need to understand the concept of imaginary and complex numbers. The names might seem daunting, but for our purposes the concepts are pretty straight forward. Imaginary numbers have a very simple purpose, to solve equations that real numbers couldn\u2019t! For example: $$x^2 + 25 = 0$$ There is no real number solution to this equation because any real number we take to the power of two will result in a positive number. So in order for the above equation to be true it must be that: $$x^2 = -25$$ This is what we call an imaginary number. They are special in the sense that they square to a real negative value. So far we have used $x$ as a variable, but usually when representing imaginary numbers we use what is called the imaginary unit i where $i^2 = -1$. That way we can represent any imaginary number as a product of a real number and i . For example: $$(5 i)^2 + 25 = 25 (i^2) + 25 = -25 + 25 = 0$$ You might notice that the imaginary unit has a pattern when taken to different powers: Power Pattern $i^0 = 1$ $i^1 = i$ $i^2 = -1$ $i^3 = -i$ $i^4 = 1$ $i^5 = i$ $i^6 = -1$ $i^7 = -i$ ... You'll note that this pattern also holds true for negative powers. Simply take notice that $i^{-1} = (1/i) * (i/i) = i/i^2 = i/-1 = -i$ and the rest of the negative powers become trivial to calculate. This pattern of 1, i, -1, -i may feel familiar to you. If we treat the real number part of the pattern as being on the x-axis and the imaginary parts as being on the y-axis then the pattern is essentially the same as x , y, -x, -y which is rotating 90 degrees counter-clockwise. Since these patterns share so much in common we can use a combination of imaginary and real numbers to represent numbers on a two dimensional grid. We call these complex numbers and we place them on the complex plane. Interestingly, if we multiply a complex number by i we're left with a resulting complex number that has been rotated 90 degrees counter-clockwise. $$ \\begin{align} & (2 + i) \\ & (2 + i) i = 2 i + i^2 = -1 + 2 i \\ & (2 + i) i^2 = (-1 + 2 i) i = -i + 2 i^2 = -2 - i \\ & (2 + i) i^3 = (-2 - i) i = -2 i - i^2 = 1 - 2 i \\ & (2 + i) i^4 = (1 - 2 i) i = i - 2*i^2 = 2 + i \\ \\end{align} $$ We can expand on this concept by instead multiplying with a complex number that gives us control of the angle we rotate by. We can trace a unit circle with $cos\u03b8 + sin\u03b8*i$ so if we multiply it by a complex number we get a general formula for rotating counter-clockwise by any angle, we call this a rotor. $$ \\begin{align} (w + xi) (cos\u03b8 + sin\u03b8 i) & = w cos\u03b8 + w sin\u03b8 i + x cos\u03b8 i + x sin\u03b8 i^2 \\ & = w cos\u03b8 - x sin\u03b8 + (w sin\u03b8 + x*cos\u03b8)i \\ \\end{align} $$ You might be somewhat familiar with this formula. It's just the 2D rotation matrix in complex number form!","title":"Crash course on imaginary/complex numbers"},{"location":"math/Quaternions/Quaternions/#the-quaternion-is-born","text":"Prior to quaternions most people saw the complex plane in 2D and simply figured if they wanted to add a third dimension they just had to add another imaginary number, say $j^2 = -1$. Quickly however they found this didn't quite work due to multiplication requiring us to know the product of two imaginary numbers. $$ \\begin{flalign } (w_1 + x_1 i + y_1 j)(w_2 + x_2 i + y_2 j) &= w_1 w_2 + w_1 x_2 i + w_1 y_2 j &\\ & \\quad + x_1 w_2 i + x_1 x_2 i^2 + x_1 y_2 ij \\ & \\quad + y_1 w_2 j + y_1 x_2 ji + y_1 y_2 j^2 \\ &= w_1 w_2 - x_1 x_2 - y_1 y_2 \\ & \\quad + (w_1 x_2 + x_1 w_2)i \\ & \\quad + (w_1 y_2 + y_1 w_2)j \\ & \\quad + x_1 y_2 ij + y_1 x_2 ji \\end{flalign } $$ Note: $ij$ and $ji$ are not commutative due to their imaginary nature. For quite sometime this problem didn't see much attention until an Irish mathematician named William Rowan Hamilton who figured the best way to solve it was to add a third imaginary number. Famously the condition he wrote was: $$ i^2 = j^2 = k^2 = i j k = -1 $$ This may seem a bit confusing, but it we separate this out (and again respect the non-commutativity) we get a few equalities we can use to expand. i^2 = -1 j^2 = -1 k^2 = -1 i*j = k j*k = i k*i = j j*i = -k k*j = -i i*k = -j In short Hamilton said that instead of stumping ourselves by not knowing a real number that is the resulting product of two imaginary numbers just set its product to another imaginary number and from there we can figure stuff out.","title":"The quaternion is born"},{"location":"math/Quaternions/Quaternions/#quaternion-operations-add-multiplication","text":"We have quaternions in the following form: $$ q = w + xi + yj + zk $$ We can store that same information as an ordered pair by splitting up the real number part from the imaginary part. Thus the above becomes: $$ q = [w, xi + yj + zk] $$ If we treat i , j , and k as separate axes then we can store the second element of the ordered pair as a 3 dimensional vector, We can also write q as: $$ \\begin{align} & q = [w, \\vec{v}] \\end{align} $$ where $w$ is the scalar part and $\\vec{v} = (x, y, z)$ is the vector part. Let $$q_1 = [w_1, \\vec{v_1}] \\qquad q_2 = [w_2, \\vec{v_2}]$$ If we wanted to add or subtract two quaternions its quite straight forward. We just add/subtract each individual component. $$ \\begin{align} & q_1 + q_2 = [w_1 + w_2, \\vec{v_1} + \\vec{v_2}] \\ & q_1 - q_2 = [w_1 - w_2, \\vec{v_1} - \\vec{v_2}] \\ \\end{align} $$ Multiplication is not quite as simple as addition and subtraction. We can figure out how to do this calculation by applying the equalities Hamilton's equation. $$ \\begin{flalign } q_1 * q_2 &=[w\u2081, \\vec{v\u2081}] [w\u2082, \\vec{v\u2082}] &\\ &= (w_1 + x_1i + y_1j + z_1k)(w_2 + x_2i + y_2j + z_2k) & \\ & \\text{Expanding\u200b using the distributive property} \\ &= w_1w_2 + w_1(x_2i + y_2j + z_2k) \\ & \\quad + x_1w_2i + x_1x_2i^2 + x_1y_2ij + x_1z_2ik \\ & \\quad + y_1w_2j + y_1x_2ji + y_1y_2j^2 + y_1z_2jk \\ & \\quad + z_1w_2k + z_1x_2ki + z_1y_2kj + z_1z_2k^2 \\ &= w_1w_2 - x_1x_2 - y_1y_2 - z_1z_2 \\ & \\quad + w_1(x_2i + y_2j + z_2k) + w_2(x_1i + y_1j + z_1k) \\ & \\quad + x_1y_2k - x_1z_2j - y_1x_2k + y_1z_2i + z_1x_2j - z_1y_2i \\ &=[w\u2081w\u2082 - \\vec{v\u2081}\u00b7\\vec{v\u2082}, \\; w\u2081\\vec{v\u2082} + w\u2082\\vec{v\u2081} + \\vec{v\u2081}\u00d7\\vec{v\u2082}] \\end{flalign*} $$","title":"Quaternion Operations (Add &amp; Multiplication)"},{"location":"math/Quaternions/Quaternions/#definitions","text":"","title":"Definitions"},{"location":"math/Quaternions/Quaternions/#quaternion-conjugate-and-inverse","text":"The conjugate of $q = [w, \\vec{v}]$ is $\\bar{q} = [w, -\\vec{v}]$. The norm (magnitude squared) is $||q||\u00b2 = ||q \\bar{q}|| = w\u00b2 + x\u00b2 + y\u00b2 + z\u00b2$. The inverse is $q\u207b\u00b9 = \\bar{q} / ||q||\u00b2$. We can use Multiplication form of the equation to find : $$ \\begin{flalign } q * \\bar{q} &= [w\u00b2 + (\\vec{v} . \\vec{v}), \\, w\\vec{v} - w\\vec{v} + (\\vec{v} \\times \\vec{v})] & \\ &= [w\u00b2 + (\\vec{v} . \\vec{v}), \\, (0, 0, 0)] & \\ &= [w\u00b2 + x\u00b2 + y\u00b2 + z\u00b2, \\, (0, 0, 0)] \\end{flalign } $$ $$ \\begin{flalign } q * q^{-1} &= (q * \\bar{q}) / ||q||\u00b2 & \\ &= [1, (0, 0, 0)] \\end{flalign } $$","title":"Quaternion Conjugate and Inverse"},{"location":"math/Quaternions/Quaternions/#representing-a-3d-vector","text":"A 3D vector $\\vec{p} = (p_x, p_y, p_z)$ is represented as a pure quaternion , which is a quaternion with a zero scalar part: $$p = 0 + p_xi + p_yj + p_zk = [0, \\vec{p}]$$","title":"Representing a 3D Vector"},{"location":"math/Quaternions/Quaternions/#the-unit-rotation-quaternion","text":"For a rotation by angle \u03b8 around a unit vector axis $\\vec{u} = (u_x, u_y, u_z)$, the corresponding unit quaternion (||q|| = 1) is: $$q = [cos(\u03b8/2), sin(\u03b8/2) \\vec{u}] $$ Since ||q|| = 1, its inverse is simply its conjugate: $q\u207b\u00b9 = \\bar{q}$","title":"The Unit Rotation Quaternion"},{"location":"math/Quaternions/Quaternions/#prove-the-validity-of-quaternions","text":"Assume $\\vec{u}$ is a unit vector. Let $q = [w, \\vec{v}]$, where w = cos(\u03b8/2) , $\\vec{v} = sin(\u03b8/2) * \\vec{u}$ . Let $p = [0, \\vec{p}]$. The Rodrigues' Rotation Formula $$\\vec{p_{rot}} = \\vec{p}cos\u03b8 + (\\vec{u} \\times \\vec{p})sin\u03b8 + \\vec{u}(\\vec{u} \u22c5 \\vec{p})(1 - cos\u03b8)$$ gives the result $\\vec{p_{rot}}$ of rotating a vector $\\vec{p}$ around a unit vector axis $\\vec{u}$ by an angle \u03b8. The Quaternion Formula is: $$p' = q p \\bar{q}$$ If we can show that the vector part of $p'$ equals $\\vec{p_{rot}}$, we have proven the validity of quaternion rotation.","title":"Prove the validity of Quaternions"},{"location":"math/Quaternions/Quaternions/#expanding-the-quaternion-product","text":"","title":"Expanding the Quaternion Product"},{"location":"math/Quaternions/Quaternions/#part-a-calculate-q-p","text":"Using the general quaternion multiplication rule $$[w\u2081, \\vec{v\u2081}][w\u2082, \\vec{v\u2082}] = [w\u2081 w\u2082 - \\vec{v\u2081}\u00b7\\vec{v\u2082}, w\u2081 \\vec{v\u2082} + w\u2082 \\vec{v\u2081} + \\vec{v\u2081}\u00d7\\vec{v\u2082}]$$we get: $$ \\begin{align} q p & = [w, \\vec{v}] * [0, \\vec{p}] \\ & = [w 0 - \\vec{v} \u22c5 \\vec{p}, \\; w \\vec{p} + 0 \\vec{v} + \\vec{v} \\times \\vec{p}] \\ & = [-\\vec{v} \u22c5 \\vec{p}, \\; w\\vec{p} + \\vec{v} \u00d7 \\vec{p}] \\end{align} $$","title":"Part A: Calculate $q p$"},{"location":"math/Quaternions/Quaternions/#part-b-calculate-q-p-barq","text":"Now we multiply the result from Part A by $\\bar{q} = [w, -\\vec{v}]$. Let $q p = [w', \\vec{v'}]$ where $w' = -\\vec{v} \u22c5 \\vec{p}$ and $\\vec{v'} = w\\vec{p} + \\vec{v} \u00d7 \\vec{p}$. $$ \\begin{align} p' &= [w', \\, \\vec{v'}] [w, \\, -\\vec{v}] \\ &= [w'w - \\vec{v'} \u22c5 -\\vec{v}), \\, w'\\vec{v} + w\\vec{v'} + \\vec{v'} \\times -\\vec{v}] \\ &= [w'w + \\vec{v'} \u22c5 \\vec{v}, \\, -w'\\vec{v} + w\\vec{v'} - \\vec{v'} \\times\\vec{v}] \\end{align} $$ The final result $p'$ should be a pure quaternion (representing the rotated vector). Let's prove its scalar part is zero. $$ \\begin{align} Scalar \\, part &=w'w + \\vec{v'} \u22c5 \\vec{v} \\ &= (-\\vec{v} \u22c5 \\vec{p})w + (w\\vec{p} + \\vec{v} \u00d7 \\vec{p}) \u22c5 \\vec{v} \\hspace{1cm} \\text{ Substitute w' and v' } \\ &= -w(\\vec{v} \u22c5 \\vec{p}) + w(\\vec{p} \u22c5 \\vec{v}) + (\\vec{v} \u00d7 \\vec{p}) \u22c5 \\vec{v} \\end{align} $$ The term$(\\vec{v} \u00d7 \\vec{p}) \u22c5 \\vec{v}$ is the dot product of a vector with the result of a cross product involving that same vector. The result of $\\vec{v} \u00d7 \\vec{p}$ is a vector orthogonal to $\\vec{v}$. The dot product of two orthogonal vectors is zero. So, $Scalar \\, part= -w(\\vec{v} \u22c5 \\vec{p}) + w(\\vec{p} \u22c5 \\vec{v}) + 0 = 0$. This confirms p' is a pure quaternion, as required. Now for the complex part. The vector part is: $-w'\\vec{v} + w\\vec{v'} - \\vec{v'} \\times\\vec{v}$. Substitute w', $\\vec{v'}$, w, and $\\vec{v}$: $-w'\\vec{v} = -(-\\vec{v} \u22c5 \\vec{p}) \\vec{v} = (\\vec{v} \u22c5 \\vec{p}) \\vec{v}$ $w\\vec{v'} = w(w\\vec{p} + \\vec{v} \u00d7 \\vec{p}) = w\u00b2\\vec{p} + w(\\vec{v} \u00d7 \\vec{p})$ $- \\vec{v'} \u00d7 \\vec{v} = -(w\\vec{p} + \\vec{v} \u00d7 \\vec{p}) \u00d7 \\vec{v} = -(w(\\vec{p} \u00d7 \\vec{v}) + (\\vec{v} \u00d7 \\vec{p}) \u00d7 \\vec{v})$ Using the vector triple product identity $(\\vec{a} \u00d7 \\vec{b}) \u00d7 \\vec{c} = (\\vec{a} \u22c5 \\vec{c})\\vec{b} - (\\vec{b} \u22c5 \\vec{c})\\vec{a}$: $(\\vec{v} \u00d7 \\vec{p}) \u00d7 \\vec{v} = (\\vec{v} \u22c5 \\vec{v}) \\vec{p} - (\\vec{p} \u22c5 \\vec{v}) \\vec{v} = ||\\vec{v}||\u00b2\\vec{p} - (\\vec{p} \u22c5 \\vec{v}) \\vec{v}$ So, $-(\\vec{v'} \u00d7 \\vec{v}) = -w(\\vec{p} \u00d7 \\vec{v}) - ||\\vec{v}||\u00b2\\vec{p} + (\\vec{p} \u22c5 \\vec{v}) \\vec{v}$ Since $\\vec{p} \u00d7 \\vec{v} = - \\vec{v} \u00d7 \\vec{p}$, this becomes $w(\\vec{v} \u00d7 \\vec{p}) - ||\\vec{v}||\u00b2\\vec{p} + (\\vec{p} \u22c5 \\vec{v}) \\vec{v}$ Now, let's add the three parts together: $$ \\begin{align} p'_{vec} = & (\\vec{v} \u22c5 \\vec{p})\\vec{v} \\qquad (from 1) \\ & + w\u00b2\\vec{p} + w(\\vec{v} \u00d7 \\vec{p}) \\qquad (from 2) \\ & + w(\\vec{v} \u00d7 \\vec{p}) - ||\\vec{v}||\u00b2\\vec{p} + (\\vec{p} \u22c5 \\vec{v}) \\vec{v} \\qquad (from 3) \\end{align} $$ Combine like terms: $$p'_{vec} = (w\u00b2 - ||\\vec{v}||\u00b2) \\vec{p} + 2w(\\vec{v} \u00d7 \\vec{p}) + 2(\\vec{v} \u22c5 \\vec{p}) \\vec{v}$$ Finally, substitute $w = cos(\u03b8/2)$ and $\\vec{v} = sin(\u03b8/2)\\vec{u}$: $w\u00b2 - ||\\vec{v}||\u00b2 = cos\u00b2(\u03b8/2) - sin\u00b2(\u03b8/2)||\\vec{u}||\u00b2 = cos\u00b2(\u03b8/2) - sin\u00b2(\u03b8/2) = cos\u03b8$ (Double angle identity) $2w(\\vec{v} \u00d7 \\vec{p}) = 2cos(\u03b8/2)(sin(\u03b8/2)\\vec{u} \u00d7 \\vec{p}) = 2cos(\u03b8/2)sin(\u03b8/2)(\\vec{u} \u00d7 \\vec{p}) = sin\u03b8(\\vec{u} \u00d7 \\vec{p})$ (Double angle identity) $2(\\vec{v} \u22c5 \\vec{p}) \\vec{v} = 2(sin(\u03b8/2)\\vec{u} \u22c5 \\vec{p}) (sin(\u03b8/2)\\vec{u}) = 2sin\u00b2(\u03b8/2)(\\vec{u} \u22c5 \\vec{p}) \\vec{u} = (1 - cos\u03b8)(\\vec{u} \u22c5 \\vec{p}) \\vec{u}$ (half-angle identity $2sin\u00b2(\u03b8/2) = 1 - cos\u03b8$) Substitute these back into the expression for $p' {vec}$: $$p' {vec} = cos\u03b8\\vec{p} + sin\u03b8(\\vec{u} \u00d7 \\vec{p}) + (1 - cos\u03b8)(\\vec{u} \u22c5 \\vec{p}) \\vec{u}$$ Rearranging to match the standard form of Rodrigues' formula: $$p'_{vec} = \\vec{p}cos\u03b8 + (\\vec{u} \u00d7 \\vec{p})sin\u03b8 + \\vec{u}(\\vec{u} \u22c5 \\vec{p})(1 - cos\u03b8)$$ This is identical to Rodrigues' Rotation Formula. We have mathematically proven that the quaternion operation $p' = q p \\bar{q}$ produces a new pure quaternion $p'$ whose vector part is precisely the result of rotating the original vector $\\vec{p}$ around the axis $\\vec{u}$ by the angle \u03b8.","title":"Part B: Calculate $(q p) \\bar{q}$"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/","text":"Rodrigues' rotation Having the ability to rotate vectors is a very useful tool to have in your repotoire. One of the easiest ways to do this is by using Rodrigues' rotation formula. In this article we are going to discuss how the formula is derived. Table of Contents Breaking up the formula Geometric proof Algebraic proof Rotating around a circle Putting it all together Matrix form 2D rotation matrix Euler angle rotations fromEulerAnglesXYZ fromEulerAnglesYXZ Breaking up the formula To start off let's look at what a Rodrigues' rotation actually looks like. By drawing a few extra parts we can see the formula is rotating the red vector around the blue vector much like the axle of a car. We can start by labeling the parts we just drew and then finding their values. In order to properly rotate we'll need two perpendicular vectors that trace the edge of the circle. We already have one of these in the form of r . To get the second one we will cross k and v to give us r* . You might be thinking that crossing k and v seems like an odd choice, after all we're trying to find a perpendicular vector with the same magnitude as r . To show that the magnitude of r* is the same as the magnitude of r we will compare to a more obvious cross product choice that we know would have the correct magnitude. Claim: Geometric proof If we look at a side view of our vectors and use basic trigonic intuition (SOHCAHTOA) we can see the angle between k and v scales the cross product magnitude to the same as k x r . Algebraic proof Alternatively we can plug the values in and simplify: Rotating around a circle Now that we have two perpendicular vectors we can talk about how to use them to rotate around a circle. Since cos\u03b8 and sin\u03b8 can be thought of as x and y components on a unit circle we can use them to scale the two perpendicular axes to find a point on the edge of the circle. Thus, to represent this new vector, r' , we can use the following equation: Putting it all together Finally, to get the end result we must add the r' vector to the d vector to give us our rotated v vector. This leaves us with the final equation and what you would find on wikipedia ! local function rodriguesRotation(v, k, t) k = k.unit; local cos, sin = math.cos(t), math.sin(t); return v*cos + (1-cos)*v:Dot(k)*k + k:Cross(v)*sin; end Matrix form In the previous section we had a equation that gave us a rotated vector. Occasionally we may find it useful to be able to preform this same rotation opperation, but with a matrix instead. To start off we must realize that we need a way to represent the dot product and the cross product as matrix multiplications. Now we can plug these into the original equation and factor out the vector we want to rotate, v . We'll note that we get a clear distinction between the rotation matrix R and v . Next we can show that: Remembering that since k is a unit vector it must be true that $kx^2 + ky^2 + kz^2 = 1$ which can then be rearranged and used to simplify. Using this revelation we can rewrite our R matrix. Now expand it: Again using the knowledge that $kx^2 + ky^2 + kz^2 = 1$ we can simplify which leaves us with the final form of the matrix. This rotation matrix is equivalent to the CFrame.fromAxisAngle constructor. local function rodriguesMatrix(k, t) -- we will use CFrame for this local kx, ky, kz = k.x, k.y, k.z local cos, sin = math.cos(t), math.sin(t); return CFrame.new(0, 0, 0, cos + (1-cos)*kx*kx, -sin*kz + (1-cos)*kx*ky, sin*ky + (1-cos)*kx*kz, sin*kz + (1-cos)*ky*kx, cos + (1-cos)*ky*ky, -sin*kx + (1-cos)*ky*kz, -sin*ky + (1-cos)*kz*kx, sin*kx + (1-cos)*kz*ky, cos + (1-cos)*kz*kz ); end -- now we can re-use the same rotation: local R = rodriguesMatrix(Vector3.new(0, 0, 1), math.pi/2); -- 90 degrees counter-clockwise around z-axis print(R * Vector3.new(1, 0, 0)); -- 0, 1, 0 print(R * Vector3.new(0, 1, 0)); -- -1, 0, 0 2D rotation matrix There are a number of ways to find the 2D rotation matrix, but since we have already done all the math for the matrix form we may as well use it to find out how to rotate a 2D vector. We know that since we're only rotating x and y components the axis of rotation is k = (0, 0, 1) . If we plug that into the matrix and simplify we're left with the following matrix: Of course all we need from this matrix to rotate a 2D vector is the square top left corner. This leaves us with our 2D rotation matrix. local function rotateV2(v, t) local cos, sin = math.cos(t), math.sin(t); local x = v.x*cos - v.y*sin; local y = v.x*sin + v.y*cos; return Vector2.new(x, y); end Euler angle rotations We can also use the matrix form of a Rodrigues' rotation to find out how euler angle rotations work. In the same way that we focused on rotation around the z-axis in the 2D rotation matrix section we can also write out the matrices that represent the x and y axes as well. fromEulerAnglesXYZ Multiplying the above matrices as Rx * Ry * Rz we get a rotation matrix that represents a rotation applied in Z, Y, X order (this is due to vectors post multiplying). This matrix is exactly what the CFrame.fromEulerAnglesXYZ and CFrame.Angles constructors use. local function fromEulerAnglesXYZ(rx, ry, rz) local cx, sx = math.cos(rx), math.sin(rx); local cy, sy = math.cos(ry), math.sin(ry); local cz, sz = math.cos(rz), math.sin(rz); return CFrame.new(0, 0, 0, cy*cz, -cy*sz, sy, sx*sy*cz+cx*sz, -sx*sy*sz+cx*cz, -sx*cy, -cx*sy*cz+sx*sz, cx*sy*sz+sx*cz, cx*cy ); end local function toEulerAnglesXYZ(cf) local x, y, z, m11, m12, m13, m21, m22, m23, m31, m32, m33 = cf:components(); local rx = math.atan2(-m23, m33) local ry = math.asin(m13); local rz = math.atan2(-m12, m11); return rx, ry, rz; end fromEulerAnglesYXZ Multiplying the above matrices as Ry * Rx * Rz we get a rotation matrix that represents a rotation applied in Z, X, Y order (this is due to vectors post multiplying). This matrix is exactly what the CFrame.fromEulerAnglesYXZ and CFrame.fromOrientation constructors use. local function fromEulerAnglesYXZ(rx, ry, rz) local cx, sx = math.cos(rx), math.sin(rx); local cy, sy = math.cos(ry), math.sin(ry); local cz, sz = math.cos(rz), math.sin(rz); return CFrame.new(0, 0, 0, cy*cz+sy*sx*sz, -cy*sz+sy*sx*cz, sy*cx, cx*sz, cx*cz, -sx, -sy*cz+cy*sx*sz, sy*sz+cy*sx*cz, cy*cx ); end local function toEulerAnglesYXZ(cf) local x, y, z, m11, m12, m13, m21, m22, m23, m31, m32, m33 = cf:components(); local rx = math.asin(-m23) local ry = math.atan2(m13, m33) local rz = math.atan2(m21, m22); return rx, ry, rz; end","title":"Rodrigues' rotation"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#rodrigues-rotation","text":"Having the ability to rotate vectors is a very useful tool to have in your repotoire. One of the easiest ways to do this is by using Rodrigues' rotation formula. In this article we are going to discuss how the formula is derived.","title":"Rodrigues' rotation"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#table-of-contents","text":"Breaking up the formula Geometric proof Algebraic proof Rotating around a circle Putting it all together Matrix form 2D rotation matrix Euler angle rotations fromEulerAnglesXYZ fromEulerAnglesYXZ","title":"Table of Contents"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#breaking-up-the-formula","text":"To start off let's look at what a Rodrigues' rotation actually looks like. By drawing a few extra parts we can see the formula is rotating the red vector around the blue vector much like the axle of a car. We can start by labeling the parts we just drew and then finding their values. In order to properly rotate we'll need two perpendicular vectors that trace the edge of the circle. We already have one of these in the form of r . To get the second one we will cross k and v to give us r* . You might be thinking that crossing k and v seems like an odd choice, after all we're trying to find a perpendicular vector with the same magnitude as r . To show that the magnitude of r* is the same as the magnitude of r we will compare to a more obvious cross product choice that we know would have the correct magnitude. Claim:","title":"Breaking up the formula"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#geometric-proof","text":"If we look at a side view of our vectors and use basic trigonic intuition (SOHCAHTOA) we can see the angle between k and v scales the cross product magnitude to the same as k x r .","title":"Geometric proof"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#algebraic-proof","text":"Alternatively we can plug the values in and simplify:","title":"Algebraic proof"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#rotating-around-a-circle","text":"Now that we have two perpendicular vectors we can talk about how to use them to rotate around a circle. Since cos\u03b8 and sin\u03b8 can be thought of as x and y components on a unit circle we can use them to scale the two perpendicular axes to find a point on the edge of the circle. Thus, to represent this new vector, r' , we can use the following equation:","title":"Rotating around a circle"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#putting-it-all-together","text":"Finally, to get the end result we must add the r' vector to the d vector to give us our rotated v vector. This leaves us with the final equation and what you would find on wikipedia ! local function rodriguesRotation(v, k, t) k = k.unit; local cos, sin = math.cos(t), math.sin(t); return v*cos + (1-cos)*v:Dot(k)*k + k:Cross(v)*sin; end","title":"Putting it all together"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#matrix-form","text":"In the previous section we had a equation that gave us a rotated vector. Occasionally we may find it useful to be able to preform this same rotation opperation, but with a matrix instead. To start off we must realize that we need a way to represent the dot product and the cross product as matrix multiplications. Now we can plug these into the original equation and factor out the vector we want to rotate, v . We'll note that we get a clear distinction between the rotation matrix R and v . Next we can show that: Remembering that since k is a unit vector it must be true that $kx^2 + ky^2 + kz^2 = 1$ which can then be rearranged and used to simplify. Using this revelation we can rewrite our R matrix. Now expand it: Again using the knowledge that $kx^2 + ky^2 + kz^2 = 1$ we can simplify which leaves us with the final form of the matrix. This rotation matrix is equivalent to the CFrame.fromAxisAngle constructor. local function rodriguesMatrix(k, t) -- we will use CFrame for this local kx, ky, kz = k.x, k.y, k.z local cos, sin = math.cos(t), math.sin(t); return CFrame.new(0, 0, 0, cos + (1-cos)*kx*kx, -sin*kz + (1-cos)*kx*ky, sin*ky + (1-cos)*kx*kz, sin*kz + (1-cos)*ky*kx, cos + (1-cos)*ky*ky, -sin*kx + (1-cos)*ky*kz, -sin*ky + (1-cos)*kz*kx, sin*kx + (1-cos)*kz*ky, cos + (1-cos)*kz*kz ); end -- now we can re-use the same rotation: local R = rodriguesMatrix(Vector3.new(0, 0, 1), math.pi/2); -- 90 degrees counter-clockwise around z-axis print(R * Vector3.new(1, 0, 0)); -- 0, 1, 0 print(R * Vector3.new(0, 1, 0)); -- -1, 0, 0","title":"Matrix form"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#2d-rotation-matrix","text":"There are a number of ways to find the 2D rotation matrix, but since we have already done all the math for the matrix form we may as well use it to find out how to rotate a 2D vector. We know that since we're only rotating x and y components the axis of rotation is k = (0, 0, 1) . If we plug that into the matrix and simplify we're left with the following matrix: Of course all we need from this matrix to rotate a 2D vector is the square top left corner. This leaves us with our 2D rotation matrix. local function rotateV2(v, t) local cos, sin = math.cos(t), math.sin(t); local x = v.x*cos - v.y*sin; local y = v.x*sin + v.y*cos; return Vector2.new(x, y); end","title":"2D rotation matrix"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#euler-angle-rotations","text":"We can also use the matrix form of a Rodrigues' rotation to find out how euler angle rotations work. In the same way that we focused on rotation around the z-axis in the 2D rotation matrix section we can also write out the matrices that represent the x and y axes as well.","title":"Euler angle rotations"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#fromeuleranglesxyz","text":"Multiplying the above matrices as Rx * Ry * Rz we get a rotation matrix that represents a rotation applied in Z, Y, X order (this is due to vectors post multiplying). This matrix is exactly what the CFrame.fromEulerAnglesXYZ and CFrame.Angles constructors use. local function fromEulerAnglesXYZ(rx, ry, rz) local cx, sx = math.cos(rx), math.sin(rx); local cy, sy = math.cos(ry), math.sin(ry); local cz, sz = math.cos(rz), math.sin(rz); return CFrame.new(0, 0, 0, cy*cz, -cy*sz, sy, sx*sy*cz+cx*sz, -sx*sy*sz+cx*cz, -sx*cy, -cx*sy*cz+sx*sz, cx*sy*sz+sx*cz, cx*cy ); end local function toEulerAnglesXYZ(cf) local x, y, z, m11, m12, m13, m21, m22, m23, m31, m32, m33 = cf:components(); local rx = math.atan2(-m23, m33) local ry = math.asin(m13); local rz = math.atan2(-m12, m11); return rx, ry, rz; end","title":"fromEulerAnglesXYZ"},{"location":"math/Rodrigues%27%20rotation/Rodrigues%27%20rotation/#fromeuleranglesyxz","text":"Multiplying the above matrices as Ry * Rx * Rz we get a rotation matrix that represents a rotation applied in Z, X, Y order (this is due to vectors post multiplying). This matrix is exactly what the CFrame.fromEulerAnglesYXZ and CFrame.fromOrientation constructors use. local function fromEulerAnglesYXZ(rx, ry, rz) local cx, sx = math.cos(rx), math.sin(rx); local cy, sy = math.cos(ry), math.sin(ry); local cz, sz = math.cos(rz), math.sin(rz); return CFrame.new(0, 0, 0, cy*cz+sy*sx*sz, -cy*sz+sy*sx*cz, sy*cx, cx*sz, cx*cz, -sx, -sy*cz+cy*sx*sz, sy*sz+cy*sx*cz, cy*cx ); end local function toEulerAnglesYXZ(cf) local x, y, z, m11, m12, m13, m21, m22, m23, m31, m32, m33 = cf:components(); local rx = math.asin(-m23) local ry = math.atan2(m13, m33) local rz = math.atan2(m21, m22); return rx, ry, rz; end","title":"fromEulerAnglesYXZ"},{"location":"network/collection/","text":"\u5c31\u662f\u8981\u4f60\u61c2\u7f51\u7edc\u2013\u4e00\u4e2a\u7f51\u7edc\u5305\u7684\u65c5\u7a0b","title":"Collection"},{"location":"network/dhcp/","text":"Dynamic Host Configuration Protocol (DHCP) DHCP \u662f\u8ba1\u7b97\u673a\u81ea\u52a8\u83b7\u53d6\u672c\u5730\u7f51\u7edc\u914d\u7f6e\u7684\u534f\u8bae\u3002 client\u548cDHCP server\u7684\u4ea4\u4e92\u6d41\u7a0b\u5982\u4e0b\uff0cclient \u53d1\u9001\u4e00\u4e2adiscover\u8bf7\u6c42\u7ed9server\u8981\u6c42server\u5206\u914d\u4e00\u4e2a\u7f51\u7edcIP configuration\uff08\u5305\u62ecIP\u5730\u5740,\u5b50\u7f51\u63a9\u7801\uff0cDNS\uff0cgateway\uff09\uff0cserver \u627e\u5230\u4e00\u4e2a\u7a7a\u95f2IP,\u4f5c\u4e3a\u4e00\u4e2aoffer\u53d1\u9001\u7ed9client\u3002 \u5982\u679c\u6709\u591a\u4e2aDHCP server\u4e0a\u8ff0\u8fc7\u7a0b\u4e2dclient\u4f1a\u6536\u5230\u591a\u4e2aoffer\u3002Client\u4ece\u6536\u5230\u7684offer\u9009\u62e9\u4e00\u4e2a\u5e76\u53d1\u4e00\u4e2arequest\u5411server\u786e\u8ba4\uff0cserver\u56de\u590d\u4e00\u4e2aAck ,client\u63a5\u53d7\u7684ACK\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u7533\u8bf7\u5230\u7684IP\u6709\u4e00\u4e2a\u79df\u8d41\u671f\uff0c\u5728\u79df\u8d41\u671f\u7ed3\u675f\u4e4b\u524dclient\u4f1a\u518d\u6b21\u53d1\u9001request\u7ed9server\u8fdb\u884c\u7eed\u79df\u3002client\u5728\u9000\u51fa\u7f51\u7edc\u7684\u65f6\u5019\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2arelease\uff0cserver\u6536\u5230release\u540e\u91ca\u653eIP\u8d44\u6e90\u3002\u5982\u679c\u8fc7\u671f\u6ca1\u7eed\u79df\u7684server\u4e5f\u4f1a\u91ca\u653e\u8d44\u6e90\u3002 DHCP\u4e0b\u9762\u4e00\u5c42\u7528\u7684\u662fUDP\u534f\u8bae\uff0cserver\u7684\u7aef\u53e3\u662f67,client\u7684\u7aef\u53e3\u662f68\u3002\u5728\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u5728client\u83b7\u5f97\u7f51\u7edc\u914d\u7f6e\u4e4b\u524d\uff0cclient\u6ca1\u6709\u81ea\u5df1\u7684IP\uff08\u6b64\u65f6\u5b83\u7684ip\u662f0.0.0.0\uff09\u4e5f\u4e0d\u77e5\u5230DHCP server\u7684\u5730\u5740\uff0c\u56e0\u6b64client\u662f\u53d1\u9001\u5230255.255.255.255\u8fd9\u4e2a\u5730\u5740\u4e0a\uff0c\u4e5f\u5c31\u662f\u5e7f\u64ad\uff08broadcat\uff09\u5230\u7f51\u7edc\u4e2d\u3002","title":"DHCP"},{"location":"network/dhcp/#dynamic-host-configuration-protocol-dhcp","text":"DHCP \u662f\u8ba1\u7b97\u673a\u81ea\u52a8\u83b7\u53d6\u672c\u5730\u7f51\u7edc\u914d\u7f6e\u7684\u534f\u8bae\u3002 client\u548cDHCP server\u7684\u4ea4\u4e92\u6d41\u7a0b\u5982\u4e0b\uff0cclient \u53d1\u9001\u4e00\u4e2adiscover\u8bf7\u6c42\u7ed9server\u8981\u6c42server\u5206\u914d\u4e00\u4e2a\u7f51\u7edcIP configuration\uff08\u5305\u62ecIP\u5730\u5740,\u5b50\u7f51\u63a9\u7801\uff0cDNS\uff0cgateway\uff09\uff0cserver \u627e\u5230\u4e00\u4e2a\u7a7a\u95f2IP,\u4f5c\u4e3a\u4e00\u4e2aoffer\u53d1\u9001\u7ed9client\u3002 \u5982\u679c\u6709\u591a\u4e2aDHCP server\u4e0a\u8ff0\u8fc7\u7a0b\u4e2dclient\u4f1a\u6536\u5230\u591a\u4e2aoffer\u3002Client\u4ece\u6536\u5230\u7684offer\u9009\u62e9\u4e00\u4e2a\u5e76\u53d1\u4e00\u4e2arequest\u5411server\u786e\u8ba4\uff0cserver\u56de\u590d\u4e00\u4e2aAck ,client\u63a5\u53d7\u7684ACK\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u7ed3\u675f\u4e86\u3002\u7533\u8bf7\u5230\u7684IP\u6709\u4e00\u4e2a\u79df\u8d41\u671f\uff0c\u5728\u79df\u8d41\u671f\u7ed3\u675f\u4e4b\u524dclient\u4f1a\u518d\u6b21\u53d1\u9001request\u7ed9server\u8fdb\u884c\u7eed\u79df\u3002client\u5728\u9000\u51fa\u7f51\u7edc\u7684\u65f6\u5019\u4f1a\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2arelease\uff0cserver\u6536\u5230release\u540e\u91ca\u653eIP\u8d44\u6e90\u3002\u5982\u679c\u8fc7\u671f\u6ca1\u7eed\u79df\u7684server\u4e5f\u4f1a\u91ca\u653e\u8d44\u6e90\u3002 DHCP\u4e0b\u9762\u4e00\u5c42\u7528\u7684\u662fUDP\u534f\u8bae\uff0cserver\u7684\u7aef\u53e3\u662f67,client\u7684\u7aef\u53e3\u662f68\u3002\u5728\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u5728client\u83b7\u5f97\u7f51\u7edc\u914d\u7f6e\u4e4b\u524d\uff0cclient\u6ca1\u6709\u81ea\u5df1\u7684IP\uff08\u6b64\u65f6\u5b83\u7684ip\u662f0.0.0.0\uff09\u4e5f\u4e0d\u77e5\u5230DHCP server\u7684\u5730\u5740\uff0c\u56e0\u6b64client\u662f\u53d1\u9001\u5230255.255.255.255\u8fd9\u4e2a\u5730\u5740\u4e0a\uff0c\u4e5f\u5c31\u662f\u5e7f\u64ad\uff08broadcat\uff09\u5230\u7f51\u7edc\u4e2d\u3002","title":"Dynamic Host Configuration Protocol (DHCP)"},{"location":"network/dns/","text":"Domain Name System(DNS) \u4e00\u4e2ahttp\u7684url\u901a\u5e38\u5305\u542b\u4e0b\u56fe\u6240\u793a\u7684\u4e09\u90e8\u5206\uff0c\u5176\u4e2dhttp\u90e8\u5206\u662f\u8868\u793a\u534f\u8bae\u7c7b\u578b\u662fhttp,http\u7684\u7ea6\u5b9a\u7aef\u53e3\u662f80,host\u90e8\u5206\u4e5f\u5c31\u662f\u57df\u540d\uff0c\u57df\u540d\u662f\u65b9\u4fbf\u4eba\u7c7b\u9605\u8bfb\u7684\u800c\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u8bbf\u95ee\u9700\u8981\u7684\u662fip\u5730\u5740\uff0c\u5b9e\u9645\u4e0a\u57df\u540d\u5bf9\u5e94\u4e00\u4e2aip\u5730\u5740\uff0cDNS\u7684\u4f5c\u7528\u5c31\u662f\u627e\u5230\u8fd9\u4e2a\u57df\u540d\u6240\u6620\u5c04\u7684ip\u5730\u5740\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u6839\u636eIP\u627e\u5230\u5bf9\u5e94\u7684\u57df\u540d\u3002 DNS domain name space\u7684\u5c42\u7ea7(hierarchic)\u7ed3\u6784\u5982\u4e0b\uff0c\u6700\u9876\u5c42\u7684\u6839\u670d\u52a1\u5668\uff0c\u6839\u670d\u52a1\u5668\u8bb0\u5f55\u4e86\u5b83\u7684\u4e0b\u4e00\u5c42\"Top level domain\uff08TLD\uff09\"\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u5982edu, com. org ....\u3002TLD\u670d\u52a1\u5668\u8bb0\u5f55\u4e86\u5b83\u7684\u7684\u4e0b\u4e00\u5c42\"domain name\"\u670d\u52a1\u5668\u7684\u5730\u5740\uff0cdomain name\u670d\u52a1\u5668\u53c8\u8bb0\u5f55\u4e86\u5b83\u7684\u4e0b\u4e00\u5c42\u201csub domain name\u201d\u670d\u52a1\u5668\u7684\u5730\u5740\u3002\u4e00\u4e2a\u57df\u540d\u5730\u5740\u7684\u5f62\u5f0f\u4e0e\u8fd9\u4e2a\u5c42\u7ea7\u7ed3\u6784\u662f\u5bf9\u5e94\u7684\uff0c\u4f8b\u5982\"www.stanfrod.edu\" \u4ee5\u201c.\u201d\u5206\u5272\u4ece\u53f3\u5f80\u5de6\u5c42\u7ea7\u4f9d\u6b21\u9012\u51cf\u3002 dns\u7684\u901a\u4fe1\u4e3b\u8981\u662f\u4ee5UDP\u7684\u65b9\u5f0f\uff0c\u7aef\u53e3\u662f53\u3002\u4ee5\"www.stanford.edu\" \u8fd9\u4e2a\u57df\u540d\u4e3a\u4f8b\u7b80\u5355\u9610\u8ff0\u4e00\u4e0bdns\u83b7\u53d6\u57df\u540dIP\u7684\u8fc7\u7a0b\u3002\u5ba2\u6237\u7aef\u5411dns resolver\u53d1\u9001\u4e00\u4e2a\u67e5\u8be2\u8bf7\u6c42\"what is the ip address of www.stanford.edu?\" , resolver \u5148\u5411\u6839\u670d\u52a1\u5668\u67e5\u8be2\u9876\u5c42\u57df\u540d\u5373edu\uff0c\"who should I ask about edu?\", \u6839\u670d\u52a1\u5668\u56de\u5e94\u201chere's some information for who you should ask about edu.\u201d\u3002\u73b0\u5728resolver\u77e5\u9053\u4e86edu\u6240\u5728\u7684\u670d\u52a1\u5668\u7684ip\u5730\u5740\uff0c\u540c\u65f6\u628a\u5b83\u653e\u5230\u7f13\u5b58\u91cc\uff0c\u7136\u540e\u5411edu\u53d1\u9001\u63d0\u95ee\"who should I ask about stanford?\", edu\u56de\u590d\u201chere's some information about who you should ask about stanford.\u201d\uff0c resolver\u6536\u5230\u540e\u540c\u6837\u8981\u7f13\u5b58\u8fd9\u6761\u4fe1\u606f\uff0c\u77e5\u9053\u4e86stanford\u7684IP\u5730\u5740\uff0cresolver\u63a5\u7740\u5411stanford\u670d\u52a1\u5668\u63d0\u95ee\u201cwhat's the address of www\u201d, stanford \u56de\u7b54\"here's the adree of www.stanford.edu'', resolver \u6536\u5230\u540e\u540c\u6837\u8981\u7f13\u5b58\u8fd9\u6761\u4fe1\u606f\u4e0b\u4e00\u6b21\u8bf7\u6c42\u76f8\u540c\u7684\u5730\u5740\u7684\u65f6\u5019\u4e0d\u9700\u8981\u518d\u5411\u670d\u52a1\u5668\u67e5\u8be2\uff0cresolver\u83b7\u5f97\u4e86www.stanford.edu\u6240\u5bf9\u5e94\u7684IP\u5730\u5740\u5e76\u628a\u8fd9\u4e2a\u4fe1\u606f\u544a\u77e5client, \u5b8c\u6210\u89e3\u6790\u8fc7\u7a0b\u3002\u5728\u4e0a\u8ff0\u7684\u67e5\u8be2\u8fc7\u7a0b\u4e2d\uff0cclient\u5411resolver\u53d1\u9001\u7684recursive\u67e5\u8be2\uff0cresolver\u5411\u5176\u4ed6\u670d\u52a1\u5668\u53d1\u9001\u7684non-recursive\u67e5\u8be2\u3002\u56e0\u4e3aresolver\u662f\u6309\u57df\u540d\u7684\u5c42\u7ea7\u4e00\u4e2a\u4e00\u4e2a\u53d1\u9001\u8bf7\u6c42\u5b8c\u5168\u89e3\u6790\u5b8c\u6210\u540e\u518d\u8fd4\u56de\u7ed9client\u3002\u800c\u5176\u4ed6\u670d\u52a1\u5668\u4e0eresolver\u4e4b\u95f4\u662f\u53ea\u505a\u4e00\u4e2a\u5c42\u7ea7\u7684\u89e3\u6790\u3002","title":"DNS"},{"location":"network/dns/#domain-name-systemdns","text":"\u4e00\u4e2ahttp\u7684url\u901a\u5e38\u5305\u542b\u4e0b\u56fe\u6240\u793a\u7684\u4e09\u90e8\u5206\uff0c\u5176\u4e2dhttp\u90e8\u5206\u662f\u8868\u793a\u534f\u8bae\u7c7b\u578b\u662fhttp,http\u7684\u7ea6\u5b9a\u7aef\u53e3\u662f80,host\u90e8\u5206\u4e5f\u5c31\u662f\u57df\u540d\uff0c\u57df\u540d\u662f\u65b9\u4fbf\u4eba\u7c7b\u9605\u8bfb\u7684\u800c\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u8bbf\u95ee\u9700\u8981\u7684\u662fip\u5730\u5740\uff0c\u5b9e\u9645\u4e0a\u57df\u540d\u5bf9\u5e94\u4e00\u4e2aip\u5730\u5740\uff0cDNS\u7684\u4f5c\u7528\u5c31\u662f\u627e\u5230\u8fd9\u4e2a\u57df\u540d\u6240\u6620\u5c04\u7684ip\u5730\u5740\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u6839\u636eIP\u627e\u5230\u5bf9\u5e94\u7684\u57df\u540d\u3002 DNS domain name space\u7684\u5c42\u7ea7(hierarchic)\u7ed3\u6784\u5982\u4e0b\uff0c\u6700\u9876\u5c42\u7684\u6839\u670d\u52a1\u5668\uff0c\u6839\u670d\u52a1\u5668\u8bb0\u5f55\u4e86\u5b83\u7684\u4e0b\u4e00\u5c42\"Top level domain\uff08TLD\uff09\"\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u5982edu, com. org ....\u3002TLD\u670d\u52a1\u5668\u8bb0\u5f55\u4e86\u5b83\u7684\u7684\u4e0b\u4e00\u5c42\"domain name\"\u670d\u52a1\u5668\u7684\u5730\u5740\uff0cdomain name\u670d\u52a1\u5668\u53c8\u8bb0\u5f55\u4e86\u5b83\u7684\u4e0b\u4e00\u5c42\u201csub domain name\u201d\u670d\u52a1\u5668\u7684\u5730\u5740\u3002\u4e00\u4e2a\u57df\u540d\u5730\u5740\u7684\u5f62\u5f0f\u4e0e\u8fd9\u4e2a\u5c42\u7ea7\u7ed3\u6784\u662f\u5bf9\u5e94\u7684\uff0c\u4f8b\u5982\"www.stanfrod.edu\" \u4ee5\u201c.\u201d\u5206\u5272\u4ece\u53f3\u5f80\u5de6\u5c42\u7ea7\u4f9d\u6b21\u9012\u51cf\u3002 dns\u7684\u901a\u4fe1\u4e3b\u8981\u662f\u4ee5UDP\u7684\u65b9\u5f0f\uff0c\u7aef\u53e3\u662f53\u3002\u4ee5\"www.stanford.edu\" \u8fd9\u4e2a\u57df\u540d\u4e3a\u4f8b\u7b80\u5355\u9610\u8ff0\u4e00\u4e0bdns\u83b7\u53d6\u57df\u540dIP\u7684\u8fc7\u7a0b\u3002\u5ba2\u6237\u7aef\u5411dns resolver\u53d1\u9001\u4e00\u4e2a\u67e5\u8be2\u8bf7\u6c42\"what is the ip address of www.stanford.edu?\" , resolver \u5148\u5411\u6839\u670d\u52a1\u5668\u67e5\u8be2\u9876\u5c42\u57df\u540d\u5373edu\uff0c\"who should I ask about edu?\", \u6839\u670d\u52a1\u5668\u56de\u5e94\u201chere's some information for who you should ask about edu.\u201d\u3002\u73b0\u5728resolver\u77e5\u9053\u4e86edu\u6240\u5728\u7684\u670d\u52a1\u5668\u7684ip\u5730\u5740\uff0c\u540c\u65f6\u628a\u5b83\u653e\u5230\u7f13\u5b58\u91cc\uff0c\u7136\u540e\u5411edu\u53d1\u9001\u63d0\u95ee\"who should I ask about stanford?\", edu\u56de\u590d\u201chere's some information about who you should ask about stanford.\u201d\uff0c resolver\u6536\u5230\u540e\u540c\u6837\u8981\u7f13\u5b58\u8fd9\u6761\u4fe1\u606f\uff0c\u77e5\u9053\u4e86stanford\u7684IP\u5730\u5740\uff0cresolver\u63a5\u7740\u5411stanford\u670d\u52a1\u5668\u63d0\u95ee\u201cwhat's the address of www\u201d, stanford \u56de\u7b54\"here's the adree of www.stanford.edu'', resolver \u6536\u5230\u540e\u540c\u6837\u8981\u7f13\u5b58\u8fd9\u6761\u4fe1\u606f\u4e0b\u4e00\u6b21\u8bf7\u6c42\u76f8\u540c\u7684\u5730\u5740\u7684\u65f6\u5019\u4e0d\u9700\u8981\u518d\u5411\u670d\u52a1\u5668\u67e5\u8be2\uff0cresolver\u83b7\u5f97\u4e86www.stanford.edu\u6240\u5bf9\u5e94\u7684IP\u5730\u5740\u5e76\u628a\u8fd9\u4e2a\u4fe1\u606f\u544a\u77e5client, \u5b8c\u6210\u89e3\u6790\u8fc7\u7a0b\u3002\u5728\u4e0a\u8ff0\u7684\u67e5\u8be2\u8fc7\u7a0b\u4e2d\uff0cclient\u5411resolver\u53d1\u9001\u7684recursive\u67e5\u8be2\uff0cresolver\u5411\u5176\u4ed6\u670d\u52a1\u5668\u53d1\u9001\u7684non-recursive\u67e5\u8be2\u3002\u56e0\u4e3aresolver\u662f\u6309\u57df\u540d\u7684\u5c42\u7ea7\u4e00\u4e2a\u4e00\u4e2a\u53d1\u9001\u8bf7\u6c42\u5b8c\u5168\u89e3\u6790\u5b8c\u6210\u540e\u518d\u8fd4\u56de\u7ed9client\u3002\u800c\u5176\u4ed6\u670d\u52a1\u5668\u4e0eresolver\u4e4b\u95f4\u662f\u53ea\u505a\u4e00\u4e2a\u5c42\u7ea7\u7684\u89e3\u6790\u3002","title":"Domain Name System(DNS)"},{"location":"network/icmp/","text":"ICMP\uff08Internet control message protocol\uff09 ICMP\u662f\u5728\u7f51\u7edc\u5c42\u4e4b\u4e0a\u7684\u534f\u8bae\uff0c\u6240\u4ee5\u5e94\u8be5\u7b97\u662f\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u867d\u7136ICMP\u662f\u5728\u7f51\u7edc\u5c42\u7528\u6765\u62a5\u544a\u9519\u8bef\u548c\u8bca\u65ad\u95ee\u9898\u7684\u3002 \u62a5\u544a\u9519\u8bef\uff08reporting errors\uff09 ICMP \u7684\u4e3b\u8981\u76ee\u7684\u662f\u62a5\u544a\u9519\u8bef\u3002\u4f8b\u5982\u7aef\u70b9A\u53d1\u9001\u4e00\u4e2ahttp\u8bf7\u6c42\u7ed9\u7aef\u70b9B\uff0c\u5728\u8bf7\u6c42\u5305\u7ecf\u8fc7A\u548cB\u4e4b\u95f4\u7684\u67d0\u4e2a\u8def\u7531\u5668\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8def\u7531\u8868\u91cc\u627e\u4e0d\u5230\u5bf9\u5e94\u5230B\u7684\u5730\u5740\uff0c \u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2aICMP\u9519\u8bef\u6d88\u606f\u5305\u3002\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u7684\u7c7b\u578b\u662f \u201cdestination network unreachable\u201d \u6240\u4ee5\u5b83\u7684type\u662f3\uff0ccode\u662f0\u3002\u5b83\u4eec\u4f1a\u88ab\u653e\u5230ICMP\u7684\u6d88\u606f\u5934\u91cc\u9762\uff0c\u53e6\u5916ICMP\u8fd8\u5305\u542b\u4e86\u53d1\u751f\u9519\u8bef\u7684\u539f\u5305\u7684ip header, \u4ee5\u53caip data\u7684\u524d8\u4e2a\u5b57\u8282\u3002\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u5305\u4f1a\u88ab\u5305\u5728\u4e00\u4e2a\u65b0\u7684IP\u5305\u91cc\uff0c\u65b0IP\u5305\u7684source\u662f\u8be5\u8def\u7531\u5668\u7684\u5730\u5740\uff0cdestnation\u662f\u7aef\u70b9A\u7684\u5730\u5740\uff0c\u8be5\u5305\u88ab\u8def\u7531\u5668\u53d1\u9001\u56de\u7aef\u70b9A\uff0c\u7aef\u70b9A\u7531\u6b64\u77e5\u9053\u6d88\u606f\u53d1\u9001\u5931\u8d25\u3002 ICMP\u6d88\u606f\u7684\u683c\u5f0f\u5982\u4e0b\uff1a 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Code | Checksum | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | unused | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Internet Header + 64 bits of Original Data Datagram | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ICMP \u5e38\u7528\u7684\u6d88\u606f\u7c7b\u578b\u5982\u4e0b\uff1a ICMP type ICMP code Description 0 0 echo reply (to ping) 3 0 destination network unreachable 3 1 destination host unreachable 3 2 destination protocol unreachable 3 3 destination port unreachable 3 6 destination network unknown 3 7 destination host unknown 4 0 source quench (congestion control) 8 0 echo request 9 0 router advertisement 10 0 router discovery 11 0 TTL expired 12 0 IP header bad \u7f51\u7edc\u8bca\u65ad\uff08diagnostic\uff09 ICMP \u534f\u8bae\u7684\u7b2c\u4e8c\u4e2a\u7528\u9014\u662f\u6267\u884c\u7f51\u7edc\u8bca\u65ad\u3002\u5e38\u7528\u7684\u7ec8\u7aef\u5b9e\u7528\u7a0b\u5e8f traceroute \u548c ping \u90fd\u4f7f\u7528 ICMP \u534f\u8bae\u3002 ping \u7f51\u7edcping\u5de5\u5177\u4f7f\u7528\u4e86ICMP\u534f\u8bae\uff0c\u53d1\u8d77ping \u7684\u4e00\u7aef\u7684ICMP\u6d88\u606f\u7c7b\u578b\u662f\u201cecho request\u201d\uff0c\u56e0\u6b64\u8be5ICMP\u5305\u7684type=8, code=0\uff0c\u8be5ICMP\u5305\u4f1a\u88ab\u5305\u5728ip\u5305\u4e2d\u53d1\u9001\u7ed9\u88abping\u7684\u4e00\u7aef\u3002\u88abping\u7684\u4e00\u7aef\u8fd4\u56de\u7684ICMP\u6d88\u606f\u7c7b\u578b\u662f\u201cecho reply \u201d\uff0c\u56e0\u6b64\u8be5ICMP\u5305\u7684type=0, code=0\uff0c\u8be5ICMP\u5305\u4e5f\u4f1a\u88ab\u5305\u5728ip\u5305\u4e2d\u56de\u9988\u7ed9\u53d1\u9001\u7aef\u3002 traceroute traceroute \u662f\u4e00\u4e2a\u7528\u6765\u63a2\u6d4b\u6d88\u606f\u5305\u6240\u901a\u8fc7\u7684\u7f51\u7edc\u8def\u5f84\u5373\u8be5\u8def\u5f84\u4e0a\u6240\u7ecf\u8fc7\u7684\u8def\u7531\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u201ctraceroute baidu.com\u201d \u6765\u5c1d\u8bd5\u8fd9\u4e2a\u5e94\u7528\u3002traceroute\u4e0d\u4f46\u4f1a\u544a\u8bc9\u4f60\u5305\u6240\u7ecf\u8fc7\u7684\u8def\u7531\uff0c\u8fd8\u4f1a\u544a\u8bc9\u4f60\u6240\u5230\u8fbe\u7684\u6bcf\u4e2a\u8def\u7531\u6240\u9700\u8981\u7684round-trip time\u3002traceroute\u7684\u76ee\u7684\u5c31\u662f\u8981\u627e\u7684\u4ece\u6e90\u7aef\u5230\u76ee\u7684\u7aef\u6240\u7ecf\u8fc7\u7684\u8def\u7531\uff0c\u5e76\u786e\u8ba4\u5230\u8fbe\u6bcf\u4e2a\u8def\u7531\u6240\u9700\u8981\u7684round-trip time\u3002traceroute\u901a\u8fc7\u5411\u76ee\u7684\u7aef\u53d1\u9001\u4e00\u4e2aUDP\u5305\uff0c\u8be5\u5305\u53ef\u4ee5\u662f\u4efb\u4f55\u5185\u5bb9\uff0c\u628a\u8fd9\u4e2a\u5305\u5305\u88f9\u5728\u4e00\u4e2aIP\u5305\u4e2d\uff0cIP\u5305header\u4e2d\u7684TTL\u662f1\uff0c\u5f53\u8fd9\u4e2aIP\u5305\u5230\u8fbe\u7b2c\u4e00\u4e2a\u8def\u7531\u65f6TTL\u51cf1\u53d8\u4e3a0,\u8fd9\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u201cTTL expired\u201d\u4e8b\u4ef6\uff0c\u5bfc\u81f4\u8fd9\u4e2a\u5305\u4f1a\u88ab\u4e22\u5f03\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2aICMP\u9519\u8bef\u6d88\u606f\u5305\uff0c\u8be5\u6d88\u606f\u5305\u7684\u7c7b\u578b\u662f\"TTL expired\"\uff0c\u56e0\u6b64ICMP\u5305header\u7684type=1,code=0\u3002\u8be5\u5305\u88ab\u5305\u88f9\u5728IP\u5305\u4e2d\u53d1\u9001\u56de\u6e90\u7aef\u3002\u6e90\u7aef\u901a\u8fc7\u89e3\u6790IP header\u7684source\u5f97\u5230\u8def\u7531\u5730\u5740\uff0c\u5e76\u901a\u8fc7\u8ba1\u7b97\u5f00\u59cb\u4e0e\u7ed3\u675f\u65f6\u95f4\u7684\u5dee\u503c\u5f97\u5230round-trip time\u3002\u5b8c\u6210\u7b2c\u4e00\u4e2a\u8def\u7531\u7684\u63a2\u6d4b\u540etraceroute\u4f1a\u63a5\u7740\u53d1\u9001\u4e0b\u4e00\u4e2a\u5305\uff0c\u65b0\u5305\u7684TTL\u662f2, \u90a3\u4e48\u8fd9\u4e2a\u5305\u4f1a\u5728\u5230\u8fbe\u7b2c\u4e8c\u4e2a\u8def\u7531\u7684\u65f6\u5019TTL\u51cf\u4e3a0,\u4ea7\u751f\u201cTTL expired\u201d\u4e8b\u4ef6\uff0c\u8fd9\u6837\u5c31\u83b7\u5f97\u4e86\u7b2c\u4e8c\u4e2a\u8def\u7531\u7684\u5730\u5740\u548c\u5230\u8fbe\u8be5\u8def\u7531\u6240\u9700\u8981\u7684round-trip time\u3002\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u53d1\u9001\u65b0\u5305\u7684TTL\u6bd4\u4e0a\u6b21\u59271,\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5305\u5230\u8fbe\u76ee\u7684\u7aef\uff0c\u56e0\u4e3aUDP\u5305\u7684\u7aef\u53e3\u53f7\u662f\u4e00\u4e2a\u6545\u610f\u8bbe\u7f6e\u7684\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\u7aef\u53e3\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u4e00\u4e2a\u201cdestination port unreachable \u201d\u7684ICMP\u6d88\u606f\u5305, \u8be5\u5305\u7684header\u7684type=3, code=3\u3002\u5f53\u8be5\u5305\u88ab\u53d1\u9001\u56de\u6e90\u7aef\uff0ctraceroute\u901a\u8fc7\u8be5ICMP\u5305\u7684\u7c7b\u578b\u5224\u65ad\u51fa\u5df2\u7ecf\u5230\u8fbe\u4e86\u76ee\u7684\u7aef\uff0c\u5b8c\u6210\u63a2\u6d4b\u3002","title":"ICMP"},{"location":"network/icmp/#icmpinternet-control-message-protocol","text":"ICMP\u662f\u5728\u7f51\u7edc\u5c42\u4e4b\u4e0a\u7684\u534f\u8bae\uff0c\u6240\u4ee5\u5e94\u8be5\u7b97\u662f\u4f20\u8f93\u5c42\u534f\u8bae\uff0c\u867d\u7136ICMP\u662f\u5728\u7f51\u7edc\u5c42\u7528\u6765\u62a5\u544a\u9519\u8bef\u548c\u8bca\u65ad\u95ee\u9898\u7684\u3002","title":"ICMP\uff08Internet control message protocol\uff09"},{"location":"network/icmp/#reporting-errors","text":"ICMP \u7684\u4e3b\u8981\u76ee\u7684\u662f\u62a5\u544a\u9519\u8bef\u3002\u4f8b\u5982\u7aef\u70b9A\u53d1\u9001\u4e00\u4e2ahttp\u8bf7\u6c42\u7ed9\u7aef\u70b9B\uff0c\u5728\u8bf7\u6c42\u5305\u7ecf\u8fc7A\u548cB\u4e4b\u95f4\u7684\u67d0\u4e2a\u8def\u7531\u5668\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8def\u7531\u8868\u91cc\u627e\u4e0d\u5230\u5bf9\u5e94\u5230B\u7684\u5730\u5740\uff0c \u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2aICMP\u9519\u8bef\u6d88\u606f\u5305\u3002\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u7684\u7c7b\u578b\u662f \u201cdestination network unreachable\u201d \u6240\u4ee5\u5b83\u7684type\u662f3\uff0ccode\u662f0\u3002\u5b83\u4eec\u4f1a\u88ab\u653e\u5230ICMP\u7684\u6d88\u606f\u5934\u91cc\u9762\uff0c\u53e6\u5916ICMP\u8fd8\u5305\u542b\u4e86\u53d1\u751f\u9519\u8bef\u7684\u539f\u5305\u7684ip header, \u4ee5\u53caip data\u7684\u524d8\u4e2a\u5b57\u8282\u3002\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u5305\u4f1a\u88ab\u5305\u5728\u4e00\u4e2a\u65b0\u7684IP\u5305\u91cc\uff0c\u65b0IP\u5305\u7684source\u662f\u8be5\u8def\u7531\u5668\u7684\u5730\u5740\uff0cdestnation\u662f\u7aef\u70b9A\u7684\u5730\u5740\uff0c\u8be5\u5305\u88ab\u8def\u7531\u5668\u53d1\u9001\u56de\u7aef\u70b9A\uff0c\u7aef\u70b9A\u7531\u6b64\u77e5\u9053\u6d88\u606f\u53d1\u9001\u5931\u8d25\u3002 ICMP\u6d88\u606f\u7684\u683c\u5f0f\u5982\u4e0b\uff1a 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Type | Code | Checksum | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | unused | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Internet Header + 64 bits of Original Data Datagram | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ICMP \u5e38\u7528\u7684\u6d88\u606f\u7c7b\u578b\u5982\u4e0b\uff1a ICMP type ICMP code Description 0 0 echo reply (to ping) 3 0 destination network unreachable 3 1 destination host unreachable 3 2 destination protocol unreachable 3 3 destination port unreachable 3 6 destination network unknown 3 7 destination host unknown 4 0 source quench (congestion control) 8 0 echo request 9 0 router advertisement 10 0 router discovery 11 0 TTL expired 12 0 IP header bad","title":"\u62a5\u544a\u9519\u8bef\uff08reporting errors\uff09"},{"location":"network/icmp/#diagnostic","text":"ICMP \u534f\u8bae\u7684\u7b2c\u4e8c\u4e2a\u7528\u9014\u662f\u6267\u884c\u7f51\u7edc\u8bca\u65ad\u3002\u5e38\u7528\u7684\u7ec8\u7aef\u5b9e\u7528\u7a0b\u5e8f traceroute \u548c ping \u90fd\u4f7f\u7528 ICMP \u534f\u8bae\u3002","title":"\u7f51\u7edc\u8bca\u65ad\uff08diagnostic\uff09"},{"location":"network/icmp/#ping","text":"\u7f51\u7edcping\u5de5\u5177\u4f7f\u7528\u4e86ICMP\u534f\u8bae\uff0c\u53d1\u8d77ping \u7684\u4e00\u7aef\u7684ICMP\u6d88\u606f\u7c7b\u578b\u662f\u201cecho request\u201d\uff0c\u56e0\u6b64\u8be5ICMP\u5305\u7684type=8, code=0\uff0c\u8be5ICMP\u5305\u4f1a\u88ab\u5305\u5728ip\u5305\u4e2d\u53d1\u9001\u7ed9\u88abping\u7684\u4e00\u7aef\u3002\u88abping\u7684\u4e00\u7aef\u8fd4\u56de\u7684ICMP\u6d88\u606f\u7c7b\u578b\u662f\u201cecho reply \u201d\uff0c\u56e0\u6b64\u8be5ICMP\u5305\u7684type=0, code=0\uff0c\u8be5ICMP\u5305\u4e5f\u4f1a\u88ab\u5305\u5728ip\u5305\u4e2d\u56de\u9988\u7ed9\u53d1\u9001\u7aef\u3002","title":"ping"},{"location":"network/icmp/#traceroute","text":"traceroute \u662f\u4e00\u4e2a\u7528\u6765\u63a2\u6d4b\u6d88\u606f\u5305\u6240\u901a\u8fc7\u7684\u7f51\u7edc\u8def\u5f84\u5373\u8be5\u8def\u5f84\u4e0a\u6240\u7ecf\u8fc7\u7684\u8def\u7531\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u201ctraceroute baidu.com\u201d \u6765\u5c1d\u8bd5\u8fd9\u4e2a\u5e94\u7528\u3002traceroute\u4e0d\u4f46\u4f1a\u544a\u8bc9\u4f60\u5305\u6240\u7ecf\u8fc7\u7684\u8def\u7531\uff0c\u8fd8\u4f1a\u544a\u8bc9\u4f60\u6240\u5230\u8fbe\u7684\u6bcf\u4e2a\u8def\u7531\u6240\u9700\u8981\u7684round-trip time\u3002traceroute\u7684\u76ee\u7684\u5c31\u662f\u8981\u627e\u7684\u4ece\u6e90\u7aef\u5230\u76ee\u7684\u7aef\u6240\u7ecf\u8fc7\u7684\u8def\u7531\uff0c\u5e76\u786e\u8ba4\u5230\u8fbe\u6bcf\u4e2a\u8def\u7531\u6240\u9700\u8981\u7684round-trip time\u3002traceroute\u901a\u8fc7\u5411\u76ee\u7684\u7aef\u53d1\u9001\u4e00\u4e2aUDP\u5305\uff0c\u8be5\u5305\u53ef\u4ee5\u662f\u4efb\u4f55\u5185\u5bb9\uff0c\u628a\u8fd9\u4e2a\u5305\u5305\u88f9\u5728\u4e00\u4e2aIP\u5305\u4e2d\uff0cIP\u5305header\u4e2d\u7684TTL\u662f1\uff0c\u5f53\u8fd9\u4e2aIP\u5305\u5230\u8fbe\u7b2c\u4e00\u4e2a\u8def\u7531\u65f6TTL\u51cf1\u53d8\u4e3a0,\u8fd9\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u201cTTL expired\u201d\u4e8b\u4ef6\uff0c\u5bfc\u81f4\u8fd9\u4e2a\u5305\u4f1a\u88ab\u4e22\u5f03\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2aICMP\u9519\u8bef\u6d88\u606f\u5305\uff0c\u8be5\u6d88\u606f\u5305\u7684\u7c7b\u578b\u662f\"TTL expired\"\uff0c\u56e0\u6b64ICMP\u5305header\u7684type=1,code=0\u3002\u8be5\u5305\u88ab\u5305\u88f9\u5728IP\u5305\u4e2d\u53d1\u9001\u56de\u6e90\u7aef\u3002\u6e90\u7aef\u901a\u8fc7\u89e3\u6790IP header\u7684source\u5f97\u5230\u8def\u7531\u5730\u5740\uff0c\u5e76\u901a\u8fc7\u8ba1\u7b97\u5f00\u59cb\u4e0e\u7ed3\u675f\u65f6\u95f4\u7684\u5dee\u503c\u5f97\u5230round-trip time\u3002\u5b8c\u6210\u7b2c\u4e00\u4e2a\u8def\u7531\u7684\u63a2\u6d4b\u540etraceroute\u4f1a\u63a5\u7740\u53d1\u9001\u4e0b\u4e00\u4e2a\u5305\uff0c\u65b0\u5305\u7684TTL\u662f2, \u90a3\u4e48\u8fd9\u4e2a\u5305\u4f1a\u5728\u5230\u8fbe\u7b2c\u4e8c\u4e2a\u8def\u7531\u7684\u65f6\u5019TTL\u51cf\u4e3a0,\u4ea7\u751f\u201cTTL expired\u201d\u4e8b\u4ef6\uff0c\u8fd9\u6837\u5c31\u83b7\u5f97\u4e86\u7b2c\u4e8c\u4e2a\u8def\u7531\u7684\u5730\u5740\u548c\u5230\u8fbe\u8be5\u8def\u7531\u6240\u9700\u8981\u7684round-trip time\u3002\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u53d1\u9001\u65b0\u5305\u7684TTL\u6bd4\u4e0a\u6b21\u59271,\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5305\u5230\u8fbe\u76ee\u7684\u7aef\uff0c\u56e0\u4e3aUDP\u5305\u7684\u7aef\u53e3\u53f7\u662f\u4e00\u4e2a\u6545\u610f\u8bbe\u7f6e\u7684\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\u7aef\u53e3\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u4e00\u4e2a\u201cdestination port unreachable \u201d\u7684ICMP\u6d88\u606f\u5305, \u8be5\u5305\u7684header\u7684type=3, code=3\u3002\u5f53\u8be5\u5305\u88ab\u53d1\u9001\u56de\u6e90\u7aef\uff0ctraceroute\u901a\u8fc7\u8be5ICMP\u5305\u7684\u7c7b\u578b\u5224\u65ad\u51fa\u5df2\u7ecf\u5230\u8fbe\u4e86\u76ee\u7684\u7aef\uff0c\u5b8c\u6210\u63a2\u6d4b\u3002","title":"traceroute"},{"location":"network/tcp/","text":"Transmission Control Protocol (TCP) TCP\u662f\u4e00\u79cd\u53ef\u9760\u4f20\u8f93\u7684\u534f\u8bae\uff0c\u800c\u5b9e\u73b0\u53ef\u9760\u548c\u9ad8\u6548\u7684\u4f20\u8f93\u9700\u8981\u7528\u5230\u4e00\u7cfb\u5217\u7684\u673a\u5236\uff0c\u6280\u5de7\u548c\u7b97\u6cd5\uff0c\u4e0b\u9762\u4e00\u4e00\u4ecb\u7ecd\u3002 \u6ed1\u52a8\u7a97\u53e3\uff08Sliding window\uff09 \u6ed1\u52a8\u7a97\u53e3\u662f\u5b9e\u73b0\u53ef\u9760\u4f20\u8f93\u548c\u63a7\u5236\u53d1\u9001\u901f\u7387\u7684\u5173\u952e\u3002\u4e00\u4e2aTCP\u7f51\u7edc\u7aef\u70b9\uff08endpoint\uff09\u6709\u4e24\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4e00\u4e2a\u662f\u8d1f\u8d23\u63a5\u6536\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u4e00\u4e2a\u662f\u8d1f\u8d23\u53d1\u9001\u7684\u6ed1\u52a8\u7a97\u53e3. \u63a5\u6536\u7684\u6ed1\u52a8\u7a97\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff0cfirst unread\u5230first unassembled\u8fd9\u4e00\u6bb5\u5e8f\u5217\u7684\u6570\u636e\u662f\u5df2\u7ecf\u63a5\u6536\u5230\u5e76\u7ec4\u88c5\u597d\u51c6\u5907\u88ab\u8bfb\u53d6\u7684\u6570\u636e\u3002first unassembled\u662freceiver\u671f\u5f85sender\u53d1\u9001\u7684\u4e0b\u4e00\u4e2a\u5305\u7684\u5e8f\u53f7\uff0c\u4e5f\u5c31\u662f\u8981\u53d1\u9001\u7684acknowledge\u5305\u4e2dackno\u7684\u503c\u3002 first unassembled \u5230 first unacceptable \u4e4b\u95f4\u5c31\u662f\u63a5\u53d7\u7aef\u7f13\u5b58\u7684\u5269\u4f59\u5bb9\u91cf\uff0c\u4e5f\u5c31\u662freceive window \u7684\u5927\u5c0f\uff0c\u65b0\u6765\u7684\u6570\u636e\u5c31\u653e\u5230\u8fd9\u91cc\u8fdb\u884c\u7ec4\u88c5\u3002receive window \u662f\u540e\u9762\u8981\u7528\u5230\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u8868\u793a\u4e3arwnd\uff0c\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a rwnd= first unacceptable - first unassembled \u53d1\u9001\u7684\u6ed1\u52a8\u7a97\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff0cbase\u662f\u5df2\u7ecf\u6536\u5230\u7684acknowledge\u5305\u4e2d\u7684ackno\u7684\u6700\u5927\u503c, base\u4e4b\u524d\u7684\u6570\u636e\u90fd\u662f\u5df2\u7ecf\u786e\u8ba4\u88ab\u5bf9\u65b9\u6536\u5230\u4e86\u7684\u6570\u636e\u3002TCP\u91c7\u7528\u7684\u662f\u7d2f\u79ef\u5e94\u7b54(cumulative acknowledgments),\u6bcf\u6536\u5230\u4e00\u4e2a\u5e94\u7b54\u5305\u5c31\u8868\u793aackno\u4e4b\u524d\u7684\u6240\u6709\u5b57\u8282\u90fd\u5df2\u7ecf\u88ab\u5bf9\u65b9\u63a5\u53d7\u6210\u529f\u4e86\u3002nextseqnum\u662f\u4e0b\u4e00\u6b21\u51c6\u5907\u53d1\u9001\u7684\u6570\u636e\u5305\u7684\u8d77\u59cb\u5e8f\u5217\u53f7\u3002base\u5230nextseqnum\u4e4b\u95f4\u7684\u6570\u636e\u662f\u5df2\u7ecf\u53d1\u9001\u4f46\u662f\u672a\u6536\u5230\u5e94\u7b54\u7684\u6570\u636e( unacknowledged bytes)\uff0c\u4e5f\u53eboutstanding bytes\u6216bytes in flight\u3002outstanding bytes\u662f\u540e\u9762\u8981\u7528\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a outstanding bytes = nextseqnum - base \u53ef\u9760\u4f20\u8f93\uff08Reliable data transfer\uff09 TCP\u7684\u53ef\u9760\u4f20\u8f93\u662f\u9760\u5bf9\u4e22\u5931\u7684\u5305\u91cd\u4f20(retransmition)\u5b9e\u73b0\u7684, \u800c\u786e\u8ba4\u4e00\u4e2a\u5305\u662f\u5426\u4e22\u5931\u8981\u4f9d\u8d56\u8d85\u65f6(timeout)\u4e0e\u91cd\u590d\u5e94\u7b54(duplicate acknowledges)\u4e24\u79cd\u673a\u5236\u2014\u2014duplicate acknowledges\u5c31\u662f\u91cd\u590d\u6536\u5230\u539f\u6765\u5df2\u7ecf\u6536\u5230\u8fc7\u7684\u9488\u5bf9\u67d0\u4e2a\u5305\u7684\u5e94\u7b54(ACK)\u3002 \u8981\u5b9e\u73b0\u8d85\u65f6\u673a\u5236\u5c31\u8981\u786e\u5b9a\u8d85\u65f6\u65f6\u95f4\uff0c\u8981\u786e\u5b9a\u8d85\u65f6\u65f6\u95f4\u5c31\u9700\u8981\u77e5\u9053Round-Trip Time\u3002Round-Trip Time\u53ef\u4ee5\u901a\u8fc7\u4e4b\u524d\u53d1\u9001\u7684\u5305\u7684RTT\u8fdb\u884c\u4f30\u7b97\u3002\u6240\u4ee5\u8981\u5bf9\u4e4b\u524d\u53d1\u9001\u7684\u5305\u7684RTT\u8fdb\u884c\u91c7\u6837\u5f97\u5230SampleRTT\u3002\u8fd9\u91cc\u5e76\u4e0d\u662f\u9488\u5bf9\u6bcf\u4e00\u4e2a\u53d1\u9001\u51fa\u7684\u5305\u90fd\u8981\u8fdb\u884c\u91c7\u6837\uff0c\u800c\u662f\u6bcf\u5b8c\u6210\u4e00\u4e2aRTT\u91c7\u6837\u7d27\u63a5\u7740\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21\u91c7\u6837\uff0c\u4e5f\u5c31\u662f\u6bcf\u9694\u4e00\u4e2aRTT\u7684\u65f6\u95f4\u6bb5\u91c7\u6837\u4e00\u6b21\u3002\u4f30\u7b97RTT\u7684\u516c\u5f0f\u4e3a EstimatedRTT = (1 \u2013 \u03b1) * EstimatedRTT + \u03b1 * SampleRTT \u9664\u4e86\u8981\u4f30\u7b97RTT\u8fd8\u8981\u8ba1\u7b97RTT\u7684\u53d8\u5316\u6027DevRTT\u3002\u6240\u8c13\u7684\u53d8\u5316\u6027\u5c31\u662fEstimatedRTT\u4e0eSampleRTT\u7684\u504f\u79bb\u7a0b\u5ea6\u3002\u516c\u5f0f\u5982\u4e0b\uff1a DevRTT = (1 \u2013 \u03b2) * DevRTT + \u03b2 * | SampleRTT \u2013 EstimatedRTT | \u5982\u679cSampleRTT\u7684\u6ce2\u52a8\u5f88\u5c0f\u90a3\u4e48DevRTT\u7684\u503c\u5c31\u5f88\u5c0f\uff0c\u53cd\u4e4b\u5c31\u5f88\u5927\u3002 \u6700\u7ec8\u8d85\u65f6\u65f6\u95f4\u5c31\u662fEstimatedRTT\u52a0\u4e0a\u4e00\u4e2a\u6ce2\u52a8\u7684margin\u503c\uff0c\u8fd9\u4e2amargin\u503c\u5c31\u662fDevRTT\uff0c TimeoutInterval = EstimatedRTT + 4 * DevRTT TimeoutInterval\u7684\u521d\u59cb\u503c\u662f1 second, \u6bcf\u6b21\u8d85\u65f6\u7684\u65f6\u5019TimeoutInterval\u7684\u503c\u90fd\u8981\u7ffb\u500d\uff0c\u4f46\u662f\u4e00\u65e6\u6536\u5230\u4e00\u4e2a\u65b0\u7684\u5e94\u7b54\u5305\uff0cTimeoutInterval\u5c31\u53c8\u8981\u7528\u4e0a\u9762\u7684\u516c\u5f0f\u8ba1\u7b97\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0cEstimating the Round-Trip Time\u7684\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b TimeoutInterval = 1; int EstimateTimeout() { \u03b1=0.125 \u03b2=0.25 EstimatedRTT = (1 \u2013 \u03b1) * EstimatedRTT + \u03b1 * SampleRTT DevRTT = (1 \u2013 \u03b2) * DevRTT + \u03b2 * | SampleRTT \u2013 EstimatedRTT | TimeoutInterval = EstimatedRTT + 4 * DevRTT return TimeoutInterval; } \u6709\u4e86\u8d85\u65f6\u65f6\u95f4\u5c31\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u4e86\uff0c\u8ba1\u65f6\u5668\u4e5f\u4e0d\u662f\u5bf9\u6bcf\u4e2a\u53d1\u51fa\u7684\u5305\u90fd\u8981\u8fdb\u884c\u8ddf\u8e2a\u8ba1\u65f6\uff0c\u800c\u662f\u53ea\u5bf9\u6700\u65e9\u7684(\u5e8f\u5217\u53f7\u6700\u5c0f\u7684)\u4e00\u4e2a\u672a\u5e94\u7b54\u5305\u8fdb\u884c\u8ba1\u65f6\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u53d1\u9001\u7aef\u7684\u4f2a\u4ee3\u7801, \u63cf\u8ff0\u4e86\u53d1\u9001\u5305\u65f6\u5b9a\u65f6\u5668\u7684\u542f\u52a8\uff0c\u4ee5\u53ca\u9488\u5bf9\u8d85\u65f6\u548c\u91cd\u590d\u5e94\u7b54\u7684\u5904\u7406\u3002 /* Assume sender is not constrained by TCP flow or congestion control, that data from above is less than MSS in size, and that data transfer is in one direction only. */ NextSeqNum=InitialSeqNumber SendBase=InitialSeqNumber TimeoutInterval=1s loop (forever) { switch(event) event: data received from application above create TCP segment with sequence number NextSeqNum if (timer currently not running) { start timer } pass segment to IP NextSeqNum=NextSeqNum+length(data) break; event: timer timeout retransmit not-yet-acknowledged segment with smallest sequence number TimeoutInterval *= 2; start timer break; event: ACK received, with ACK field value of y if (y > SendBase) { SendBase=y if (there are currently any not yet acknowledged segments) { TimeoutInterval = EstimateTimeout() ; start timer } } else { /* a duplicate ACK for already ACKed segment */ increment number of duplicate ACKs received for y if (number of duplicate ACKS received for y==3) /* TCP fast retransmit */ resend segment with sequence number y } break; } /* end of loop forever */ \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6bcf\u6b21\u53d1\u9001\u6570\u636e\u5982\u679c\u8ba1\u65f6\u5668\u6ca1\u6709\u542f\u52a8\u5c31\u8981\u542f\u52a8\u8ba1\u65f6\u5668\uff0c\u4e5f\u5c31\u662f\u8bf4\u8ba1\u65f6\u5668\u8ffd\u8e2a\u7684\u662f\u5df2\u7ecf\u53d1\u9001\u4e14\u672a\u5e94\u7b54\u5305\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5305\u3002\u6bcf\u5f53\u8d85\u65f6\u53d1\u751f\u65f6\u5c31\u8ba4\u4e3a\u8be5\u5305\u5df2\u7ecf\u4e22\u5931\u4e86\u6240\u4ee5\u8981\u8fdb\u884c\u91cd\u4f20\uff0c\u800c\u4e14\u8d85\u65f6\u65f6\u95f4\u8981\u8bbe\u4e3a\u539f\u6765\u7684\u4e24\u500d\uff0c\u5e76\u91cd\u65b0\u8ba1\u65f6\u3002\u5f53\u4e00\u4e2a\u5df2\u7ecf\u88ab\u5e94\u7b54\u8fc7\u7684\u5305\u53c8\u6536\u5230\u4e863\u6b21\u4ee5\u4e0a\u7684\u91cd\u590d\u5e94\u7b54\u4e5f\u8ba4\u4e3a\u8be5\u5305\u5df2\u7ecf\u4e22\u5931\u4e86\uff0c\u6240\u4ee5\u4e5f\u8981\u8fdb\u884c\u91cd\u4f20\u3002 \u63a5\u53d7\u7aef\u7684\u4ee3\u7801\u5982\u4e0b\uff1a loop (forever) { event: Arrival of segment if (segment is in-order ) { if (Arrival of segment that partially or completely fills in gap in received data.) { Immediately send ACK, provided that segment starts at the lower end of gap. return; } if(All data up to expected sequence number already acknowledged.) { Delayed ACK. Wait up to 500 msec for arrival of another in-order segment. If next in-order segment does not arrive in this interval, send an ACK. } else if (One other in-order segment waiting for ACK transmission.){ Immediately send single cumulative ACK, ACKing both in-order segments. } } else if(segment is out-of-order) { // with higher-than-expected sequence number. Gap detected. Immediately send duplicate ACK, indicating sequence number of next expected byte (which is the lower end of the gap). } } \u56e0\u4e3aTCP\u7684\u6bcf\u4e00\u4e2a\u7aef\u70b9\u65e2\u662f\u63a5\u53d7\u7aef\u4e5f\u662f\u53d1\u9001\u7aef\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u4e0a\u8ff0\u63a5\u53d7\u7aef\u548c\u53d1\u9001\u7aef\u662f\u8981\u6574\u5408\u5230\u4e00\u8d77\u7684\u3002 \u6d41\u63a7\u5236 \uff08Flow Control\uff09 \u4e3a\u4ec0\u4e48\u9700\u8981Flow Control\uff0c\u4e66\u91cc\u7684\u8fd9\u6bb5\u8bdd\u505a\u4e86\u5f88\u597d\u89e3\u91ca\uff0c\u201cIf the application is relatively slow at reading the data, the sender can very easily overflow the connection\u2019s receive buffer by sending too much data too quickly. TCP provides a flow-control service to its applications to eliminate the possibility of the sender overflowing the receiver\u2019s buffer. Flow control is thus a speed matching service, matching the rate at which the sender is sending against the rate at which the receiving application is reading. \u201d Flow-Control \u5c31\u662f\u8981\u4fdd\u8bc1\u53d1\u9001\u7aef\u5df2\u7ecf\u53d1\u9001\u4f46\u672a\u5e94\u7b54\u7684\u6570\u636e\u91cf(outstanding bytes)\u5c0f\u4e8e\u63a5\u53d7\u7aef\u7a7a\u95f2\u7f13\u5b58(receive window)\u7684\u5927\u5c0f\u3002\u5373 outstanding bytes < receive window \u5173\u4e8eoutstanding bytes\u548creceive window\u8bf7\u53c2\u89c1\u6ed1\u52a8\u7a97\u53e3\u90a3\u4e00\u8282\u3002 \u5728\u8fd9\u4e2a\u65b9\u6848\u4e2d\u6709\u4e00\u4e2a\u5c0f\u7684\u6280\u672f\u95ee\u9898\u3002\u5047\u8bbe\u6709\u4e24\u4e2a\u7aef\u70b9A\u548cB\u4e92\u76f8\u901a\u4fe1\uff0c\u5e76\u5047\u8bbeB\u7684buffer\u5df2\u7ecf\u586b\u6ee1\u5373rwnd = 0\uff0c\u5f53B\u628arwnd = 0\u901a\u77e5\u7ed9A\u540e\uff0c\u5047\u8bbeB\u6ca1\u6709\u66f4\u591a\u7684\u4e1c\u897f\u8981\u53d1\u9001\u7ed9A\u4e86\u3002\u73b0\u5728\u8003\u8651\u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u5462\uff1f\u5f53B\u6e05\u7a7a\u4e86buffer\u7684\u65f6\u5019\uff0cTCP\u6ca1\u6709\u53d1\u9001\u5e26\u6709\u65b0\u7684rwnd\u503c\u7684segment\u7ed9A\u3002\u56e0\u4e3a\u53ea\u6709\u5f53B\u6709\"\u6570\u636e\u6216\u5e94\u7b54\"\u8981\u53d1\u9001\u7684\u65f6\u5019\u624d\u4f1a\u53d1\u9001\u65b0\u7684segment\u3002\u6240\u4ee5A\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053B\u5df2\u7ecf\u91ca\u653e\u51fa\u4e86\u65b0\u7684\u7a7a\u95f2\u7f13\u5b58\u3002\u7aef\u70b9A\u5c31\u4f1a\u88ab\u5835\u585e\u5728\u90a3\u91cc\u4e0d\u4f1a\u53d1\u9001\u4efb\u4f55\u6570\u636e\uff01\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cTCP\u534f\u8bae\u6807\u51c6\u8981\u6c42\u7aef\u70b9A\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u7ee7\u7eed\u53d1\u9001paylaod data \u4e3a\u4e00\u4e2a\u5b57\u8282\u5927\u5c0f\u7684segment\u7ed9B\u3002\u8fd9\u4e9bsegments\u4f1a\u88ab\u63a5\u53d7\u65b9B\u56de\u590d\uff0c\u5e76\u628a\u65b0\u7684rwnd\u901a\u77e5\u5230\u53d1\u9001\u65b9A\u3002 \u62e5\u5835\u63a7\u5236 \uff08Congestion Control\uff09 Packet retransmission \u53ef\u4ee5\u89e3\u51b3\u5305\u4e22\u5931\u7684\u95ee\u9898\u8fbe\u5230\u53ef\u9760\u4f20\u8f93\u7684\u76ee\u7684\uff0c \u4f46\u662f\u5305\u4e22\u5931\u53ea\u662f\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u4e0d\u662f\u95ee\u9898\u7684\u539f\u56e0\uff0cretransmission \u6cbb\u6807\u4e0d\u6cbb\u672c\u3002\u53d1\u751f\u4e22\u5305\u7684\u539f\u56e0\u4e00\u822c\u662f\u7f51\u7edc\u62e5\u5835\u9020\u6210\u7684\uff0c\u6240\u4ee5\u8981\u89e3\u51b3\u95ee\u9898\u7684\u539f\u56e0\u5c31\u662f\u89e3\u51b3\u7f51\u7edc\u62e5\u5835\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u8981\u964d\u4f4e\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002\u8fd9\u5c31\u5f15\u51fa\u4e86\u4e09\u4e2a\u95ee\u9898\u3002\u7b2c\u4e00\uff0cTCP\u5982\u4f55\u9650\u5236\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\uff1f\u7b2c\u4e8c\uff0cTCP\u53d1\u9001\u7aef\u5982\u4f55\u63a2\u6d4b\u5230\u81ea\u5df1\u5230\u63a5\u53d7\u7aef\u4e4b\u95f4\u7684\u8fd9\u6bb5\u8def\u5f84\u6709\u62e5\u5835\u73b0\u8c61\u53d1\u751f\uff1f\u7b2c\u4e09\uff0c\u5982\u679c\u63a2\u6d4b\u9053\u62e5\u5835\u73b0\u8c61\u53d1\u751f\u4e86\uff0c\u53d1\u9001\u65b9\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u7b56\u7565\u6765\u8c03\u6574\u5176\u53d1\u9001\u901f\u7387\u3002 \u9996\u5148\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898, TCP\u5982\u4f55\u9650\u5236\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002TCP\u7684\u53d1\u9001\u901f\u7387\u5c31\u7b49\u4e8e outstanding bytes / RTT , \u5728\u6ed1\u52a8\u7a97\u53e3\u90a3\u4e00\u8282\u4e2d\u5df2\u7ecf\u77e5\u9053 outstanding bytes = nextseqnum - base \uff0c\u6240\u4ee5\u53d1\u9001\u901f\u7387\u7684\u516c\u5f0f\u5982\u4e0b send rate = (nextseqnum - base) / RTT \u73b0\u5728\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u53d8\u91cfcongestion window\uff0c\u8868\u793a\u4e3acwnd\u3002\u53ef\u4ee5\u901a\u8fc7\u786e\u4fdd outstanding bytes <= min{cwnd, rwnd} \u6765\u7ea6\u675fTCP\u53d1\u9001\u7aef\u5411\u7f51\u7edc\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002\u901a\u8fc7\u8c03\u6574cwnd\u7684\u5927\u5c0f\uff0c\u53d1\u9001\u7aef\u53ef\u4f9d\u76f8\u5e94\u8c03\u6574\u5b83\u5411\u7f51\u7edc\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002 \u4e0b\u9762\u89e3\u51b3\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0cTCP\u53d1\u9001\u7aef\u5982\u4f55\u63a2\u6d4b\u5230\u81ea\u5df1\u5230\u63a5\u53d7\u7aef\u4e4b\u95f4\u7684\u8fd9\u6bb5\u8def\u5f84\u6709\u62e5\u5835\u73b0\u8c61\u53d1\u751f\uff1f\u5176\u5b9e\uff0c\u6709\u4e24\u4e2a\u8ff9\u8c61\u53ef\u4ee5\u8868\u660e\u53d1\u9001\u7aef\u5230\u63a5\u53d7\u7aef\u7684\u8def\u5f84\u4e0a\u4ea7\u751f\u62e5\u5835\u4e86\uff0c\u90a3\u5c31\u662f\u8d85\u65f6\u548c\u4e09\u6b21\u91cd\u590d\u5e94\u7b54\u3002 \u6700\u540e\u89e3\u51b3\u7b2c\u4e09\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u63a2\u6d4b\u9053\u62e5\u5835\u73b0\u8c61\u53d1\u751f\u4e86\uff0c\u53d1\u9001\u65b9\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u7b56\u7565\u6765\u8c03\u6574\u5176\u53d1\u9001\u901f\u7387\uff1f\u62e5\u5835\u63a7\u5236\u7b97\u6cd5\u6709\u4e09\u4e2a\u9636\u6bb5\u7ec4\u6210\u6216\u8005\u8bf4\u662f\u4e09\u79cd\u6a21\u5f0f (1) slow start, (2) congestion avoidance, and (3) fast recovery\u3002 Slow Start \u5f53TCP\u8fde\u63a5\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0ccwnd\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a1 MSS\uff08maximum sized segments\uff09\uff0c\u56e0\u6b64\u5b83\u7684\u521d\u59cb\u53d1\u9001\u901f\u7387\u5c31\u662f 1MSS/ RTT\u3002\u901a\u5e38\u53ef\u7528\u7684\u5bbd\u5e26\u662f\u8fdc\u8fdc\u5927\u4e8e 1MSS / RTT\u7684\uff0c\u56e0\u6b64\u8fd9\u65f6\u5019\u4e0d\u4f1a\u53d1\u9001\u4e22\u5305\uff0c\u53d1\u9001\u7aef\u6bcf\u6536\u5230\u4e00\u4e2a\u9488\u5bf9\u53d1\u51fa\u5305\u7684\u5e94\u7b54\uff0ccwnd\u5c31\u589e\u52a01MSS\u3002\u5f53\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684\u5305\u6536\u5230\u5e94\u7b54\u540eTCP\u53d1\u9001\u7aef\u7684cwnd\u589e\u52a0\u4e00\u4e2aMSS\u7136\u540e\u53d1\u9001\u4e24\u4e2aMSS\u5927\u5c0f\u7684segments\u3002\u8fd9\u4e24\u4e2asegments\u4e5f\u90fd\u5206\u522b\u6536\u5230\u4e86\u5e94\u7b54\uff0c\u53d1\u9001\u65b9\u9488\u5bf9\u6bcf\u4e2a\u5e94\u7b54\u4e5f\u90fd\u4e3acwnd\u65b0\u589e1MSS\u5927\u5c0f\uff0c\u53d8\u62104MSS\u5927\u5c0f\u7684cwnd\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5bfc\u81f4\u6bcf\u9694 RTT \u7684\u65f6\u95f4\uff0ccwnd\u5c31\u7ffb\u4e00\u500d\uff0c\u53d1\u9001\u901f\u7387\u4e5f\u8ddf\u7740\u7ffb\u4e00\u500d\u3002\u6240\u4ee5\u5728slow start\u9636\u6bb5TCP\u7684\u53d1\u9001\u901f\u7387\u662f\u5448\u6307\u6570\u589e\u957f\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u6307\u6570\u589e\u957f\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\u5462\uff1f\u5728Slow Start\u9636\u6bb5\u6709\u4e09\u79cd\u60c5\u51b5\u4f1a\u5bfc\u81f4\u6570\u589e\u957f\u7ed3\u675f\u3002\u7b2c\u4e00\u662f\u5f53\u6709\u4e00\u4e2a\u8d85\u65f6\u6240\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0cTCP \u53d1\u9001\u7aef\u628acwnd\u8bbe\u7f6e\u4e3a1MSS\u5e76\u91cd\u65b0\u5f00\u59cbslow start\u7684\u8fc7\u7a0b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u8fd8\u4f1a\u628assthresh\uff08short hand for \u201cslow start threshold\u201d\uff09\u53d8\u91cf\u8bbe\u7f6e\u4e3acwnd/2\uff0c\u5373\u53d1\u73b0\u62e5\u5835\u65f6\u7684congestion window \u503c\u7684\u4e00\u534a\u3002\u7b2c\u4e8c\u79cd\u7ed3\u675f\u7684\u65b9\u5f0f\u662fSlow Start\u76f4\u63a5\u4e0essthresh\u7ed1\u5b9a\u3002\u7531\u4e8e\u4e0a\u6b21\u68c0\u6d4b\u5230\u62e5\u585e\u65f6 ssthresh \u662f cwnd \u503c\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u5f53 cwnd \u8fbe\u5230\u6216\u8d85\u8fc7 ssthresh \u7684\u503c\u65f6\u7ee7\u7eed\u52a0\u500d\u53ef\u80fd\u6709\u70b9\u9c81\u83bd\u3002\u56e0\u6b64\uff0c\u5f53 cwnd \u7684\u503c\u7b49\u4e8e ssthresh \u65f6\uff0c\u201cSlow Start\u201d\u9636\u6bb5\u7ed3\u675f\uff0c\u8fdb\u5165 \u201ccongestion avoidance\u201d\u9636\u6bb5\u3002 TCP \u5728 \u201ccongestion-avoidance\u201d \u9636\u6bb5\u4f1a\u66f4\u52a0\u8c28\u614e\u5730\u589e\u52a0 cwnd\u3002\u6162\u542f\u52a8\u7ed3\u675f\u7684\u6700\u540e\u4e00\u79cd\u65b9\u5f0f\u662f\u68c0\u6d4b\u5230\u4e09\u4e2a\u91cd\u590d\u7684 ACK\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTCP \u6267\u884c \u201cfast retransmit\u201d \u5e76\u8fdb\u5165fast recovery\u72b6\u6001\u3002 Congestion Avoidance \u5728\u8fdb\u5165congestion-avoidance\u72b6\u6001\u65f6\uff0ccwnd \u7684\u503c\u5927\u7ea6\u662f\u4e0a\u6b21\u9047\u5230\u62e5\u585e\u65f6\u503c\u7684\u4e00\u534a\u3002 \u56e0\u6b64\uff0cTCP \u4e0d\u662f\u5728\u6bcf\u4e2a RTT \u65f6\u5c06 cwnd \u7684\u503c\u52a0\u500d\uff0c\u800c\u662f\u91c7\u7528\u66f4\u4fdd\u5b88\u7684\u65b9\u6cd5\u5e76\u5728\u6bcf\u4e2a RTT \u4e2d\u4ec5\u5c06 cwnd \u7684\u503c\u589e\u52a0\u4e00\u4e2a MSS\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f TCP \u53d1\u9001\u65b9\u5728\u63a5\u53d7\u5230acknowledgment\u65f6\uff0c\u5c06 cwnd \u589e\u52a0 MSS*(MSS/cwnd) \u5b57\u8282\u3002 \u4f8b\u5982\uff0c\u5982\u679c MSS \u4e3a 1,460 \u5b57\u8282\uff0ccwnd \u4e3a 14,600 \u5b57\u8282\uff0c\u90a3\u4e48\u5728\u4e00\u4e2a RTT \u5185\u6700\u591a\u53d1\u9001 10 \u4e2asegment\u3002 \u6bcf\u4e2a\u5230\u8fbe\u7684 ACK\uff08\u5047\u8bbe\u6bcf\u4e2a\u6bb5\u4e00\u4e2a ACK\uff09\u5c06\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\u589e\u52a0 1/10 MSS\uff0c\u56e0\u6b64\uff0c\u5f53\u6536\u5230\u6240\u6709 10 \u4e2a\u6bb5\u7684ACK\u540e\uff0c\u62e5\u585e\u7a97\u53e3\u7684\u503c\u5c06\u589e\u52a0\u4e00\u4e2a MSS\u3002 \u4f46\u662f\uff0ccongestion avoidance\u7684\u7ebf\u6027\u589e\u957f\uff08\u6bcf\u4e2a RTT 1 MSS\uff09\u4f55\u65f6\u7ed3\u675f\uff1f\u7b54\u6848\u540c\u6837\u662f\u5728\u7531\u201c\u8d85\u65f6\u548c\u91cd\u590d\u5e94\u7b54\u201d\u6240\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u53d1\u751f\u65f6\u7ed3\u675f\u3002 \u4ea7\u751f\u201c\u8d85\u65f6\u201d\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u65f6\uff0cTCP \u7684 congestion-avoidance\u7b97\u6cd5\u7684\u5904\u7406\u65b9\u5f0f\u4e0eslow start\u7684\u60c5\u51b5\u76f8\u540c\uff1acwnd \u7684\u503c\u8bbe\u7f6e\u4e3a 1 MSS\uff0c\u5e76\u5c06 ssthresh \u7684\u503c\u66f4\u65b0\u4e3a cwnd \u503c\u7684\u4e00\u534a\u3002\u4ea7\u751f\u201c\u4e09\u6b21\u91cd\u590d\u7684 ACK\u201d\u6240\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u65f6\uff0cTCP\u7684\u5904\u7406\u65b9\u5f0f\u6ca1\u6709\u4e0e\u201c\u8d85\u65f6\u201d\u6240\u6307\u793a\u7684\u4e22\u5305\u4e8b\u4ef6\u90a3\u4e48\u5267\u70c8\uff0c\u800c\u662f\u5c06cwnd\u7684\u503c\u51cf\u534a\uff08\u589e\u52a03\u4e2a MSS \u4ee5\u4f5c\u4e3a\u6536\u5230\u7684\u4e09\u6b21\u91cd\u590d ACK \u7684\u8003\u91cf\uff09\u5e76\u8bbe\u7f6e ssthresh \u7684\u503c\u4e3a\u6536\u5230\u4e09\u6b21\u91cd\u590d\u7684 ACK \u65f6\u7684 cwnd \u503c\u7684\u4e00\u534a\u3002 \u7136\u540e\u8fdb\u5165fast recovery\u72b6\u6001\u3002 Fast Recovery \u5728fast recovery\u9636\u6bb5\uff0c\u9488\u5bf9\u4e22\u5931\u7684segment\uff0c\u6bcf\u6536\u5230\u4e00\u4e2a\u91cd\u590d\u7684 ACK\uff0ccwnd \u7684\u503c\u5c31\u4f1a\u589e\u52a0 1 MSS\u3002\u6700\u7ec8\uff0c\u5f53\u4e22\u5931\u7684segment\u7684 ACK \u5230\u8fbe\u65f6\uff0cTCP \u8fdb\u5165congestion-avoidance\u9636\u6bb5\u3002\u4e0eslow start \u548ccongestion-avoidance\u76f8\u540c\uff0c\u53d1\u751f\u8d85\u65f6\u4e8b\u4ef6\u65f6\uff0ccwnd \u7684\u503c\u8bbe\u7f6e\u4e3a 1 MSS\uff0cssthresh \u7684\u503c\u8bbe\u7f6e\u4e3a\u8d85\u65f6\u4e8b\u4ef6\u53d1\u751f\u65f6cwnd\u503c\u7684\u4e00\u534a\uff0c\u8fdb\u5165slow start\u72b6\u6001\uff1a\u3002 \u5173\u4e8eTCP\u7684congestion control\u7684\u72b6\u6001\u8f6c\u6362\u56fe\u5982\u4e0b\uff1a \u7ed9\u524d\u9762Reliable data transfer\u90a3\u4e00\u8282\u7684\u53d1\u9001\u7aef\u7684\u4f2a\u4ee3\u7801\u52a0\u5165congestion control\u7684\u903b\u8f91\uff0c \u5982\u4e0b MSS=500 NextSeqNum=InitialSeqNumber SendBase=InitialSeqNumber cwnd=MSS DupAckCount=0 ssthresh=64KB TimeoutInterval=1s function bytes_in_flight(){ return NextSeqNum - SendBase; } function window(){ reutrn min(cwnd, rwnd == 0 \uff1f 1 : cwnd); } loop (forever) { switch(event) event: data received from application above while(stream has more data) { create TCP segment with sequence number NextSeqNum segment.payload = stream.read(min(window() - bytes_in_flight(), MAX_PAYLOAD_SIZE); if (timer currently not running) { start timer } pass segment to IP NextSeqNum=NextSeqNum+length(segment.payload) } break; event: timer timeout // entry slow-start ssthresh=cwnd/2 cwnd = 1 MSS DupAckCount = 0 retransmit not-yet-acknowledged segment with smallest sequence number TimeoutInterval *= 2; start timer break; event: ACK received, with ACK field value of y if (y > SendBase) { SendBase=y if(DupAckCount > 3){ // fast-recovery transitions to congestion-avoidence cwnd = ssthresh; } else { if(cwnd > ssthresh){ // in congetion avoidence cwnd += MSS*(MSS/cwnd) } else { // in slow start cwnd += MSS } } DupAckCount = 0 if (there are currently any not yet acknowledged segments) { TimeoutInterval = EstimateTimeout() ; start timer } } else { /* a duplicate ACK for already ACKed segment */ DupAckCount++; if (DupAckCount==3){ // entry fast-recovery ssthresh = cwnd/2 cwnd = ssthresh + 3 MSS /* TCP fast retransmit */ resend segment with sequence number y } else if (DupAckCount > 3) { // in fast-recovery cwnd += MSS } } break; } /* end of loop forever */ TCP Connection Management\u2014\u2014\u2014Connection\u5efa\u7acb\uff0cConnection\u5173\u95ed\uff0c\u72b6\u6001\u8f6c\u6362 \u5173\u4e8eTCP\u7684\u5efa\u7acb\u8fde\u63a5\u7684\u4e09\u8def\u63e1\u624b(three-way handshake)\u548c\u5173\u95ed\u8fde\u63a5\u7684\u56db\u8def\u6325\u624b\u662f\u8001\u9ec4\u5386\u4e86\uff0c\u76f4\u63a5\u4e0a\u793a\u610f\u56fe\u5c31\u80fd\u660e\u767d\u4e86,\u5982\u679c\u4e00\u4e2a\u4e0d\u591f\u5c31\u591a\u4e0a\u51e0\u4e2a The TCP Finite State Machine \u793a\u610f\u56fe\u5982\u4e0b TCP connection\u7684\u5efa\u7acb\u548c\u5173\u95ed\u7684\u793a\u610f\u56fe\u5982\u4e0b \u53e6\u5916\u8fd9\u7bc7 \u535a\u6587 \u5bf9TCP\u8fde\u63a5\u768411\u79cd\u72b6\u6001\u505a\u4e86\u5f88\u597d\u7684\u5206\u6790\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\u90a3\u4e2aTIME_WAIT\u72b6\u6001\uff0cTCP\u4e3b\u52a8\u5173\u95ed\u7684\u4e00\u7aef\u8981\u5728\u8fd9\u4e2a\u72b6\u6001\u4fdd\u63012\u500d\u7684MSL\uff08\u6700\u5927\u6bb5\u751f\u5b58\u671f\uff09\u624d\u4f1a\u7ed3\u675f\u3002\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\u6709\u4e24\u4e2a\u539f\u56e0\uff0c\u4e00\u662f\u5f53\u88ab\u52a8\u5173\u95ed\u7684\u4e00\u7aef\u4e5f\u53d1\u9001FIN\u7ed9\u4e3b\u52a8\u5173\u95ed\u7684\u4e00\u7aef\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e3b\u52a8\u7aef\u6536\u5230\u4e86\u4f1a\u56de\u590d\u4e00\u4e2aACK, \u4f46\u662f\u4e3b\u52a8\u7aef\u65e0\u6cd5\u83b7\u77e5\u88ab\u52a8\u7aef\u662f\u5426\u6536\u5230\u4e86\u8fd9\u4e2aACK\uff0c\u56e0\u4e3a\u6ca1\u6709\u9488\u5bf9ACK\u7684ACK\u3002\u5047\u82e5\u88ab\u52a8\u7aef\u6ca1\u6709\u6536\u5230ACK\uff0c\u5c31\u4f1a\u91cd\u590d\u53d1\u9001FIN\uff0c\u6240\u4ee5\u4e3b\u52a8\u7aef\u8981\u7b49\u5f85\u4e00\u7aef\u65f6\u95f4\u5982\u679c\u6ca1\u6709\u6536\u5230\u91cd\u590d\u7684FIN\u5c31\u786e\u8ba4\u5bf9\u65b9\u786e\u5b9e\u6536\u5230\u4e86\u9488\u5bf9FIN\u7684ACK\u4e86\uff0c\u53cd\u4e4b\u5982\u679c\u6536\u5230\u4e86\u91cd\u590d\u7684FIN\u5c31\u7ee7\u7eed\u56de\u590dACK\u3002\u4e8c\u662f\uff0c\u5047\u8bbe\u5728\u4e3b\u673a12.106.32.254\u76841500\u7aef\u53e3\u548c206.168.112.219\u768421\u7aef\u53e3\u4e4b\u95f4\u6709\u4e00\u4e2aTCP\u8fde\u63a5\u3002\u6b64\u8fde\u63a5\u5173\u95ed\u540e\uff0c\u5728\u76f8\u540c\u7684\u5730\u5740\u548c\u7aef\u53e3\u5efa\u7acb\u4e86\u53e6\u5916\u4e00\u4e2a\u8fde\u63a5\u3002\u7531\u4e8eIP\u5730\u5740\u548c\u7aef\u53e3\u76f8\u540c\uff0c\u6240\u4ee5\u540e\u4e00\u79cd\u8fde\u63a5\u88ab\u79f0\u4e3a\u5148\u524d\u8fde\u63a5\u7684\u201c\u5316\u8eab\u201d\u3002TCP\u5fc5\u987b\u9632\u6b62\u8fde\u63a5\u4e2d\u7684\u65e7\u526f\u672c\u5728\u7a0d\u540e\u518d\u6b21\u51fa\u73b0\uff0c\u5e76\u88ab\u8bef\u89e3\u4e3a\u5c5e\u4e8e\u540c\u4e00\u8fde\u63a5\u7684\u65b0\u201c\u5316\u8eab\u201d\u3002\u4e3a\u6b64\uff0cTCP\u5c06\u4e0d\u4f1a\u542f\u52a8\u5f53\u524d\u5904\u4e8eTIME_WAIT\u72b6\u6001\u7684\u8fde\u63a5\u7684\u65b0\u201c\u5316\u8eab\u201d\u3002\u7531\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u53d1\u9001\u7684\u6570\u636e\u5305\u4f1a\u5728MSL\u7684\u65f6\u95f4\u540e\u8fc7\u671f\uff0c\u56e0\u6b64 2 MSL\u4fdd\u8bc1\u4e86\u4e00\u4e2aRound-Trip\uff08\u53d1\u9001\u4e0e\u56de\u590d\uff09\u7684\u6570\u636e\u90fd\u4f1a\u8fc7\u671f\u3002\u901a\u8fc7\u5f3a\u5236\u6267\u884c\u6b64\u89c4\u5219\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u4e00\u4e2aTCP\u8fde\u63a5\u6210\u529f\u5efa\u7acb\u65f6\uff0c\u6765\u81ea\u5148\u524d\u8fde\u63a5\u7684\u6240\u6709\u65e7\u7684\u526f\u672c\u5728\u7f51\u7edc\u4e2d\u5df2\u8fc7\u671f\u3002 \u8fd8\u6709\u4e00\u4e9b\u7279\u6b8a\u4f46\u662f\u4e0d\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u4e24\u7aef\u540c\u65f6\u53d1\u9001SYN\u5efa\u7acb\u8fde\u63a5\uff0c\u6216\u540c\u65f6\u53d1\u9001FIN\u5173\u95ed\u8fde\u63a5\uff0c\u8fd9\u91cc\u6709\u4e00\u7bc7 \u535a\u6587 \u5bf9\u8005\u4e24\u79cd\u60c5\u51b5\u505a\u4e86\u5f88\u597d\u7684\u5206\u6790\uff0c\u6211\u76f4\u63a5\u642c\u8fc7\u6765\u4e86\u3002 1. Simultaneous Open It's possible for two applications to send a SYN to each other to start a TCP connection, although the possibility is small, because both sides have to know which port on the other side to send to. This process is called \"Simultaneous Open\", or \"simultaneous active open on both sides\". For example: An application at host A uses 7777 as the local port and connects to port 8888 on host B. At the same time, an application at host B uses 8888 as the local port and connects to port 7777 on host A. This is \"Simultaneous Open\". TCP is specially designed to deal with \"Simultaneous Open\", during which only one TCP connection is established, not two. The state transitions are shown in the following figure: During \"Simultaneous Open\", 4 packets are exchanged, 1 packet more than in normal situations. 2. Simultaneous Close It's permitted in TCP for both sides to do \"active close\", which is called \"Simultaneous Close\". The state transitions are shown in the following figure: During \"Simultaneous Close\", 4 packets are exchanged, the same as in normal situations.","title":"TCP"},{"location":"network/tcp/#transmission-control-protocol-tcp","text":"TCP\u662f\u4e00\u79cd\u53ef\u9760\u4f20\u8f93\u7684\u534f\u8bae\uff0c\u800c\u5b9e\u73b0\u53ef\u9760\u548c\u9ad8\u6548\u7684\u4f20\u8f93\u9700\u8981\u7528\u5230\u4e00\u7cfb\u5217\u7684\u673a\u5236\uff0c\u6280\u5de7\u548c\u7b97\u6cd5\uff0c\u4e0b\u9762\u4e00\u4e00\u4ecb\u7ecd\u3002","title":"Transmission Control Protocol (TCP)"},{"location":"network/tcp/#sliding-window","text":"\u6ed1\u52a8\u7a97\u53e3\u662f\u5b9e\u73b0\u53ef\u9760\u4f20\u8f93\u548c\u63a7\u5236\u53d1\u9001\u901f\u7387\u7684\u5173\u952e\u3002\u4e00\u4e2aTCP\u7f51\u7edc\u7aef\u70b9\uff08endpoint\uff09\u6709\u4e24\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4e00\u4e2a\u662f\u8d1f\u8d23\u63a5\u6536\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u4e00\u4e2a\u662f\u8d1f\u8d23\u53d1\u9001\u7684\u6ed1\u52a8\u7a97\u53e3. \u63a5\u6536\u7684\u6ed1\u52a8\u7a97\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff0cfirst unread\u5230first unassembled\u8fd9\u4e00\u6bb5\u5e8f\u5217\u7684\u6570\u636e\u662f\u5df2\u7ecf\u63a5\u6536\u5230\u5e76\u7ec4\u88c5\u597d\u51c6\u5907\u88ab\u8bfb\u53d6\u7684\u6570\u636e\u3002first unassembled\u662freceiver\u671f\u5f85sender\u53d1\u9001\u7684\u4e0b\u4e00\u4e2a\u5305\u7684\u5e8f\u53f7\uff0c\u4e5f\u5c31\u662f\u8981\u53d1\u9001\u7684acknowledge\u5305\u4e2dackno\u7684\u503c\u3002 first unassembled \u5230 first unacceptable \u4e4b\u95f4\u5c31\u662f\u63a5\u53d7\u7aef\u7f13\u5b58\u7684\u5269\u4f59\u5bb9\u91cf\uff0c\u4e5f\u5c31\u662freceive window \u7684\u5927\u5c0f\uff0c\u65b0\u6765\u7684\u6570\u636e\u5c31\u653e\u5230\u8fd9\u91cc\u8fdb\u884c\u7ec4\u88c5\u3002receive window \u662f\u540e\u9762\u8981\u7528\u5230\u7684\u4e00\u4e2a\u53d8\u91cf\uff0c\u8868\u793a\u4e3arwnd\uff0c\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a rwnd= first unacceptable - first unassembled \u53d1\u9001\u7684\u6ed1\u52a8\u7a97\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff0cbase\u662f\u5df2\u7ecf\u6536\u5230\u7684acknowledge\u5305\u4e2d\u7684ackno\u7684\u6700\u5927\u503c, base\u4e4b\u524d\u7684\u6570\u636e\u90fd\u662f\u5df2\u7ecf\u786e\u8ba4\u88ab\u5bf9\u65b9\u6536\u5230\u4e86\u7684\u6570\u636e\u3002TCP\u91c7\u7528\u7684\u662f\u7d2f\u79ef\u5e94\u7b54(cumulative acknowledgments),\u6bcf\u6536\u5230\u4e00\u4e2a\u5e94\u7b54\u5305\u5c31\u8868\u793aackno\u4e4b\u524d\u7684\u6240\u6709\u5b57\u8282\u90fd\u5df2\u7ecf\u88ab\u5bf9\u65b9\u63a5\u53d7\u6210\u529f\u4e86\u3002nextseqnum\u662f\u4e0b\u4e00\u6b21\u51c6\u5907\u53d1\u9001\u7684\u6570\u636e\u5305\u7684\u8d77\u59cb\u5e8f\u5217\u53f7\u3002base\u5230nextseqnum\u4e4b\u95f4\u7684\u6570\u636e\u662f\u5df2\u7ecf\u53d1\u9001\u4f46\u662f\u672a\u6536\u5230\u5e94\u7b54\u7684\u6570\u636e( unacknowledged bytes)\uff0c\u4e5f\u53eboutstanding bytes\u6216bytes in flight\u3002outstanding bytes\u662f\u540e\u9762\u8981\u7528\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a outstanding bytes = nextseqnum - base","title":"\u6ed1\u52a8\u7a97\u53e3\uff08Sliding window\uff09"},{"location":"network/tcp/#reliable-data-transfer","text":"TCP\u7684\u53ef\u9760\u4f20\u8f93\u662f\u9760\u5bf9\u4e22\u5931\u7684\u5305\u91cd\u4f20(retransmition)\u5b9e\u73b0\u7684, \u800c\u786e\u8ba4\u4e00\u4e2a\u5305\u662f\u5426\u4e22\u5931\u8981\u4f9d\u8d56\u8d85\u65f6(timeout)\u4e0e\u91cd\u590d\u5e94\u7b54(duplicate acknowledges)\u4e24\u79cd\u673a\u5236\u2014\u2014duplicate acknowledges\u5c31\u662f\u91cd\u590d\u6536\u5230\u539f\u6765\u5df2\u7ecf\u6536\u5230\u8fc7\u7684\u9488\u5bf9\u67d0\u4e2a\u5305\u7684\u5e94\u7b54(ACK)\u3002 \u8981\u5b9e\u73b0\u8d85\u65f6\u673a\u5236\u5c31\u8981\u786e\u5b9a\u8d85\u65f6\u65f6\u95f4\uff0c\u8981\u786e\u5b9a\u8d85\u65f6\u65f6\u95f4\u5c31\u9700\u8981\u77e5\u9053Round-Trip Time\u3002Round-Trip Time\u53ef\u4ee5\u901a\u8fc7\u4e4b\u524d\u53d1\u9001\u7684\u5305\u7684RTT\u8fdb\u884c\u4f30\u7b97\u3002\u6240\u4ee5\u8981\u5bf9\u4e4b\u524d\u53d1\u9001\u7684\u5305\u7684RTT\u8fdb\u884c\u91c7\u6837\u5f97\u5230SampleRTT\u3002\u8fd9\u91cc\u5e76\u4e0d\u662f\u9488\u5bf9\u6bcf\u4e00\u4e2a\u53d1\u9001\u51fa\u7684\u5305\u90fd\u8981\u8fdb\u884c\u91c7\u6837\uff0c\u800c\u662f\u6bcf\u5b8c\u6210\u4e00\u4e2aRTT\u91c7\u6837\u7d27\u63a5\u7740\u518d\u8fdb\u884c\u4e0b\u4e00\u6b21\u91c7\u6837\uff0c\u4e5f\u5c31\u662f\u6bcf\u9694\u4e00\u4e2aRTT\u7684\u65f6\u95f4\u6bb5\u91c7\u6837\u4e00\u6b21\u3002\u4f30\u7b97RTT\u7684\u516c\u5f0f\u4e3a EstimatedRTT = (1 \u2013 \u03b1) * EstimatedRTT + \u03b1 * SampleRTT \u9664\u4e86\u8981\u4f30\u7b97RTT\u8fd8\u8981\u8ba1\u7b97RTT\u7684\u53d8\u5316\u6027DevRTT\u3002\u6240\u8c13\u7684\u53d8\u5316\u6027\u5c31\u662fEstimatedRTT\u4e0eSampleRTT\u7684\u504f\u79bb\u7a0b\u5ea6\u3002\u516c\u5f0f\u5982\u4e0b\uff1a DevRTT = (1 \u2013 \u03b2) * DevRTT + \u03b2 * | SampleRTT \u2013 EstimatedRTT | \u5982\u679cSampleRTT\u7684\u6ce2\u52a8\u5f88\u5c0f\u90a3\u4e48DevRTT\u7684\u503c\u5c31\u5f88\u5c0f\uff0c\u53cd\u4e4b\u5c31\u5f88\u5927\u3002 \u6700\u7ec8\u8d85\u65f6\u65f6\u95f4\u5c31\u662fEstimatedRTT\u52a0\u4e0a\u4e00\u4e2a\u6ce2\u52a8\u7684margin\u503c\uff0c\u8fd9\u4e2amargin\u503c\u5c31\u662fDevRTT\uff0c TimeoutInterval = EstimatedRTT + 4 * DevRTT TimeoutInterval\u7684\u521d\u59cb\u503c\u662f1 second, \u6bcf\u6b21\u8d85\u65f6\u7684\u65f6\u5019TimeoutInterval\u7684\u503c\u90fd\u8981\u7ffb\u500d\uff0c\u4f46\u662f\u4e00\u65e6\u6536\u5230\u4e00\u4e2a\u65b0\u7684\u5e94\u7b54\u5305\uff0cTimeoutInterval\u5c31\u53c8\u8981\u7528\u4e0a\u9762\u7684\u516c\u5f0f\u8ba1\u7b97\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0cEstimating the Round-Trip Time\u7684\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b TimeoutInterval = 1; int EstimateTimeout() { \u03b1=0.125 \u03b2=0.25 EstimatedRTT = (1 \u2013 \u03b1) * EstimatedRTT + \u03b1 * SampleRTT DevRTT = (1 \u2013 \u03b2) * DevRTT + \u03b2 * | SampleRTT \u2013 EstimatedRTT | TimeoutInterval = EstimatedRTT + 4 * DevRTT return TimeoutInterval; } \u6709\u4e86\u8d85\u65f6\u65f6\u95f4\u5c31\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u4e86\uff0c\u8ba1\u65f6\u5668\u4e5f\u4e0d\u662f\u5bf9\u6bcf\u4e2a\u53d1\u51fa\u7684\u5305\u90fd\u8981\u8fdb\u884c\u8ddf\u8e2a\u8ba1\u65f6\uff0c\u800c\u662f\u53ea\u5bf9\u6700\u65e9\u7684(\u5e8f\u5217\u53f7\u6700\u5c0f\u7684)\u4e00\u4e2a\u672a\u5e94\u7b54\u5305\u8fdb\u884c\u8ba1\u65f6\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u53d1\u9001\u7aef\u7684\u4f2a\u4ee3\u7801, \u63cf\u8ff0\u4e86\u53d1\u9001\u5305\u65f6\u5b9a\u65f6\u5668\u7684\u542f\u52a8\uff0c\u4ee5\u53ca\u9488\u5bf9\u8d85\u65f6\u548c\u91cd\u590d\u5e94\u7b54\u7684\u5904\u7406\u3002 /* Assume sender is not constrained by TCP flow or congestion control, that data from above is less than MSS in size, and that data transfer is in one direction only. */ NextSeqNum=InitialSeqNumber SendBase=InitialSeqNumber TimeoutInterval=1s loop (forever) { switch(event) event: data received from application above create TCP segment with sequence number NextSeqNum if (timer currently not running) { start timer } pass segment to IP NextSeqNum=NextSeqNum+length(data) break; event: timer timeout retransmit not-yet-acknowledged segment with smallest sequence number TimeoutInterval *= 2; start timer break; event: ACK received, with ACK field value of y if (y > SendBase) { SendBase=y if (there are currently any not yet acknowledged segments) { TimeoutInterval = EstimateTimeout() ; start timer } } else { /* a duplicate ACK for already ACKed segment */ increment number of duplicate ACKs received for y if (number of duplicate ACKS received for y==3) /* TCP fast retransmit */ resend segment with sequence number y } break; } /* end of loop forever */ \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6bcf\u6b21\u53d1\u9001\u6570\u636e\u5982\u679c\u8ba1\u65f6\u5668\u6ca1\u6709\u542f\u52a8\u5c31\u8981\u542f\u52a8\u8ba1\u65f6\u5668\uff0c\u4e5f\u5c31\u662f\u8bf4\u8ba1\u65f6\u5668\u8ffd\u8e2a\u7684\u662f\u5df2\u7ecf\u53d1\u9001\u4e14\u672a\u5e94\u7b54\u5305\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5305\u3002\u6bcf\u5f53\u8d85\u65f6\u53d1\u751f\u65f6\u5c31\u8ba4\u4e3a\u8be5\u5305\u5df2\u7ecf\u4e22\u5931\u4e86\u6240\u4ee5\u8981\u8fdb\u884c\u91cd\u4f20\uff0c\u800c\u4e14\u8d85\u65f6\u65f6\u95f4\u8981\u8bbe\u4e3a\u539f\u6765\u7684\u4e24\u500d\uff0c\u5e76\u91cd\u65b0\u8ba1\u65f6\u3002\u5f53\u4e00\u4e2a\u5df2\u7ecf\u88ab\u5e94\u7b54\u8fc7\u7684\u5305\u53c8\u6536\u5230\u4e863\u6b21\u4ee5\u4e0a\u7684\u91cd\u590d\u5e94\u7b54\u4e5f\u8ba4\u4e3a\u8be5\u5305\u5df2\u7ecf\u4e22\u5931\u4e86\uff0c\u6240\u4ee5\u4e5f\u8981\u8fdb\u884c\u91cd\u4f20\u3002 \u63a5\u53d7\u7aef\u7684\u4ee3\u7801\u5982\u4e0b\uff1a loop (forever) { event: Arrival of segment if (segment is in-order ) { if (Arrival of segment that partially or completely fills in gap in received data.) { Immediately send ACK, provided that segment starts at the lower end of gap. return; } if(All data up to expected sequence number already acknowledged.) { Delayed ACK. Wait up to 500 msec for arrival of another in-order segment. If next in-order segment does not arrive in this interval, send an ACK. } else if (One other in-order segment waiting for ACK transmission.){ Immediately send single cumulative ACK, ACKing both in-order segments. } } else if(segment is out-of-order) { // with higher-than-expected sequence number. Gap detected. Immediately send duplicate ACK, indicating sequence number of next expected byte (which is the lower end of the gap). } } \u56e0\u4e3aTCP\u7684\u6bcf\u4e00\u4e2a\u7aef\u70b9\u65e2\u662f\u63a5\u53d7\u7aef\u4e5f\u662f\u53d1\u9001\u7aef\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d\u4e0a\u8ff0\u63a5\u53d7\u7aef\u548c\u53d1\u9001\u7aef\u662f\u8981\u6574\u5408\u5230\u4e00\u8d77\u7684\u3002","title":"\u53ef\u9760\u4f20\u8f93\uff08Reliable data transfer\uff09"},{"location":"network/tcp/#flow-control","text":"\u4e3a\u4ec0\u4e48\u9700\u8981Flow Control\uff0c\u4e66\u91cc\u7684\u8fd9\u6bb5\u8bdd\u505a\u4e86\u5f88\u597d\u89e3\u91ca\uff0c\u201cIf the application is relatively slow at reading the data, the sender can very easily overflow the connection\u2019s receive buffer by sending too much data too quickly. TCP provides a flow-control service to its applications to eliminate the possibility of the sender overflowing the receiver\u2019s buffer. Flow control is thus a speed matching service, matching the rate at which the sender is sending against the rate at which the receiving application is reading. \u201d Flow-Control \u5c31\u662f\u8981\u4fdd\u8bc1\u53d1\u9001\u7aef\u5df2\u7ecf\u53d1\u9001\u4f46\u672a\u5e94\u7b54\u7684\u6570\u636e\u91cf(outstanding bytes)\u5c0f\u4e8e\u63a5\u53d7\u7aef\u7a7a\u95f2\u7f13\u5b58(receive window)\u7684\u5927\u5c0f\u3002\u5373 outstanding bytes < receive window \u5173\u4e8eoutstanding bytes\u548creceive window\u8bf7\u53c2\u89c1\u6ed1\u52a8\u7a97\u53e3\u90a3\u4e00\u8282\u3002 \u5728\u8fd9\u4e2a\u65b9\u6848\u4e2d\u6709\u4e00\u4e2a\u5c0f\u7684\u6280\u672f\u95ee\u9898\u3002\u5047\u8bbe\u6709\u4e24\u4e2a\u7aef\u70b9A\u548cB\u4e92\u76f8\u901a\u4fe1\uff0c\u5e76\u5047\u8bbeB\u7684buffer\u5df2\u7ecf\u586b\u6ee1\u5373rwnd = 0\uff0c\u5f53B\u628arwnd = 0\u901a\u77e5\u7ed9A\u540e\uff0c\u5047\u8bbeB\u6ca1\u6709\u66f4\u591a\u7684\u4e1c\u897f\u8981\u53d1\u9001\u7ed9A\u4e86\u3002\u73b0\u5728\u8003\u8651\u4f1a\u53d1\u751f\u4ec0\u4e48\u4e8b\u60c5\u5462\uff1f\u5f53B\u6e05\u7a7a\u4e86buffer\u7684\u65f6\u5019\uff0cTCP\u6ca1\u6709\u53d1\u9001\u5e26\u6709\u65b0\u7684rwnd\u503c\u7684segment\u7ed9A\u3002\u56e0\u4e3a\u53ea\u6709\u5f53B\u6709\"\u6570\u636e\u6216\u5e94\u7b54\"\u8981\u53d1\u9001\u7684\u65f6\u5019\u624d\u4f1a\u53d1\u9001\u65b0\u7684segment\u3002\u6240\u4ee5A\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053B\u5df2\u7ecf\u91ca\u653e\u51fa\u4e86\u65b0\u7684\u7a7a\u95f2\u7f13\u5b58\u3002\u7aef\u70b9A\u5c31\u4f1a\u88ab\u5835\u585e\u5728\u90a3\u91cc\u4e0d\u4f1a\u53d1\u9001\u4efb\u4f55\u6570\u636e\uff01\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cTCP\u534f\u8bae\u6807\u51c6\u8981\u6c42\u7aef\u70b9A\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8981\u7ee7\u7eed\u53d1\u9001paylaod data \u4e3a\u4e00\u4e2a\u5b57\u8282\u5927\u5c0f\u7684segment\u7ed9B\u3002\u8fd9\u4e9bsegments\u4f1a\u88ab\u63a5\u53d7\u65b9B\u56de\u590d\uff0c\u5e76\u628a\u65b0\u7684rwnd\u901a\u77e5\u5230\u53d1\u9001\u65b9A\u3002","title":"\u6d41\u63a7\u5236 \uff08Flow Control\uff09"},{"location":"network/tcp/#congestion-control","text":"Packet retransmission \u53ef\u4ee5\u89e3\u51b3\u5305\u4e22\u5931\u7684\u95ee\u9898\u8fbe\u5230\u53ef\u9760\u4f20\u8f93\u7684\u76ee\u7684\uff0c \u4f46\u662f\u5305\u4e22\u5931\u53ea\u662f\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u4e0d\u662f\u95ee\u9898\u7684\u539f\u56e0\uff0cretransmission \u6cbb\u6807\u4e0d\u6cbb\u672c\u3002\u53d1\u751f\u4e22\u5305\u7684\u539f\u56e0\u4e00\u822c\u662f\u7f51\u7edc\u62e5\u5835\u9020\u6210\u7684\uff0c\u6240\u4ee5\u8981\u89e3\u51b3\u95ee\u9898\u7684\u539f\u56e0\u5c31\u662f\u89e3\u51b3\u7f51\u7edc\u62e5\u5835\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u8981\u964d\u4f4e\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002\u8fd9\u5c31\u5f15\u51fa\u4e86\u4e09\u4e2a\u95ee\u9898\u3002\u7b2c\u4e00\uff0cTCP\u5982\u4f55\u9650\u5236\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\uff1f\u7b2c\u4e8c\uff0cTCP\u53d1\u9001\u7aef\u5982\u4f55\u63a2\u6d4b\u5230\u81ea\u5df1\u5230\u63a5\u53d7\u7aef\u4e4b\u95f4\u7684\u8fd9\u6bb5\u8def\u5f84\u6709\u62e5\u5835\u73b0\u8c61\u53d1\u751f\uff1f\u7b2c\u4e09\uff0c\u5982\u679c\u63a2\u6d4b\u9053\u62e5\u5835\u73b0\u8c61\u53d1\u751f\u4e86\uff0c\u53d1\u9001\u65b9\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u7b56\u7565\u6765\u8c03\u6574\u5176\u53d1\u9001\u901f\u7387\u3002 \u9996\u5148\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898, TCP\u5982\u4f55\u9650\u5236\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002TCP\u7684\u53d1\u9001\u901f\u7387\u5c31\u7b49\u4e8e outstanding bytes / RTT , \u5728\u6ed1\u52a8\u7a97\u53e3\u90a3\u4e00\u8282\u4e2d\u5df2\u7ecf\u77e5\u9053 outstanding bytes = nextseqnum - base \uff0c\u6240\u4ee5\u53d1\u9001\u901f\u7387\u7684\u516c\u5f0f\u5982\u4e0b send rate = (nextseqnum - base) / RTT \u73b0\u5728\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u53d8\u91cfcongestion window\uff0c\u8868\u793a\u4e3acwnd\u3002\u53ef\u4ee5\u901a\u8fc7\u786e\u4fdd outstanding bytes <= min{cwnd, rwnd} \u6765\u7ea6\u675fTCP\u53d1\u9001\u7aef\u5411\u7f51\u7edc\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002\u901a\u8fc7\u8c03\u6574cwnd\u7684\u5927\u5c0f\uff0c\u53d1\u9001\u7aef\u53ef\u4f9d\u76f8\u5e94\u8c03\u6574\u5b83\u5411\u7f51\u7edc\u53d1\u9001\u6570\u636e\u7684\u901f\u7387\u3002 \u4e0b\u9762\u89e3\u51b3\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0cTCP\u53d1\u9001\u7aef\u5982\u4f55\u63a2\u6d4b\u5230\u81ea\u5df1\u5230\u63a5\u53d7\u7aef\u4e4b\u95f4\u7684\u8fd9\u6bb5\u8def\u5f84\u6709\u62e5\u5835\u73b0\u8c61\u53d1\u751f\uff1f\u5176\u5b9e\uff0c\u6709\u4e24\u4e2a\u8ff9\u8c61\u53ef\u4ee5\u8868\u660e\u53d1\u9001\u7aef\u5230\u63a5\u53d7\u7aef\u7684\u8def\u5f84\u4e0a\u4ea7\u751f\u62e5\u5835\u4e86\uff0c\u90a3\u5c31\u662f\u8d85\u65f6\u548c\u4e09\u6b21\u91cd\u590d\u5e94\u7b54\u3002 \u6700\u540e\u89e3\u51b3\u7b2c\u4e09\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u63a2\u6d4b\u9053\u62e5\u5835\u73b0\u8c61\u53d1\u751f\u4e86\uff0c\u53d1\u9001\u65b9\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u7b56\u7565\u6765\u8c03\u6574\u5176\u53d1\u9001\u901f\u7387\uff1f\u62e5\u5835\u63a7\u5236\u7b97\u6cd5\u6709\u4e09\u4e2a\u9636\u6bb5\u7ec4\u6210\u6216\u8005\u8bf4\u662f\u4e09\u79cd\u6a21\u5f0f (1) slow start, (2) congestion avoidance, and (3) fast recovery\u3002 Slow Start \u5f53TCP\u8fde\u63a5\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0ccwnd\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a1 MSS\uff08maximum sized segments\uff09\uff0c\u56e0\u6b64\u5b83\u7684\u521d\u59cb\u53d1\u9001\u901f\u7387\u5c31\u662f 1MSS/ RTT\u3002\u901a\u5e38\u53ef\u7528\u7684\u5bbd\u5e26\u662f\u8fdc\u8fdc\u5927\u4e8e 1MSS / RTT\u7684\uff0c\u56e0\u6b64\u8fd9\u65f6\u5019\u4e0d\u4f1a\u53d1\u9001\u4e22\u5305\uff0c\u53d1\u9001\u7aef\u6bcf\u6536\u5230\u4e00\u4e2a\u9488\u5bf9\u53d1\u51fa\u5305\u7684\u5e94\u7b54\uff0ccwnd\u5c31\u589e\u52a01MSS\u3002\u5f53\u7b2c\u4e00\u4e2a\u53d1\u9001\u7684\u5305\u6536\u5230\u5e94\u7b54\u540eTCP\u53d1\u9001\u7aef\u7684cwnd\u589e\u52a0\u4e00\u4e2aMSS\u7136\u540e\u53d1\u9001\u4e24\u4e2aMSS\u5927\u5c0f\u7684segments\u3002\u8fd9\u4e24\u4e2asegments\u4e5f\u90fd\u5206\u522b\u6536\u5230\u4e86\u5e94\u7b54\uff0c\u53d1\u9001\u65b9\u9488\u5bf9\u6bcf\u4e2a\u5e94\u7b54\u4e5f\u90fd\u4e3acwnd\u65b0\u589e1MSS\u5927\u5c0f\uff0c\u53d8\u62104MSS\u5927\u5c0f\u7684cwnd\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5bfc\u81f4\u6bcf\u9694 RTT \u7684\u65f6\u95f4\uff0ccwnd\u5c31\u7ffb\u4e00\u500d\uff0c\u53d1\u9001\u901f\u7387\u4e5f\u8ddf\u7740\u7ffb\u4e00\u500d\u3002\u6240\u4ee5\u5728slow start\u9636\u6bb5TCP\u7684\u53d1\u9001\u901f\u7387\u662f\u5448\u6307\u6570\u589e\u957f\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u6307\u6570\u589e\u957f\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\u5462\uff1f\u5728Slow Start\u9636\u6bb5\u6709\u4e09\u79cd\u60c5\u51b5\u4f1a\u5bfc\u81f4\u6570\u589e\u957f\u7ed3\u675f\u3002\u7b2c\u4e00\u662f\u5f53\u6709\u4e00\u4e2a\u8d85\u65f6\u6240\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0cTCP \u53d1\u9001\u7aef\u628acwnd\u8bbe\u7f6e\u4e3a1MSS\u5e76\u91cd\u65b0\u5f00\u59cbslow start\u7684\u8fc7\u7a0b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u8fd8\u4f1a\u628assthresh\uff08short hand for \u201cslow start threshold\u201d\uff09\u53d8\u91cf\u8bbe\u7f6e\u4e3acwnd/2\uff0c\u5373\u53d1\u73b0\u62e5\u5835\u65f6\u7684congestion window \u503c\u7684\u4e00\u534a\u3002\u7b2c\u4e8c\u79cd\u7ed3\u675f\u7684\u65b9\u5f0f\u662fSlow Start\u76f4\u63a5\u4e0essthresh\u7ed1\u5b9a\u3002\u7531\u4e8e\u4e0a\u6b21\u68c0\u6d4b\u5230\u62e5\u585e\u65f6 ssthresh \u662f cwnd \u503c\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u5f53 cwnd \u8fbe\u5230\u6216\u8d85\u8fc7 ssthresh \u7684\u503c\u65f6\u7ee7\u7eed\u52a0\u500d\u53ef\u80fd\u6709\u70b9\u9c81\u83bd\u3002\u56e0\u6b64\uff0c\u5f53 cwnd \u7684\u503c\u7b49\u4e8e ssthresh \u65f6\uff0c\u201cSlow Start\u201d\u9636\u6bb5\u7ed3\u675f\uff0c\u8fdb\u5165 \u201ccongestion avoidance\u201d\u9636\u6bb5\u3002 TCP \u5728 \u201ccongestion-avoidance\u201d \u9636\u6bb5\u4f1a\u66f4\u52a0\u8c28\u614e\u5730\u589e\u52a0 cwnd\u3002\u6162\u542f\u52a8\u7ed3\u675f\u7684\u6700\u540e\u4e00\u79cd\u65b9\u5f0f\u662f\u68c0\u6d4b\u5230\u4e09\u4e2a\u91cd\u590d\u7684 ACK\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cTCP \u6267\u884c \u201cfast retransmit\u201d \u5e76\u8fdb\u5165fast recovery\u72b6\u6001\u3002 Congestion Avoidance \u5728\u8fdb\u5165congestion-avoidance\u72b6\u6001\u65f6\uff0ccwnd \u7684\u503c\u5927\u7ea6\u662f\u4e0a\u6b21\u9047\u5230\u62e5\u585e\u65f6\u503c\u7684\u4e00\u534a\u3002 \u56e0\u6b64\uff0cTCP \u4e0d\u662f\u5728\u6bcf\u4e2a RTT \u65f6\u5c06 cwnd \u7684\u503c\u52a0\u500d\uff0c\u800c\u662f\u91c7\u7528\u66f4\u4fdd\u5b88\u7684\u65b9\u6cd5\u5e76\u5728\u6bcf\u4e2a RTT \u4e2d\u4ec5\u5c06 cwnd \u7684\u503c\u589e\u52a0\u4e00\u4e2a MSS\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f TCP \u53d1\u9001\u65b9\u5728\u63a5\u53d7\u5230acknowledgment\u65f6\uff0c\u5c06 cwnd \u589e\u52a0 MSS*(MSS/cwnd) \u5b57\u8282\u3002 \u4f8b\u5982\uff0c\u5982\u679c MSS \u4e3a 1,460 \u5b57\u8282\uff0ccwnd \u4e3a 14,600 \u5b57\u8282\uff0c\u90a3\u4e48\u5728\u4e00\u4e2a RTT \u5185\u6700\u591a\u53d1\u9001 10 \u4e2asegment\u3002 \u6bcf\u4e2a\u5230\u8fbe\u7684 ACK\uff08\u5047\u8bbe\u6bcf\u4e2a\u6bb5\u4e00\u4e2a ACK\uff09\u5c06\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\u589e\u52a0 1/10 MSS\uff0c\u56e0\u6b64\uff0c\u5f53\u6536\u5230\u6240\u6709 10 \u4e2a\u6bb5\u7684ACK\u540e\uff0c\u62e5\u585e\u7a97\u53e3\u7684\u503c\u5c06\u589e\u52a0\u4e00\u4e2a MSS\u3002 \u4f46\u662f\uff0ccongestion avoidance\u7684\u7ebf\u6027\u589e\u957f\uff08\u6bcf\u4e2a RTT 1 MSS\uff09\u4f55\u65f6\u7ed3\u675f\uff1f\u7b54\u6848\u540c\u6837\u662f\u5728\u7531\u201c\u8d85\u65f6\u548c\u91cd\u590d\u5e94\u7b54\u201d\u6240\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u53d1\u751f\u65f6\u7ed3\u675f\u3002 \u4ea7\u751f\u201c\u8d85\u65f6\u201d\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u65f6\uff0cTCP \u7684 congestion-avoidance\u7b97\u6cd5\u7684\u5904\u7406\u65b9\u5f0f\u4e0eslow start\u7684\u60c5\u51b5\u76f8\u540c\uff1acwnd \u7684\u503c\u8bbe\u7f6e\u4e3a 1 MSS\uff0c\u5e76\u5c06 ssthresh \u7684\u503c\u66f4\u65b0\u4e3a cwnd \u503c\u7684\u4e00\u534a\u3002\u4ea7\u751f\u201c\u4e09\u6b21\u91cd\u590d\u7684 ACK\u201d\u6240\u8868\u660e\u7684\u4e22\u5305\u4e8b\u4ef6\u65f6\uff0cTCP\u7684\u5904\u7406\u65b9\u5f0f\u6ca1\u6709\u4e0e\u201c\u8d85\u65f6\u201d\u6240\u6307\u793a\u7684\u4e22\u5305\u4e8b\u4ef6\u90a3\u4e48\u5267\u70c8\uff0c\u800c\u662f\u5c06cwnd\u7684\u503c\u51cf\u534a\uff08\u589e\u52a03\u4e2a MSS \u4ee5\u4f5c\u4e3a\u6536\u5230\u7684\u4e09\u6b21\u91cd\u590d ACK \u7684\u8003\u91cf\uff09\u5e76\u8bbe\u7f6e ssthresh \u7684\u503c\u4e3a\u6536\u5230\u4e09\u6b21\u91cd\u590d\u7684 ACK \u65f6\u7684 cwnd \u503c\u7684\u4e00\u534a\u3002 \u7136\u540e\u8fdb\u5165fast recovery\u72b6\u6001\u3002 Fast Recovery \u5728fast recovery\u9636\u6bb5\uff0c\u9488\u5bf9\u4e22\u5931\u7684segment\uff0c\u6bcf\u6536\u5230\u4e00\u4e2a\u91cd\u590d\u7684 ACK\uff0ccwnd \u7684\u503c\u5c31\u4f1a\u589e\u52a0 1 MSS\u3002\u6700\u7ec8\uff0c\u5f53\u4e22\u5931\u7684segment\u7684 ACK \u5230\u8fbe\u65f6\uff0cTCP \u8fdb\u5165congestion-avoidance\u9636\u6bb5\u3002\u4e0eslow start \u548ccongestion-avoidance\u76f8\u540c\uff0c\u53d1\u751f\u8d85\u65f6\u4e8b\u4ef6\u65f6\uff0ccwnd \u7684\u503c\u8bbe\u7f6e\u4e3a 1 MSS\uff0cssthresh \u7684\u503c\u8bbe\u7f6e\u4e3a\u8d85\u65f6\u4e8b\u4ef6\u53d1\u751f\u65f6cwnd\u503c\u7684\u4e00\u534a\uff0c\u8fdb\u5165slow start\u72b6\u6001\uff1a\u3002 \u5173\u4e8eTCP\u7684congestion control\u7684\u72b6\u6001\u8f6c\u6362\u56fe\u5982\u4e0b\uff1a \u7ed9\u524d\u9762Reliable data transfer\u90a3\u4e00\u8282\u7684\u53d1\u9001\u7aef\u7684\u4f2a\u4ee3\u7801\u52a0\u5165congestion control\u7684\u903b\u8f91\uff0c \u5982\u4e0b MSS=500 NextSeqNum=InitialSeqNumber SendBase=InitialSeqNumber cwnd=MSS DupAckCount=0 ssthresh=64KB TimeoutInterval=1s function bytes_in_flight(){ return NextSeqNum - SendBase; } function window(){ reutrn min(cwnd, rwnd == 0 \uff1f 1 : cwnd); } loop (forever) { switch(event) event: data received from application above while(stream has more data) { create TCP segment with sequence number NextSeqNum segment.payload = stream.read(min(window() - bytes_in_flight(), MAX_PAYLOAD_SIZE); if (timer currently not running) { start timer } pass segment to IP NextSeqNum=NextSeqNum+length(segment.payload) } break; event: timer timeout // entry slow-start ssthresh=cwnd/2 cwnd = 1 MSS DupAckCount = 0 retransmit not-yet-acknowledged segment with smallest sequence number TimeoutInterval *= 2; start timer break; event: ACK received, with ACK field value of y if (y > SendBase) { SendBase=y if(DupAckCount > 3){ // fast-recovery transitions to congestion-avoidence cwnd = ssthresh; } else { if(cwnd > ssthresh){ // in congetion avoidence cwnd += MSS*(MSS/cwnd) } else { // in slow start cwnd += MSS } } DupAckCount = 0 if (there are currently any not yet acknowledged segments) { TimeoutInterval = EstimateTimeout() ; start timer } } else { /* a duplicate ACK for already ACKed segment */ DupAckCount++; if (DupAckCount==3){ // entry fast-recovery ssthresh = cwnd/2 cwnd = ssthresh + 3 MSS /* TCP fast retransmit */ resend segment with sequence number y } else if (DupAckCount > 3) { // in fast-recovery cwnd += MSS } } break; } /* end of loop forever */","title":"\u62e5\u5835\u63a7\u5236 \uff08Congestion Control\uff09"},{"location":"network/tcp/#tcp-connection-managementconnectionconnection","text":"\u5173\u4e8eTCP\u7684\u5efa\u7acb\u8fde\u63a5\u7684\u4e09\u8def\u63e1\u624b(three-way handshake)\u548c\u5173\u95ed\u8fde\u63a5\u7684\u56db\u8def\u6325\u624b\u662f\u8001\u9ec4\u5386\u4e86\uff0c\u76f4\u63a5\u4e0a\u793a\u610f\u56fe\u5c31\u80fd\u660e\u767d\u4e86,\u5982\u679c\u4e00\u4e2a\u4e0d\u591f\u5c31\u591a\u4e0a\u51e0\u4e2a The TCP Finite State Machine \u793a\u610f\u56fe\u5982\u4e0b TCP connection\u7684\u5efa\u7acb\u548c\u5173\u95ed\u7684\u793a\u610f\u56fe\u5982\u4e0b \u53e6\u5916\u8fd9\u7bc7 \u535a\u6587 \u5bf9TCP\u8fde\u63a5\u768411\u79cd\u72b6\u6001\u505a\u4e86\u5f88\u597d\u7684\u5206\u6790\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\u90a3\u4e2aTIME_WAIT\u72b6\u6001\uff0cTCP\u4e3b\u52a8\u5173\u95ed\u7684\u4e00\u7aef\u8981\u5728\u8fd9\u4e2a\u72b6\u6001\u4fdd\u63012\u500d\u7684MSL\uff08\u6700\u5927\u6bb5\u751f\u5b58\u671f\uff09\u624d\u4f1a\u7ed3\u675f\u3002\u4e4b\u6240\u4ee5\u8fd9\u6837\u505a\u6709\u4e24\u4e2a\u539f\u56e0\uff0c\u4e00\u662f\u5f53\u88ab\u52a8\u5173\u95ed\u7684\u4e00\u7aef\u4e5f\u53d1\u9001FIN\u7ed9\u4e3b\u52a8\u5173\u95ed\u7684\u4e00\u7aef\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e3b\u52a8\u7aef\u6536\u5230\u4e86\u4f1a\u56de\u590d\u4e00\u4e2aACK, \u4f46\u662f\u4e3b\u52a8\u7aef\u65e0\u6cd5\u83b7\u77e5\u88ab\u52a8\u7aef\u662f\u5426\u6536\u5230\u4e86\u8fd9\u4e2aACK\uff0c\u56e0\u4e3a\u6ca1\u6709\u9488\u5bf9ACK\u7684ACK\u3002\u5047\u82e5\u88ab\u52a8\u7aef\u6ca1\u6709\u6536\u5230ACK\uff0c\u5c31\u4f1a\u91cd\u590d\u53d1\u9001FIN\uff0c\u6240\u4ee5\u4e3b\u52a8\u7aef\u8981\u7b49\u5f85\u4e00\u7aef\u65f6\u95f4\u5982\u679c\u6ca1\u6709\u6536\u5230\u91cd\u590d\u7684FIN\u5c31\u786e\u8ba4\u5bf9\u65b9\u786e\u5b9e\u6536\u5230\u4e86\u9488\u5bf9FIN\u7684ACK\u4e86\uff0c\u53cd\u4e4b\u5982\u679c\u6536\u5230\u4e86\u91cd\u590d\u7684FIN\u5c31\u7ee7\u7eed\u56de\u590dACK\u3002\u4e8c\u662f\uff0c\u5047\u8bbe\u5728\u4e3b\u673a12.106.32.254\u76841500\u7aef\u53e3\u548c206.168.112.219\u768421\u7aef\u53e3\u4e4b\u95f4\u6709\u4e00\u4e2aTCP\u8fde\u63a5\u3002\u6b64\u8fde\u63a5\u5173\u95ed\u540e\uff0c\u5728\u76f8\u540c\u7684\u5730\u5740\u548c\u7aef\u53e3\u5efa\u7acb\u4e86\u53e6\u5916\u4e00\u4e2a\u8fde\u63a5\u3002\u7531\u4e8eIP\u5730\u5740\u548c\u7aef\u53e3\u76f8\u540c\uff0c\u6240\u4ee5\u540e\u4e00\u79cd\u8fde\u63a5\u88ab\u79f0\u4e3a\u5148\u524d\u8fde\u63a5\u7684\u201c\u5316\u8eab\u201d\u3002TCP\u5fc5\u987b\u9632\u6b62\u8fde\u63a5\u4e2d\u7684\u65e7\u526f\u672c\u5728\u7a0d\u540e\u518d\u6b21\u51fa\u73b0\uff0c\u5e76\u88ab\u8bef\u89e3\u4e3a\u5c5e\u4e8e\u540c\u4e00\u8fde\u63a5\u7684\u65b0\u201c\u5316\u8eab\u201d\u3002\u4e3a\u6b64\uff0cTCP\u5c06\u4e0d\u4f1a\u542f\u52a8\u5f53\u524d\u5904\u4e8eTIME_WAIT\u72b6\u6001\u7684\u8fde\u63a5\u7684\u65b0\u201c\u5316\u8eab\u201d\u3002\u7531\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u53d1\u9001\u7684\u6570\u636e\u5305\u4f1a\u5728MSL\u7684\u65f6\u95f4\u540e\u8fc7\u671f\uff0c\u56e0\u6b64 2 MSL\u4fdd\u8bc1\u4e86\u4e00\u4e2aRound-Trip\uff08\u53d1\u9001\u4e0e\u56de\u590d\uff09\u7684\u6570\u636e\u90fd\u4f1a\u8fc7\u671f\u3002\u901a\u8fc7\u5f3a\u5236\u6267\u884c\u6b64\u89c4\u5219\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u4e00\u4e2aTCP\u8fde\u63a5\u6210\u529f\u5efa\u7acb\u65f6\uff0c\u6765\u81ea\u5148\u524d\u8fde\u63a5\u7684\u6240\u6709\u65e7\u7684\u526f\u672c\u5728\u7f51\u7edc\u4e2d\u5df2\u8fc7\u671f\u3002 \u8fd8\u6709\u4e00\u4e9b\u7279\u6b8a\u4f46\u662f\u4e0d\u5e38\u89c1\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u4e24\u7aef\u540c\u65f6\u53d1\u9001SYN\u5efa\u7acb\u8fde\u63a5\uff0c\u6216\u540c\u65f6\u53d1\u9001FIN\u5173\u95ed\u8fde\u63a5\uff0c\u8fd9\u91cc\u6709\u4e00\u7bc7 \u535a\u6587 \u5bf9\u8005\u4e24\u79cd\u60c5\u51b5\u505a\u4e86\u5f88\u597d\u7684\u5206\u6790\uff0c\u6211\u76f4\u63a5\u642c\u8fc7\u6765\u4e86\u3002","title":"TCP  Connection Management\u2014\u2014\u2014Connection\u5efa\u7acb\uff0cConnection\u5173\u95ed\uff0c\u72b6\u6001\u8f6c\u6362"},{"location":"network/tcp/#1-simultaneous-open","text":"It's possible for two applications to send a SYN to each other to start a TCP connection, although the possibility is small, because both sides have to know which port on the other side to send to. This process is called \"Simultaneous Open\", or \"simultaneous active open on both sides\". For example: An application at host A uses 7777 as the local port and connects to port 8888 on host B. At the same time, an application at host B uses 8888 as the local port and connects to port 7777 on host A. This is \"Simultaneous Open\". TCP is specially designed to deal with \"Simultaneous Open\", during which only one TCP connection is established, not two. The state transitions are shown in the following figure: During \"Simultaneous Open\", 4 packets are exchanged, 1 packet more than in normal situations.","title":"1. Simultaneous Open"},{"location":"network/tcp/#2-simultaneous-close","text":"It's permitted in TCP for both sides to do \"active close\", which is called \"Simultaneous Close\". The state transitions are shown in the following figure: During \"Simultaneous Close\", 4 packets are exchanged, the same as in normal situations.","title":"2. Simultaneous Close"},{"location":"xv6/","text":"\u7b80\u4ecb xv6\u662fMIT\u7f16\u5199\u7684\u4e00\u4e2a\u4f9b\u5b66\u4e60\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8ddflinux\u76f8\u6bd4\u5b83\u7684\u4ee3\u7801\u91cf\u5f88\u5c0f\u3002\u7136\u800c\u201c\u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168\u201d\uff0c\u5373\u4f7f\u8fd9\u6837\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u4f9d\u7136\u5f88\u5177\u6709\u6311\u6218\u6027\uff0c\u6240\u4ee5\u6211\u6839\u636e\u81ea\u5df1\u7684\u5b66\u4e60\u4f53\u4f1a\u5199\u4e86\u8fd9\u4e00\u7cfb\u5217\u7684\u5173\u4e8exv6\u7684\u7b14\u8bb0,\u4e00\u65b9\u9762\u662f\u4e3a\u4e86\u52a0\u6df1\u81ea\u5df1\u7684\u8bb0\u5fc6\uff0c\u518d\u5c31\u662f\u7ed9\u5176\u4ed6\u5b66\u4e60\u8005\u63d0\u4f9b\u4e00\u4e9b\u53c2\u8003\u3002 \u7cfb\u7edf\u6e90\u7801\u5730\u5740\uff1a https://github.com/mit-pdos/xv6-public \u76f8\u5173\u8bfe\u7a0b\uff1a https://pdos.csail.mit.edu/6.828/2018/schedule.html \u5b66\u4e60\u7b14\u8bb0\uff1a Boot loader Entry kernel Scheduler \u7b2c\u4e00\u4e2a\u8fdb\u7a0b \u4e2d\u65ad\u5904\u7406\u6d41\u7a0b \u7cfb\u7edf\u8c03\u7528 \u65f6\u95f4\u4e2d\u65ad \u786c\u76d8\u4e2d\u65ad \u6587\u4ef6\u7cfb\u7edf \u8bbe\u5907\u7ba1\u7406 Reference: \u89c6\u9891\u6559\u7a0b\uff1a\u7f57\u79cb\u660e Intel 80386 Reference Programmer's Manual","title":"xv6\u7b80\u4ecb"},{"location":"xv6/#_1","text":"xv6\u662fMIT\u7f16\u5199\u7684\u4e00\u4e2a\u4f9b\u5b66\u4e60\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8ddflinux\u76f8\u6bd4\u5b83\u7684\u4ee3\u7801\u91cf\u5f88\u5c0f\u3002\u7136\u800c\u201c\u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168\u201d\uff0c\u5373\u4f7f\u8fd9\u6837\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\u4f9d\u7136\u5f88\u5177\u6709\u6311\u6218\u6027\uff0c\u6240\u4ee5\u6211\u6839\u636e\u81ea\u5df1\u7684\u5b66\u4e60\u4f53\u4f1a\u5199\u4e86\u8fd9\u4e00\u7cfb\u5217\u7684\u5173\u4e8exv6\u7684\u7b14\u8bb0,\u4e00\u65b9\u9762\u662f\u4e3a\u4e86\u52a0\u6df1\u81ea\u5df1\u7684\u8bb0\u5fc6\uff0c\u518d\u5c31\u662f\u7ed9\u5176\u4ed6\u5b66\u4e60\u8005\u63d0\u4f9b\u4e00\u4e9b\u53c2\u8003\u3002 \u7cfb\u7edf\u6e90\u7801\u5730\u5740\uff1a https://github.com/mit-pdos/xv6-public \u76f8\u5173\u8bfe\u7a0b\uff1a https://pdos.csail.mit.edu/6.828/2018/schedule.html","title":"\u7b80\u4ecb"},{"location":"xv6/#_2","text":"Boot loader Entry kernel Scheduler \u7b2c\u4e00\u4e2a\u8fdb\u7a0b \u4e2d\u65ad\u5904\u7406\u6d41\u7a0b \u7cfb\u7edf\u8c03\u7528 \u65f6\u95f4\u4e2d\u65ad \u786c\u76d8\u4e2d\u65ad \u6587\u4ef6\u7cfb\u7edf \u8bbe\u5907\u7ba1\u7406","title":"\u5b66\u4e60\u7b14\u8bb0\uff1a"},{"location":"xv6/#reference","text":"\u89c6\u9891\u6559\u7a0b\uff1a\u7f57\u79cb\u660e Intel 80386 Reference Programmer's Manual","title":"Reference:"},{"location":"xv6/boot_loader/","text":"The Boot Loader x86 \u7684\u542f\u52a8 \u770b\u5177\u4f53\u7684\u4ee3\u7801\u524d\u5148\u8bf4\u8bf4 x86 \u67b6\u6784\u5f00\u673a\u5f15\u5bfc\u7684\u76f8\u5173\u77e5\u8bc6\u3002\u4ece\u7ed9 x86 \u901a\u7535\u7684\u4e00\u523b\u5f00\u59cb\uff0cCPU \u6267\u884c\u7684\u7b2c\u4e00\u6bb5\u6307\u4ee4\u662f BIOS \u56fa\u5316\u5728 ROM \u4e0a\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u786c\u4ef6\u5b9a\u6b7b\u7684\u89c4\u77e9\uff0c\u5c31\u662f\u8fd9\u6837\u3002 \u800c BIOS \u5728\u786c\u4ef6\u81ea\u68c0\u5b8c\u6210\u540e\u4f1a\u6839\u636e\u4f60\u5728 BIOS \u91cc\u8bbe\u7f6e\u7684\u542f\u52a8\u987a\u5e8f\uff08\u786c\u76d8\u3001\u5149\u9a71\u3001USB\uff09\u8bfb\u53d6\u6bcf\u4e2a\u5f15\u5bfc\u8bbe\u5907\u7684\u7b2c\u4e00\u4e2a\u6247\u533a 512\u5b57\u8282\u7684\u5185\u5bb9\uff0c\u5e76\u5224\u65ad\u8fd9\u6bb5\u5185\u5bb9\u7684\u6700\u540e 2 \u5b57\u8282\u662f\u5426\u4e3a 0xAA55\uff0c\u5982\u679c\u662f\u8bf4\u660e\u8fd9\u4e2a\u8bbe\u5907\u662f\u53ef\u5f15\u5bfc\u7684\uff0c\u4e8e\u662f\u5c31\u5c06\u8fd9 512 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5185\u5b58\u7684 0x7c00\uff0c\u7136\u540e\u544a\u8bc9 CPU \u53bb\u6267\u884c\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6307\u4ee4\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u540c\u6837\u662f\u786c\u4ef6\u5b9a\u6b7b\u7684\u89c4\u77e9\uff0c\u5c31\u662f\u8fd9\u6837\u3002 \u6709\u4e86\u4e0a\u9762\u7684\u4ecb\u7ecd\u6211\u4eec\u518d\u56de\u5230 xv6 \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u7f16\u8bd1\u751f\u6210\u7684 bootblock \u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f60\u4f1a\u60ca\u559c\u7684\u53d1\u73b0\u5b83\u7684\u6587\u4ef6\u5927\u5c0f\u521a\u597d\u662f 512 \u5b57\u8282\u3002\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\uff08\u6211\u5728 Mac OSX \u4e0b\u7528\u7684\u662f 0xED \u8fd9\u4e2a\u8f6f\u4ef6\uff09\u6253\u5f00 bootblock \u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f60\u53c8\u4f1a\u53d1\u73b0\u8fd9\u4e2a 512 \u5b57\u8282\u7684\u6587\u4ef6\u7684\u6700\u540e\u4e24\u5b57\u8282\u6b63\u597d\u662f 0xAA55\u3002 \u770b\u4e00\u4e0bMakefile \u4e2d bootblock\u7684\u7684\u751f\u6210\u4ee3\u7801 bootblock: bootasm.S bootmain.c $(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c $(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S $(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o $(OBJDUMP) -S bootblock.o > bootblock.asm $(OBJCOPY) -S -O binary -j .text bootblock.o bootblock ./sign.pl bootblock $(LD)\u94fe\u63a5\u547d\u4ee4\u8d1f\u8d23\u628a'.o'\u6587\u4ef6\u94fe\u63a5\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u4e0a\u9762\u8bf4\u8fc7BIOS\u4f1a\u628a\u5f15\u5bfc\u6247\u533a\uff08boot sector\uff09\u91cc\u7684boot loader \u52a0\u8f7d\u52300x7C00\u7684\u5185\u5b58\u5730\u5740\u4e0a\uff0c\u8fd9\u4e5f\u662fboot loader\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9,\u8fd9\u91cc\u7684 -Ttext 0x7C00 \u5c31\u662f\u544a\u8bc9\u94fe\u63a5\u5668\u4ee3\u7801\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u662f0x7C00\uff0c \u8fd9\u6837\u94fe\u63a5\u5668\u5c31\u53ef\u4ee5\u5728\u4ea7\u751f\u7684\u4ee3\u7801\u4e2d\u751f\u6210\u6b63\u786e\u7684\u5185\u5b58\u5730\u5740\u3002\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5165\u53e3\u662f start(\u901a\u8fc7 -e start \u8bbe\u5b9a)\u3002\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u662fELF\u683c\u5f0f\u7684\uff0c\u4f46\u662f\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u8fd8\u672a\u88ab\u52a0\u8f7d\u8fd0\u884c\u65e0\u6cd5\u8bc6\u522bELF\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u6240\u4ee5$(OBJCOPY)\u547d\u4ee4\u628abootblock.o\u8fd9\u4e2aELF\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6bb5\uff08 -j .text \uff09\u6309\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff08 -O binary \uff09\u62f7\u8d1d\u5230bootblock\u6587\u4ef6\u4e2d\u3002./sign.pl\u8fd9\u4e2a\u547d\u4ee4\u8d1f\u8d23\u628a boot loader \u6587\u4ef6bootblock\u586b\u5145\u4e3a512\u4e2a\u5b57\u8282\u5927\u5c0f\uff0c\u7136\u540e\u628a\u672b\u5c3e\u4e24\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a 0xAA55 \u4f5c\u4e3a\u5f15\u5bfc\u6247\u533a\u7684\u6807\u793a\u3002 \u5728 xv6.img \u7684\u751f\u6210\u4ee3\u7801\u4e2d xv6.img: bootblock kernel fs.img dd if=/dev/zero of=xv6.img count=10000 dd if=bootblock of=xv6.img conv=notrunc dd if=kernel of=xv6.img seek=1 conv=notrunc \u53ef\u4ee5\u53d1\u73b0xv6.img \u5c31\u662f\u628abootblock\u548ckernel\u62fc\u63a5\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\u662f10000\u4e2a\u6247\u533a \uff08count=10000\uff09\uff0cbootbloack\u5728\u7b2c\u4e00\u4e2a\u6247\u533a\uff0ckernel\u88ab\u62fc\u63a5\u5230\u7b2c\u4e00\u4e2a\u6247\u533a\u540e\u8fb9\uff08seek=1\uff09\u3002 \u8fdb\u5165Boot Loader \u5728\"x86 \u7684\u542f\u52a8\"\u4e00\u8282\u4e2d\u8bb2\u5230BIOS\u4f1a\u628aboot loader\u52a0\u8f7d\u5230\u5185\u5b58\u76840x7c00\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u53bb\u6267\u884cboot loader\u4ee3\u7801\u3002\u6b64\u65f6\u63a7\u5236\u6743\u5df2\u7ecf\u4ea4\u7ed9boot loader\u4e86. boot loader\u4e3b\u8981\u5b8c\u6210\u4e86\u4e24\u4e2a\u529f\u80fd\uff1a \u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff1a\u4ece20\u4f4d\uff081M\uff09\u5bfb\u5740\u5b9e\u6a21\u5f0f\u5207\u6362\u523032\u4f4d(4G)\u5bfb\u5740\u7684\u4fdd\u62a4\u6a21\u5f0f \u52a0\u8f7d\u5185\u6838\uff1a\u6839\u636eELF\u5185\u6838\u6587\u4ef6\u6240\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740\uff0c\u4ece\u786c\u76d8\u4e2d\u628a\u5185\u6838\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5185\u6838ELF\u6587\u4ef6\u6240\u5730\u5740\u7684\u5165\u53e3\u70b9\u3002 \u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f \u9996\u5148\u7406\u89e3\u4e00\u4e0b\u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f\u3002\u5982\u679c\u8bf4\u8fdb\u7a0b\u662f\u5bf9CPU\u7684\u62bd\u8c61\uff0c\u6587\u4ef6\u662f\u5bf9\u786c\u76d8\u7684\u62bd\u8c61\uff0c\u90a3\u4e48\u865a\u62df\u5185\u5b58\u5c31\u662f\u5bf9\u7269\u7406\u5185\u5b58\u7684\u62bd\u8c61\u3002\u5b9e\u9645\u4e0a\u8ba1\u7b97\u673a\u7f16\u7a0b\u9762\u5bf9\u7684\u90fd\u662f\u865a\u62df\u5185\u5b58\uff0c\u4e5f\u5c31\u662f\u8bf4\u7f16\u7a0b\u65f6\u5b58\u53d6\u6570\u636e\u7684\u5730\u5740\u90fd\u662f\u865a\u62df\u5730\u5740\uff08\u4e5f\u5373\u903b\u8f91\u5730\u5740\uff09\uff0cCPU\u628a\u865a\u62df\u5730\u5740\u4ea4\u7ed9MMU\uff08Memery management unit\uff09\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u518d\u53bb\u8bbf\u95ee\u7269\u7406\u5185\u5b58\u3002\u5176\u5b9e\u8fd9\u91cc\u8bf4\u7684\u5185\u5b58\u662f\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\uff08Adress Space\uff09\u5e76\u4e0d\u5355\u6307\u5b58\u53d6\u6570\u636e\u7684\u5185\u5b58\uff0c\u4e5f\u5305\u62ec\u4e00\u4e9b\u5916\u90e8\u8bbe\u5907\u6bd4\u5982\u663e\u793a\u5668/\u952e\u76d8\u7b49\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u8fd9\u4e9b\u5916\u90e8\u8bbe\u5907\u8bfb\u5199\u4e5f\u662f\u88ab\u5f71\u5c04\u5230\u7279\u5b9a\u7684\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u4e0a\u3002 \u5b9e\u6a21\u5f0f\u4e0bMMU\u4e0d\u4f1a\u8fdb\u884c\u5730\u5740\u8f6c\u6362\u4e5f\u5c31\u662f\u8bf4\u865a\u62df\u5730\u5740\u7b49\u4e8e\u7269\u7406\u5730\u5740\u3002\u5b9e\u6a21\u5f0f\u5bfb\u5740\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b 16 \u2217 selector + offset \u7b2c\u4e00\u4e2a16\u4f4d\u7684\u503c\u53eb\u505aselector\u662f\u5b58\u50a8\u5728\u6bb5\u5bc4\u5b58\u5668\u91cc\u7684\uff0c\u7b2c\u4e8c\u4e2a16\u4f4d\u7684\u503c\u53eb\u505aoffset.\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u8868\u793a\u5462\uff1f\u539f\u6765\u65e9\u671f\u82f1\u7279\u5c14\u7684 8086 CPU \u662f 16 \u4f4d\u7684\uff0c\u5982\u679c\u76f4\u63a5\u7528\u6765\u8868\u793a\u5185\u5b58\u5730\u5740\u7684\u8bdd\uff0c16 \u4f4d\u6700\u5927\u53ef\u4ee5\u8868\u793a\u7684\u5185\u5b58\u5730\u5740\u662f 2^16 = 65536 \u4e2a\u5730\u5740\uff0c\u6bcf\u4e2a\u5730\u5740\u4ee3\u8868\u4e00\u5b57\u8282\u7684\u5185\u5b58\u6570\u636e\u7684\u8bdd\uff0c16 \u4f4d\u6700\u591a\u53ea\u80fd\u652f\u6301 64KB \u5185\u5b58\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u591f\u7528\u7684\u3002\u4e8e\u662f\u82f1\u7279\u5c14\u5728\u4fdd\u6301\u6570\u636e\u7ebf\u5bbd\u4e3a 16 \u4f4d\u7684\u540c\u65f6\u5c06\u5730\u5740\u7ebf\u7684\u5bbd\u5ea6\u589e\u5927\u5230 20 \u4f4d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5185\u5b58\u5730\u5740\u662f 20 \u4f4d\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u652f\u6301 2^20 = 1MB \u7684\u5185\u5b58\uff0c\u5f53\u65f6\u7684\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\u3002\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c16 \u4f4d\u7684\u6570\u636e\u7ebf\u5bbd\uff08\u5bc4\u5b58\u5668\u81ea\u7136\u4e5f\u662f 16 \u4f4d\u7684\uff09\u5982\u4f55\u80fd\u8868\u793a 20 \u4f4d\u7684\u5730\u5740\u5462\uff1f\u7b54\u6848\u662f\u7528\u4e24\u4e2a 16 \u4f4d\u7684\u5bc4\u5b58\u5668\u6765\u8868\u793a\u3002\u8fd9\u5c31\u662f\u201c\u6bb5\u57fa\u5740\u201d + \u201c\u504f\u79fb\u91cf\u201d\u5bfb\u5740\u65b9\u5f0f\u7684\u7531\u6765\u3002\u4e00\u4e2a 16 \u4f4d\u7684\u5bc4\u5b58\u5668\u6765\u8868\u793a\u201c\u6bb5\u57fa\u5740\u201d\uff08CS\u3001DS\u3001SS\u3001ES\u56db\u4e2a\u5bc4\u5b58\u5668\uff09\uff0c\u5177\u4f53\u7684\u505a\u6cd5\u662f\u5148\u5c06 16 \u4f4d\u7684\u201c\u6bb5\u57fa\u5740\u201d\u5de6\u79fb 4 \u4f4d\uff0c\u7136\u540e\u52a0\u4e0a 16 \u4f4d\u7684\u201c\u504f\u79fb\u91cf\u201d\u6700\u7ec8\u5f97\u5230 20 \u4f4d\u7684\u5185\u5b58\u5730\u5740\u9001\u5165\u5730\u5740\u7ebf\u3002 \u4fdd\u62a4\u6a21\u5f0f\u4e0b\u9762\u5bf9\u7684\u662f\u865a\u62df\u5730\u5740\uff0cCPU\u8fdb\u884c\u5b58\u53d6\u6570\u636e\u65f6\u865a\u62df\u5730\u5740\u4f1a\u88ab\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u7136\u540e\u518d\u53bb\u8bbf\u95ee\u5185\u5b58\u3002\u4fdd\u62a4\u6a21\u5f0f\u5206\u4e3a\u4e24\u79cd\uff0c\u6bb5\u4fdd\u5b58\u6a21\u5f0f\u548c\u9875\u4fdd\u62a4\u6a21\u5f0f\u3002 \u6bb5\u4fdd\u62a4\u6a21\u5f0f\u9700\u8981\u7ef4\u62a4\u4e00\u5f20\u5168\u5c40\u63cf\u8ff0\u7b26\u8868(GDT)\uff0cGDT\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u6bb5\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u548c\u957f\u5ea6\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u4fdd\u62a4\u4f4d\u3002\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u544a\u8bc9CPU GDT\u6240\u5728\u7684\u5730\u5740\uff0cCPU\uff08MMU\uff09\u901a\u8fc7CS\u6bb5\u5bc4\u5b58\u5668\u7684\u6bb5\u5730\u5740\u7d22\u5f15\u5230\u67d0\u4e00\u6761\u6bb5\u8868\u8bb0\u5f55\uff0c\u627e\u5230\u5bf9\u5e94\u6bb5\u7684\u6bb5\u7269\u7406\u5730\u5740\uff0c\u518d\u52a0\u4e0aIP\u5bc4\u5b58\u5668\u7684\u504f\u79fb\u91cf\u5c31\u5f97\u5230\u4e86\u7269\u7406\u5730\u5740\u3002\u66f4\u591a\u5173\u4e8eMemory segmentation\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003(wikipedia)[https://en.wikipedia.org/wiki/Memory_segmentation] \u9875\u4fdd\u62a4\u6a21\u5f0f\u9700\u8981\u7ef4\u62a4\u4e00\u5f20\u9875\u8868\uff0c\u9875\u8868\u540c\u6837\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u9875\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\uff0c\u901a\u5e38\u4e00\u4e2a\u9875\u7684\u5927\u5c0f\u662f4Kb,\u90a3\u4e48\u4e00\u4e2a32\u4f4d\u7684\u5730\u5740\u7684\u524d20\u4f4d\u662f\u9875\u8868\u7684\u7d22\u5f15\uff0c\u540e12\u4f4d\u662f\u504f\u79fb\u91cf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u544a\u8bc9CPU\u9875\u8868\u7684\u5730\u5740\uff0cCPU\uff08MMU\uff09\u901a\u8fc7\u865a\u62df\u5730\u5740\u7684\u524d20\u4f4d\u7d22\u5f15\u5230\u5bf9\u5e94\u7684\u9875\u8bb0\u5f55\uff0c\u627e\u5230\u5bf9\u5e94\u9875\u7684\u7269\u7406\u5730\u5740\uff0c\u518d\u52a0\u4e0a\u865a\u62df\u5730\u5740\u540e12\u4f4d\u7684\u504f\u79fb\u91cf\u5f97\u5230\u7269\u7406\u5730\u5740\u3002 bootasm.S \u4e0b\u9762\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\uff0cboot loader\u6709\u4e24\u4e2a\u6587\u4ef6bootasm.S\u548cbootmain.c. boot loader\u7684\u5165\u53e3\u5c31\u5728bootasm.S\u6587\u4ef6\u4e2d .code16 # Assemble for 16-bit mode .globl start start: cli # BIOS enabled interrupts; disable # Zero data segment registers DS, ES, and SS. xorw %ax,%ax # Set %ax to zero movw %ax,%ds # -> Data Segment movw %ax,%es # -> Extra Segment movw %ax,%ss # -> Stack Segment .code16 \u8fd9\u53e5\u662f\u8bc9 CPU \u6211\u4eec\u76ee\u524d\u662f\u5728 16 \u4f4d\u6a21\u5f0f\u4e0b\u6267\u884c\u4ee3\u7801\uff0c\u6b64\u65f6\u5185\u5b58\u5bfb\u5740\u80fd\u529b\u53ea\u6709 1MB\uff0c\u5e76\u4e14\u662f\u201c\u5b9e\u6a21\u5f0f\u201d\u4e0b\u3002 cli \u6307\u4ee4\u5173\u95ed\u4e86\u4e2d\u65ad\u54cd\u5e94\uff0c\u610f\u5473\u7740\u4ece\u8fd9\u4e00\u523b\u5f00\u59cb\u4f60\u7684\u8ba1\u7b97\u673a\u5c06\u4e0d\u518d\u54cd\u5e94\u4efb\u4f55\u4e2d\u65ad\u4e8b\u4ef6\uff08\u6bd4\u5982\u8fd9\u65f6\u5019\u4f60\u6572\u4e2a\u952e\u76d8\u70b9\u4e2a\u9f20\u6807\u5565\u7684\uff0cCPU \u5c31\u4e0d\u518d\u7406\u4f60\u4e86\uff09\u3002\u4e4b\u6240\u4ee5\u8981\u5173\u95ed\u4e2d\u65ad\u54cd\u5e94\u662f\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f15\u5bfc\u4ee3\u7801\u7684\u987a\u5229\u6267\u884c\uff08\u603b\u4e0d\u80fd\u6267\u884c\u5230\u4e00\u534a\u88ab CPU \u7ed9\u4e2d\u65ad\u4e86\u5427\uff0c\u90a3\u76f4\u63a5\u5c31\u6302\u4e86\uff09\u3002 \u63a5\u4e0b\u6765\u7684 4 \u884c\u4ee3\u7801\u663e\u793a\u7528\u5f02\u6216\u5c06 %ax \u5bc4\u5b58\u5668\u7684\u503c\u7f6e\u6210 0\uff0c\u7136\u540e\u5728\u7528 %ax \u5bc4\u5b58\u5668\u7684\u503c\u5c06 %ds\u3001%es\u3001%ss \u4e09\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u5168\u90e8\u7f6e 0\uff0c\u76f8\u5f53\u4e8e\u521d\u59cb\u5316\u4e86\u3002 \u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b bootasm.S \u7684\u4ee3\u7801\u3002\u5728\u521d\u59cb\u5316\u597d\u5bc4\u5b58\u5668\u540e\uff0cbootasm.S \u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u6253\u5f00 A20 gate \u7a81\u7834 1MB \u5185\u5b58\u5bfb\u5740\u7684\u9650\u5236\u3002X86\u8ba1\u7b97\u673a\u8981\u7a81\u7834 1MB \u5185\u5b58\u5bfb\u5740\u7684\u9650\u5236\u5c31\u8981\u628a A20 gate \u6253\u5f00\uff0c\u63a7\u5236 A20 gate \u7684\u65b9\u6cd5\u6709 3 \u79cd\uff1a * 804x \u952e\u76d8\u63a7\u5236\u5668\u6cd5 * Fast A20 \u6cd5 * BIOS \u4e2d\u65ad\u6cd5 xv6 \u7528\u4e86\u7b2c\u4e00\u79cd 804x \u952e\u76d8\u63a7\u5236\u5668\u6cd5\uff0c\u8fd9\u4e5f\u662f\u6700\u53e4\u8001\u4e14\u6548\u7387\u6700\u6162\u7684\u4e00\u79cd\u3002\u5f53\u7136\u56e0\u4e3a\u786c\u4ef6\u7684\u4e0d\u540c\uff0c\u8fd9\u4e09\u79cd\u65b9\u6cd5\u53ef\u80fd\u4e0d\u4f1a\u88ab\u786c\u4ef6\u90fd\u652f\u6301\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u662f\u8fd9\u4e09\u79cd\u90fd\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u6bcf\u5c1d\u8bd5\u4e00\u4e2a\u5c31\u9a8c\u8bc1\u4e00\u4e0b A20 gate \u662f\u5426\u88ab\u6b63\u786e\u6253\u5f00\u4ee5\u4fdd\u8bc1\u517c\u5bb9\u5404\u79cd\u786c\u4ef6\u3002\u4f46\u662f xv6 \u4f5c\u4e3a\u4e00\u6b3e\u6559\u5b66\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u5c31\u6ca1\u5fc5\u8981\u505a\u7684\u8fd9\u4e48\u590d\u6742\u91cc\u3002\u53ea\u7528\u4e86\u4e00\u79cd\u6700\u53e4\u8001\u7684\u65b9\u6cd5\uff08\u4fdd\u8bc1\u517c\u5bb9\u5927\u591a\u6570\u786c\u4ef6\uff09\u800c\u4e14\u6ca1\u6709\u5bf9\u6253\u5f00\u6210\u529f\u4e0e\u5426\u505a\u9a8c\u8bc1\u3002\u50cf\u8bf8\u5982 Linux \u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u5c31\u628a\u4e09\u79cd\u65b9\u6cd5\u7684\u5b9e\u73b0\u90fd\u505a\u597d\uff0c\u5e76\u4e14\u52a0\u4e0a\u4e86\u9a8c\u8bc1\u673a\u5236\u3002 \u6211\u4eec\u5177\u4f53\u6765\u770b xv6 \u7684\u5b9e\u73b0\u4ee3\u7801 # Physical address line A20 is tied to zero so that the first PCs # with 2 MB would run software that assumed 1 MB. Undo that. # /////////////////////////////////////////////////////////////// # \u8fd9\u91cc\u7528\u4e86\u901a\u8fc7\u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u7684\u65b9\u6cd5\u6253\u5f00 A20 \u5730\u5740 # \u6253\u5f00 A20 \u5730\u5740\u7ebf\u7684\u65b9\u6cd5\u6709\u4e09\u79cd\uff0c\u5177\u4f53\u53ef\u53c2\u8003\uff1a # http://kernelx.weebly.com/a20-address-line.html # # \u4e0b\u9762\u90fd\u662f\u9488\u5bf9 804x \u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u7528\u5230\u7684\u4e24\u4e2a\u7aef\u53e3 # 0x64 \u4ece\u8be5\u7aef\u53e3\u6267\u884c in \u8bfb\u53d6\u64cd\u4f5c\u65f6\uff0c\u8bfb\u53d6\u72b6\u6001\u5bc4\u5b58\u5668\uff0c8 \u4f4d\uff0c\u7b2c\u4e8c # \u4f4d\u6807\u8bc6\u8f93\u5165\u7f13\u51b2\u662f\u5426\u6709\u6570\u636e\u6240\u4ee5\u4e0b\u9762\u7528 0x2 \u6765 test \u8f93\u5165\u7f13\u51b2\u662f\u5426\u6709\u6570\u636e # \u5411\u8be5\u7aef\u53e3\u6267\u884c out \u5199\u64cd\u4f5c\u65f6\uff0c\u4ee3\u8868\u5411\u952e\u76d8\u63a7\u5236\u5668\u53d1\u9001\u547d\u4ee4\uff0c\u53d1\u9001 0xd1 \u4ee3 # \u8868\u8981\u5411\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u7aef\u53e3\u5199\u5165\u6570\u636e\uff0c\u8981\u5199\u5165\u7684\u6570\u636e\u901a\u8fc7 0x60 \u7aef\u53e3\u4f20\u5165 # # P2 \u7aef\u53e3\uff0c8\u4f4d\uff0c\u7b2c\u4e8c\u4f4d\u5c31\u662f A20 \u5f00\u5173\uff0c\u6240\u4ee5\u5728 seta20.2 \u4ee3\u7801\u6bb5\u5c06 0xdf \u901a\u8fc7 # 0x60 \u7aef\u53e3\u5199\u5165\u5230 P2 \u65f6\u5c31\u4f1a\u628a A20 \u7f6e\u4f4d\uff0cA20 \u6253\u5f00\u540e\uff0c\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f seta20.1: inb $0x64,%al # Wait for not busy testb $0x2,%al jnz seta20.1 # \u901a\u8fc7 0x64 \u72b6\u6001\u5bc4\u5b58\u5668\u7684\u7b2c\u4e8c\u4f4d\u5224\u65ad\u952e\u76d8\u7f13\u51b2\u533a\u91cc\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u8fd8\u6709\u6570\u636e\uff0c\u5219\u7b49\u5f85 movb $0xd1,%al # 0xd1 -> port 0x64 outb %al,$0x64 # 0xd1 \u4ee3\u8868\u5411 804x \u63a7\u5236\u5668\u7684 P2 \u5199\u6570\u636e seta20.2: inb $0x64,%al # Wait for not busy testb $0x2,%al jnz seta20.2 # \u540c\u4e0a\uff0c\u7ee7\u7eed\u5224\u65ad\u952e\u76d8\u7f13\u51b2\u533a\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u6709\u6570\u636e\uff0c\u5219\u7b49\u5f85 movb $0xdf,%al # 0xdf -> port 0x60 outb %al,$0x60 # \u5c06 0xdf 11011111 \u5199\u5165\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u53e3\uff0c\u610f\u5473\u7740 A20 \u6253\u5f00\uff0c\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f \u8fd9\u91cc bootasm.S \u7528\u4e86\u4e24\u4e2a\u65b9\u6cd5 seta20.1 \u548c seta20.2 \u6765\u5b9e\u73b0\u901a\u8fc7 804x \u952e\u76d8\u63a7\u5236\u5668\u6253\u5f00 A20 gate\u3002 \u8fd9\u4e2a\u529e\u6cd5\u786e\u5b9e\u662f\u5206\u4e24\u6b65\u6765\u641e\u7684\uff1a \u7b2c\u4e00\u6b65\u662f\u5411 804x \u952e\u76d8\u63a7\u5236\u5668\u7684 0x64 \u7aef\u53e3\u53d1\u9001\u547d\u4ee4\u3002\u8fd9\u91cc\u4f20\u9001\u7684\u547d\u4ee4\u662f 0xd1\uff0c\u8fd9\u4e2a\u547d\u4ee4\u7684\u610f\u601d\u662f\u8981\u5411\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u5199\u5165\u6570\u636e\u3002\u8fd9\u5c31\u662f seta20.1 \u4ee3\u7801\u6bb5\u6240\u505a\u7684\u5de5\u4f5c\u3002 \u7b2c\u4e8c\u6b65\u5c31\u662f\u5411\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u7aef\u53e3\u5199\u6570\u636e\u4e86\u3002\u5199\u6570\u636e\u7684\u65b9\u6cd5\u662f\u628a\u6570\u636e\u901a\u8fc7\u952e\u76d8\u63a7\u5236\u5668\u7684 0x60 \u7aef\u53e3\u5199\u8fdb\u53bb\u3002\u5199\u5165\u7684\u6570\u636e\u662f 0xdf\uff0c\u56e0\u4e3a A20 gate \u5c31\u5305\u542b\u5728\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u7aef\u53e3\u4e2d\uff0c\u968f\u7740 0xdf \u7684\u5199\u5165\uff0cA20 gate \u5c31\u88ab\u6253\u5f00\u4e86\u3002 \u63a5\u4e0b\u6765\u8981\u505a\u7684\u5c31\u662f\u8fdb\u5165\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u4e86\u3002\u5728\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u524d\u9700\u8981\u5c06 GDT \u51c6\u5907\u597d\u3002\u4ec0\u4e48\u662f GDT \uff1f\u5b83\u7684\u4e2d\u6587\u540d\u79f0\u53eb\u201c\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u201d\uff0c\u60f3\u8981\u5728\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u4e0b\u5bf9\u5185\u5b58\u8fdb\u884c\u5bfb\u5740\u5c31\u5148\u8981\u6709 GDT\uff0cGDT \u8868\u91cc\u7684\u6bcf\u4e00\u9879\u53eb\u505a\u201c\u6bb5\u63cf\u8ff0\u7b26\u201d\uff0c\u7528\u6765\u8bb0\u5f55\u6bcf\u4e2a\u5185\u5b58\u5206\u6bb5\u7684\u4e00\u4e9b\u5c5e\u6027\u4fe1\u606f\uff0c\u6bcf\u4e2a\u201c\u6bb5\u63cf\u8ff0\u7b26\u201d\u5360 8 \u5b57\u8282\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u773c\u8fd9\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u7684\u5177\u4f53\u7ed3\u6784\uff1a \u4e09\u5757\u201c\u57fa\u5730\u5740\u201d\u7ec4\u88c5\u8d77\u6765\u6b63\u597d\u5c31\u662f 32 \u4f4d\u7684\u6bb5\u8d77\u59cb\u5185\u5b58\u5730\u5740\uff0c\u4e24\u5757 Limit \u7ec4\u6210\u8be5\u5185\u5b58\u5206\u6bb5\u7684\u957f\u5ea6\uff0c\u63a5\u4e0b\u6765\u4f9d\u6b21\u89e3\u91ca\u4e00\u4e0b\u5176\u4ed6\u4f4d\u6240\u4ee3\u8868\u7684\u610f\u4e49: P: 0 \u672c\u6bb5\u4e0d\u5728\u5185\u5b58\u4e2d DPL: \u8bbf\u95ee\u8be5\u6bb5\u5185\u5b58\u6240\u9700\u6743\u9650\u7b49\u7ea7 00 \u2014 11\uff0c0\u4e3a\u6700\u5927\u6743\u9650\u7ea7\u522b S: 1 \u4ee3\u8868\u6570\u636e\u6bb5\u3001\u4ee3\u7801\u6bb5\u6216\u5806\u6808\u6bb5\uff0c0 \u4ee3\u8868\u7cfb\u7edf\u6bb5\u5982\u4e2d\u65ad\u95e8\u6216\u8c03\u7528\u95e8 E: 1 \u4ee3\u8868\u4ee3\u7801\u6bb5\uff0c\u53ef\u6267\u884c\u6807\u8bb0\uff0c0 \u4ee3\u8868\u6570\u636e\u6bb5 ED: 0 \u4ee3\u8868\u5ffd\u7565\u7279\u6743\u7ea7\uff0c1 \u4ee3\u8868\u9075\u5b88\u7279\u6743\u7ea7 RW: \u5982\u679c\u662f\u6570\u636e\u6bb5\uff08E=0\uff09\u52191 \u4ee3\u8868\u53ef\u5199\u5165\uff0c0 \u4ee3\u8868\u53ea\u8bfb\uff1b\u5982\u679c\u662f\u4ee3\u7801\u6bb5\uff08E=1\uff09\u52191 \u4ee3\u8868\u53ef\u8bfb\u53d6\uff0c0 \u4ee3\u8868\u4e0d\u53ef\u8bfb\u53d6 A: 1 \u8868\u793a\u8be5\u6bb5\u5185\u5b58\u8bbf\u95ee\u8fc7\uff0c0 \u8868\u793a\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 G: 1 \u8868\u793a 20 \u4f4d\u6bb5\u754c\u9650\u5355\u4f4d\u662f 4KB\uff0c\u6700\u5927\u957f\u5ea6 4GB\uff1b0 \u8868\u793a 20 \u4f4d\u6bb5\u754c\u9650\u5355\u4f4d\u662f 1 \u5b57\u8282\uff0c\u6700\u5927\u957f\u5ea6 1MB DB:1 \u8868\u793a\u5730\u5740\u548c\u64cd\u4f5c\u6570\u662f 32 \u4f4d\uff0c0 \u8868\u793a\u5730\u5740\u548c\u64cd\u4f5c\u6570\u662f 16 \u4f4d XX: \u4fdd\u7559\u4f4d\u6c38\u8fdc\u662f 0 AA: \u7ed9\u7cfb\u7edf\u63d0\u4f9b\u7684\u4fdd\u7559\u4f4d \u6709\u4e86\u4e0a\u8ff0\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u518d\u6765\u770b\u770b xv6 \u662f\u600e\u6837\u51c6\u5907\u81ea\u5df1\u7684 GDT \u7684\uff0c\u4ee3\u7801\u5728 bootasm.S \u6587\u4ef6\u6700\u5e95\u90e8\uff1a gdt: SEG_NULLASM # \u7a7a SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff) # \u4ee3\u7801\u6bb5 SEG_ASM(STA_W, 0x0, 0xffffffff) # \u6570\u636e\uff08\u5806\u6808\uff09\u6bb5 \u8fd9\u91cc\u7528\u5230\u4e86\u51e0\u4e2a\u5b8f\uff0c\u5177\u4f53\u7684\u5b8f\u5b9a\u4e49\u5728 asm.h \u6587\u4ef6\u4e2d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u76f4\u89c2\u7684\u611f\u53d7\u4e00\u4e0b xv6 \u7684 GDT \u6211\u628a\u5b8f\u8ba1\u7b97\u51fa\u6765\u7684\u503c\u76f4\u63a5\u7ffb\u8bd1\u8fc7\u6765\uff0c\u4ee3\u7801\u5e94\u8be5\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff1a gdt: .word 0, 0; .byte 0, 0, 0, 0 # \u7a7a .word 0xffff, 0x0000; .byte 0x00, 0x9a, 0xcf, 0x00 # \u4ee3\u7801\u6bb5 .word 0xffff, 0x0000; .byte 0x00, 0x92, 0xcf, 0x00 # \u6570\u636e\u6bb5 \u7136\u540e\u6211\u4eec\u518d\u628a\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u7684\u6bb5\u63cf\u8ff0\u7b26\u5177\u4f53\u6bcf\u4e00\u4f4d\u7684\u5bf9\u5e94\u503c\u8868\u5c55\u793a\u51fa\u6765\uff0c\u9996\u5148\u662f\u4ee3\u7801\u6bb5\uff1a \u7136\u540e\u662f\u6570\u636e\u6bb5\uff1a \u6211\u4eec\u6765\u4e00\u6b65\u6b65\u89e3\u91ca\u4e00\u4e0b\u3002\u9996\u5148\u8bf4\u8bf4\u8fd9\u4e24\u4e2a\u5185\u5b58\u6bb5\u7684\u5171\u540c\u70b9\uff0cDB = 1\uff0cG = 1\uff0c\u57fa\u5730\u5740\u90fd\u662f 0x00000000\uff0c\u5185\u5b58\u5206\u6bb5\u957f\u5ea6\u90fd\u662f 0xfffff\uff0c\u8fd9\u8bf4\u660e\u4ed6\u4eec\u90fd\u662f\u7528\u4e8e 32 \u4f4d\u5bfb\u5740\uff0c\u6240\u4f7f\u7528\u7684\u5185\u5b58\u662f\u4ece 0 \u5f00\u59cb\u5230 4GB \u7ed3\u675f\uff08\u5168\u90e8\u5185\u5b58\uff09\u3002\u8fd9\u91cc\u662f\u8fd9\u4e48\u7b97\u51fa\u6765\u7684\uff0c\u6bb5\u957f\u5ea6\u662f 0xfffff = 2^20\uff0cG = 1 \u8868\u793a\u6bb5\u754c\u9650\u5355\u4f4d\u662f 4k\uff0c\u6240\u4ee5 4k * 2^20 = 4GB\u3002 \u518d\u8bf4\u8bf4\u4ed6\u4eec\u7684\u4e0d\u540c\u70b9\uff0c\u4ee3\u7801\u6bb5\u7684 E = 1 \u800c\u6570\u636e\u6bb5\u7684 E = 0 \u8fd9\u8868\u540d\u4e86\u4ed6\u4eec\u7684\u8eab\u4efd\uff0c\u8eab\u4efd\u4e0d\u540c RW \u7684\u503c\u867d\u7136\u76f8\u540c\uff0c\u4f46\u4ee3\u8868\u7684\u610f\u4e49\u4e5f\u5c31\u4e0d\u76f8\u540c\u4e86\uff0c\u4ee3\u7801\u6bb5\u7684 RW = 1 \u4ee3\u8868\u53ef\u8bfb\u53d6\uff0c\u6570\u636e\u6bb5\u7684 RW = 1 \u8868\u793a\u53ef\u8bfb\u53ef\u5199\u3002\u8fd9\u4e5f\u548c\u6211\u4eec\u4e0a\u9762\u89e3\u91ca\u7684\u4fdd\u62a4\u6a21\u5f0f\u6240\u80fd\u591f\u8fbe\u5230\u7684\u76ee\u7684\u76f8\u543b\u5408\u3002 \u5f53\u7136\u4f5c\u4e3a\u4e00\u6b3e\u6559\u5b66\u4e3a\u76ee\u7684\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0cxv6 \u8fd9\u91cc\u7684 GDT \u8bbe\u7f6e\u8fd8\u662f\u4ee5\u7b80\u5355\u5bb9\u6613\u7406\u89e3\u4e3a\u76ee\u7684\u3002\u8bf8\u5982\u201c\u6743\u9650\u4f4d\u201d\u8fd9\u6837\u7684\u5b89\u5168\u673a\u5236\u5c31\u76f4\u63a5\u88ab\u5ffd\u7565\u4e86\uff0c\u800c\u5bf9\u5185\u5b58\u7684\u89c4\u5212\u4e5f\u6ca1\u6709\u505a\u5230\u771f\u6b63\u7684\u201c\u5206\u6bb5\u201d\uff0c\u800c\u662f\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u90fd\u542f\u7528\u4e86\u4ece 0 \u5230 4GB \u7684\u5168\u90e8\u5185\u5b58\u5bfb\u5740\u3002\u5176\u5b9e\u8fd9\u79cd\u5185\u5b58\u89c4\u5212\u65b9\u6cd5\u53eb\u505a\u201c\u5e73\u5766\u5185\u5b58\u6a21\u578b\u201d\uff0c\u5373\u4fbf\u662f Linux \u4e5f\u662f\u7528\u7684\u8fd9\u6837\u7684\u65b9\u5f0f\u89c4\u5212\u5185\u5b58\u7684\uff0c\u5e76\u6ca1\u6709\u505a\u5230\u771f\u6b63\u7684\u201c\u5206\u6bb5\u201d\u3002\u8fd9\u662f\u56e0\u4e3a x86 \u7684\u5206\u9875\u673a\u5236\u662f\u57fa\u4e8e\u5206\u6bb5\u7684\uff0cLinux \u9009\u7528\u4e86\u66f4\u5148\u8fdb\u7684\u5206\u9875\u673a\u5236\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u6240\u4ee5\u5728\u5206\u6bb5\u8fd9\u91cc\u53ea\u662f\u8d70\u4e00\u4e2a\u5fc5\u8981\u7684\u5f62\u5f0f\u7f62\u4e86\u3002\u800c xv6 \u540e\u9762\u5230\u5e95\u662f\u5426\u4e5f\u542f\u7528\u4e86\u5206\u9875\u673a\u5236\uff0c\u6211\u4eec\u76ee\u524d\u8fd8\u4e0d\u5f97\u800c\u77e5\u3002 GDT \u4e5f\u641e\u5b9a\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u628a\u6211\u4eec\u521a\u521a\u5728\u5185\u5b58\u4e2d\u8bbe\u5b9a\u597d\u7684 GDT \u7684\u4f4d\u7f6e\u544a\u8bc9 CPU\uff0c\u7136\u540e\u5c31\u201c\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u6b20\u4e1c\u98ce\u201d\u4e86\u3002CPU \u5355\u72ec\u4e3a\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\u53eb\u505a GDTR \u7528\u6765\u4fdd\u5b58\u6211\u4eec GDT \u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u548c\u6211\u4eec GDT \u7684\u957f\u5ea6\u3002GDTR \u5bc4\u5b58\u5668\u4e00\u5171 48 \u4f4d\uff0c\u5176\u4e2d\u9ad8 32 \u4f4d\u7528\u6765\u5b58\u50a8\u6211\u4eec\u7684 GDT \u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5176\u4f59\u7684\u4f4e 16 \u4f4d\u7528\u6765\u5b58\u6211\u4eec\u7684 GDT \u7684\u5360\u7528\u7a7a\u95f4\u7684\u5927\u5c0f\uff08\u6240\u5360\u5b57\u8282\u6570\uff09\u3002 16 \u4f4d\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u503c\u4e3a 65536 \uff0c\u800c\u4e00\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u662f 8 \u5b57\u8282\uff0c\u6240\u4ee5 GDT \u6700\u591a\u53ef\u4ee5\u6709 8192 \u4e2a\u6bb5\u63cf\u8ff0\u7b26\u3002\u4e0d\u4ec5 CPU \u7528\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5bc4\u5b58\u5668 GDTR \u6765\u5b58\u50a8\u6211\u4eec\u7684 GDT\uff0c\u800c\u4e14\u8fd8\u4e13\u95e8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6307\u4ee4\u7528\u6765\u8ba9\u6211\u4eec\u628a GDT \u7684\u5730\u5740\u548c\u957f\u5ea6\u4f20\u7ed9 GDTR \u5bc4\u5b58\u5668\uff0c\u6765\u770b xv6 \u7684\u4ee3\u7801\uff1a lgdt gdtdesc \u800c\u8fd9\u4e2a gdtdesc \u548c gdt \u4e00\u8d77\u653e\u5728\u4e86 bootasm.S \u6587\u4ef6\u7684\u6700\u5e95\u90e8\uff0c\u6211\u4eec\u770b\u4e00\u773c\uff1a gdtdesc: .word (gdtdesc - gdt - 1) # 16 \u4f4d\u7684 gdt \u5927\u5c0fsizeof(gdt) - 1 .long gdt # 32 \u4f4d\u7684 gdt \u6240\u5728\u7269\u7406\u5730\u5740 \u4e0d\u591a\u4e0d\u5c11\uff0c\u6b63\u597d 48 \u4f4d\u4f20\u7ed9\u4e86 GDTR \u5bc4\u5b58\u5668\uff0c\u5230\u6b64 GDT \u5c31\u51c6\u5907\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff01 \u524d\u9762\u8bb2\u5230\uff0c\u5c31\u5982\u540c A20 gate \u8fd9\u4e2a\u5f00\u5173\u8d1f\u8d23\u6253\u5f00 1MB \u4ee5\u4e0a\u5185\u5b58\u5bfb\u5740\u4e00\u6837\uff0c\u60f3\u8981\u8fdb\u5165\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u6211\u4eec\u4e5f\u9700\u8981\u6253\u5f00\u4e00\u4e2a\u5f00\u5173\uff0c\u8fd9\u4e2a\u5f00\u5173\u53eb\u201c\u63a7\u5236\u5bc4\u5b58\u5668\u201d\uff0cx86 \u7684\u63a7\u5236\u5bc4\u5b58\u5668\u4e00\u5171\u6709 4 \u4e2a\u5206\u522b\u662f CR0\u3001CR1\u3001CR2\u3001CR3\uff0c\u800c\u63a7\u5236\u8fdb\u5165\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u7684\u5f00\u5173\u5728 CR0 \u4e0a\uff0c\u8fd9\u56db\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f 32 \u4f4d\u7684\uff0c\u6211\u4eec\u770b\u4e00\u4e0b CR0 \u4e0a\u548c\u4fdd\u62a4\u6a21\u5f0f\u6709\u5173\u7684\u4f4d PG \u4e3a 0 \u65f6\u4ee3\u8868\u53ea\u4f7f\u7528\u5206\u6bb5\u5f0f\uff0c\u4e0d\u4f7f\u7528\u5206\u9875\u5f0f, \u4e3a 1 \u662f\u542f\u7528\u5206\u9875\u5f0f PE\u4e3a 0 \u65f6\u4ee3\u8868\u5173\u95ed\u4fdd\u62a4\u6a21\u5f0f\uff0c\u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f\u4e0b, \u4e3a 1 \u5219\u5f00\u542f\u4fdd\u62a4\u6a21\u5f0f \u7136\u540e\u6211\u4eec\u7ee7\u7eed\u770b xv6 \u6253\u5f00\u4fdd\u62a4\u6a21\u5f0f\u7684\u4ee3\u7801\uff1a movl %cr0, %eax orl $CR0_PE, %eax movl %eax, %cr0 \u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u64cd\u4f5c CR0\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u8981\u7528\u4e00\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u5f53\u524d CR0 \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u8fd9\u91cc\u7b2c\u4e00\u884c\u5c31\u662f\u7528\u901a\u7528\u5bc4\u5b58\u5668 eax \u6765\u4fdd\u5b58 cr0 \u5bc4\u5b58\u5668\u7684\u503c\uff1b\u7136\u540e CR0_PE \u8fd9\u4e2a\u5b8f\u7684\u5b9a\u4e49\u5728 mmu.h \u6587\u4ef6\u4e2d\uff0c\u662f\u4e2a\u6570\u503c 0x00000001\uff0c\u5c06\u8fd9\u4e2a\u6570\u503c\u4e0e eax \u4e2d\u7684 cr0 \u5bc4\u5b58\u5668\u7684\u503c\u505a\u201c\u6216\u201d\u8fd0\u7b97\u540e\uff0c\u5c31\u4fdd\u8bc1\u5c06 cr0 \u7684\u7b2c 0 \u4f4d\u8bbe\u7f6e\u6210\u4e86 1 \u5373 PE = 1 \u4fdd\u8bc1\u6253\u5f00\u4e86\u4fdd\u62a4\u6a21\u5f0f\u7684\u5f00\u5173\u3002\u800c cr0 \u7684\u7b2c 31 \u4f4d PG = 0 \u8868\u793a\u6211\u4eec\u53ea\u4f7f\u7528\u5206\u6bb5\u5f0f\uff0c\u4e0d\u4f7f\u7528\u5206\u9875\uff0c\u8fd9\u65f6\u518d\u5c06\u65b0\u7684\u8ba1\u7b97\u540e\u7684 eax \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5199\u56de\u5230 cr0 \u5bc4\u5b58\u5668\u4e2d\u5c31\u5b8c\u6210\u4e86\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684\u5207\u6362\u3002 \u5230\u8fd9\u91cc\u6211\u4eec\u5173\u4e8e xv6 \u4ece\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684\u8bb2\u89e3\u5c31\u63a5\u8fd1\u5c3e\u58f0\u4e86\u3002\u6211\u4eec\u5df2\u7ecf\u8fdb\u5165\u5230\u4fdd\u62a4\u6a21\u5f0f\u4e86\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u5c06\u4ee3\u7801\u5f7b\u5e95\u4ee5 32 \u4f4d\u7684\u4fdd\u62a4\u6a21\u5f0f\u6765\u8fd0\u884c\u4e86\u3002\u6240\u4ee5\u8fd9\u65f6\u6211\u4eec\u7684 xv6 \u4e5f\u8981\u51c6\u5907\u8df3\u8f6c\u4e86\uff0c\u518d\u6765\u770b\u4e00\u884c\u4ee3\u7801\uff1a ljmp $(SEG_KCODE<<3) $start32 \u8fd9\u662f\u4e00\u4e2a\u8df3\u8f6c\u8bed\u53e5\uff0c\u901a\u77e5 CPU \u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\u3002 xv6 \u5728\u8fd9\u65f6\u5c31\u51c6\u5907\u8df3\u8f6c\u5230\u7528 C \u5199\u6210\u7684\u4ee3\u7801\u5904\u53bb\u7ee7\u7eed\u8fd0\u884c\u4e86\u3002\u8fd9\u4e2a\u8df3\u8f6c\u8bed\u53e5\u7684\u4e24\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u518d\u8bb2\u7684\u5178\u578b\u7684\u201c\u57fa\u5730\u5740\u201d + \u201c\u504f\u79fb\u91cf\u201d\u7684\u65b9\u5f0f\u544a\u8bc9 CPU \u8981\u8df3\u8f6c\u5230\u5185\u5b58\u7684\u4ec0\u4e48\u4f4d\u7f6e\u53bb\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\u3002 \u800c\u8fd9\u65f6\u6211\u4eec\u5df2\u7ecf\u5728\u5206\u6bb5\u5f0f\u7684\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u8fd9\u53e5\u8df3\u8f6c\u8bed\u53e5\u6765\u76f4\u89c2\u7684\u611f\u53d7\u4e00\u4e0b\u5206\u6bb5\u5f0f\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5bfb\u5740\u3002 \u524d\u9762\u9884\u5907\u77e5\u8bc6\u91cc\u8bf4\u9053\u5728\u5206\u6bb5\u5f0f\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u201c\u6bb5\u57fa\u5740\u201d\uff08\u57fa\u5730\u5740\uff09\u4e0d\u518d\u662f\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f GDT \u8868\u7684\u4e0b\u6807\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u8fc7 GDT \u8868\u6700\u5927\u53ef\u4ee5\u6709 8192 \u4e2a\u8868\u9879\uff08\u6bb5\u63cf\u8ff0\u7b26\uff09\uff0c2^13 = 8192\uff0c\u6240\u4ee5\u4fdd\u5b58\u7740\u201c\u6bb5\u57fa\u5740\u201d\u7684 16 \u4f4d\u6bb5\u5bc4\u5b58\u5668\u53ea\u9700\u8981\u5176\u4e2d\u7684 13 \u4f4d\u5c31\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a GDT \u8868\u7684\u4e0b\u6807\uff0c\u5176\u4f59\u7684 3 \u4f4d\u53ef\u7528\u4f5c\u4ed6\u7528\u3002 \u6309\u7167\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u770b\u770b\u8fd9\u4e2a $(SEG_KCODE<<3) \u751f\u6210\u7684\u201c\u6bb5\u57fa\u5740\u201d\u662f\u4ec0\u4e48\uff1fSEG_KCODE \u662f\u4e2a\u5b8f\u5b9a\u4e49\uff0c\u5177\u4f53\u7684\u5b9a\u4e49\u5728 mmu.h \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f $(1<<3)\uff0c\u518d\u5c06\u5b83\u8fd0\u7b97\u51fa\u6765\u5f97\u5230 \u8fd9\u91cc\u8fd9\u4e2a 16 \u4f4d\u7684\u201c\u6bb5\u57fa\u5740\u201d\u7684\u9ad8 13 \u4f4d\u4ee3\u8868 GDT \u8868\u7684\u4e0b\u6807\uff08\u5b66\u540d\u5e94\u8be5\u53eb\u201c\u6bb5\u9009\u62e9\u5b50\u201d\uff09\uff0c\u8fd9\u91cc\u9ad8 13 \u4f4d\u521a\u597d\u662f 1\uff0c\u800c\u6211\u4eec\u7684 GDT \u91cc\u4e0b\u6807\u4f4d 1 \u7684\u5185\u5b58\u6bb5\u6b63\u597d\u662f\u6211\u4eec\u7684\u201c\u4ee3\u7801\u6bb5\u201d\uff0c\u800c\u201c\u4ee3\u7801\u6bb5\u201d\u6211\u4eec\u5728 GDT \u7684\u201c\u6bb5\u63cf\u8ff0\u7b26\u201d\u4e2d\u8bbe\u7f6e\u4e86\u5b83\u7684\u5176\u5b9e\u5185\u5b58\u5730\u5740\u662f 0x00000000 \uff0c\u5185\u5b58\u6bb5\u957f\u5ea6\u662f 1M*4K \uff0c\u8fd9\u662f\u5b8c\u6574\u7684 4GB \u5185\u5b58\u3002 \u6240\u4ee5\u8fd9\u91cc\u7684\u8df3\u8f6c\u8bed\u53e5\u9009\u62e9\u4e86\u201c\u4ee3\u7801\u6bb5\u201d\uff0c\u7531\u4e8e\u201c\u4ee3\u7801\u6bb5\u201d\u7684\u8d77\u59cb\u5185\u5b58\u5730\u5740\u662f 0x00000000 \uff0c\u957f\u5ea6\u662f\u5b8c\u6574\u7684 4GB\uff0c\u6240\u4ee5\u540e\u9762\u7684\u201c\u504f\u79fb\u91cf\u201d\u4ecd\u7136\u76f8\u5f53\u4e8e\u662f\u5b9e\u9645\u7684\u5185\u5b58\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u201c\u504f\u79fb\u91cf\u201d\u76f4\u63a5\u7528\u4e86 $start32\uff0c\u4e5f\u5c31\u662f start32 \u76f4\u63a5\u5bf9\u5e94\u7684\u4ee3\u7801\u4f4d\u7f6e\u3002\u901a\u8fc7\u8fd9\u4e2a\u8df3\u8f6c\u5b9e\u9645\u4e0a CPU \u5c31\u4f1a\u8df3\u8f6c\u5230 bootasm.S \u6587\u4ef6\u7684 start32 \u6807\u8bc6\u7b26\u5904\u7ee7\u7eed\u6267\u884c\u4e86\u3002 \u52a0\u8f7d\u5185\u6838 boot loader \u5b9e\u73b0\u7684\u7b2c\u4e8c\u4e2a\u529f\u80fd\u5c31\u662f\u52a0\u8f7d\u5185\u6838\u3002\u4e5f\u5c31\u662f\u6839\u636eELF\u5185\u6838\u6587\u4ef6\u6240\u6307\u5b9a\u7684load address\uff0c\u4ece\u786c\u76d8\u4e2d\u628a\u5185\u6838\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5bf9\u5e94\u7684load address\u4e0a\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5185\u6838ELF\u6587\u4ef6\u6240\u6307\u5b9a\u7684\u5165\u53e3\u70b9\u3002 ELF\u6587\u4ef6\u683c\u5f0f \u5728 Wiki \u767e\u79d1\u4e0a\u6709 ELF \u6587\u4ef6\u683c\u5f0f\u7684\u8be6\u7ec6\u89e3\u91ca \uff0c\u7b80\u5355\u7684\u8bf4 ELF \u6587\u4ef6\u683c\u5f0f\u662f Linux \u4e0b\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6807\u51c6\u683c\u5f0f\u3002\u5c31\u597d\u50cf Windows \u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6 .exe \u4e00\u6837\uff08\u5f53\u7136\uff0cWindows \u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6807\u51c6\u683c\u5f0f\u53eb PE \u6587\u4ef6\u683c\u5f0f\uff09\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e5f\u6709\u5b83\u81ea\u5df1\u7684\u683c\u5f0f\u3002\u53ea\u6709\u6309\u7167\u6587\u4ef6\u6807\u51c6\u683c\u5f0f\u7ec4\u7ec7\u597d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u64cd\u4f5c\u7cfb\u7edf\u624d\u77e5\u9053\u5982\u4f55\u52a0\u8f7d\u8fd0\u884c\u5b83\u3002\u6211\u4eec\u5e76\u4f7f\u4f7f\u7528 C \u8bed\u8a00\u6309\u7167\u6559\u79d1\u4e66\u5199\u51fa\u7684 HelloWorld \u4ee3\u7801\u5728 Linux \u73af\u5883\u4e0b\u6700\u7ec8\u901a\u8fc7\u7f16\u8bd1\u5668\uff08gcc\u7b49\uff09\u7f16\u8bd1\u51fa\u7684\u53ef\u4ee5\u8fd0\u884c\u7684\u7a0b\u5e8f\u5c31\u662f ELF \u6587\u4ef6\u683c\u5f0f\u7684\u3002 \u90a3\u4e48 ELF \u6587\u4ef6\u683c\u5f0f\u5177\u4f53\u7684\u7ed3\u6784\u662f\u600e\u6837\u7684\u5462\uff1f \u5927\u6982\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 ELF \u5934\u90e8 ( ELF Header ) \u7a0b\u5e8f\u5934\u8868 (Program Header Table) .text .rodata \u2026\u2026 \u8282\u5934\u8868 (Section Header Table) \u6211\u4eec\u53ef\u4ee5\u7528 readelf -h kernel \u547d\u4ee4\u6765\u68c0\u67e5 ELF header \u4fe1\u606f\u3002 $ readelf -h kernel ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Intel 80386 Version: 0x1 Entry point address: 0x10000c Start of program headers: 52 (bytes into file) Start of section headers: 212404 (bytes into file) Flags: 0x0 Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 3 Size of section headers: 40 (bytes) Number of section headers: 16 Section header string table index: 15 \u8fd9\u91cc\u7684 \u2018Start of program headers\u2019 \u8bb0\u5f55\u7684\u662fprogram headers table\u5728\u8fd9\u4e2aELF\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0c\u2018Size of program headers\u2019\u662fprogram headers table\u4e2d\u4e00\u6761\u8bb0\u5f55\u7684\u5927\u5c0f\uff0c\u2018Number of program headers\u2019 \u662fprogram headers table\u7684\u8bb0\u5f55\u7684\u6761\u6570\u3002\u2018Entry point address\u2019\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\uff0c\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5b8c\u6210\u540e\u4f1a\u8df3\u8f6c\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u6267\u884c\u3002 \u540c\u6837\u6211\u4eec\u518d\u901a\u8fc7 readelf -l kernel \u547d\u4ee4\u6765\u68c0\u67e5program headers \u4fe1\u606f\u3002 $ readelf -l kernel Elf file type is EXEC (Executable file) Entry point 0x10000c There are 3 program headers, starting at offset 52 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align LOAD 0x001000 0x80100000 0x00100000 0x07aab 0x07aab R E 0x1000 LOAD 0x009000 0x80108000 0x00108000 0x02516 0x0d4a8 RW 0x1000 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10 Section to Segment mapping: Segment Sections... 00 .text .rodata 01 .data .bss 02 ELF program headers \u8bb0\u5f55\u4e86\u9700\u8981\u88ab\u52a0\u8f7d\u7684\u90e8\u5206\u5728\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08Offset\uff09\u548c\u5927\u5c0f\uff08FileSiz\uff09\uff0c\u8fd9\u4e9b\u8981\u88ab\u52a0\u8f7d\u7684segment\u901a\u5e38\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2asection, \u8fd9\u4e9bsection \u5728Section to Segment mapping\u90a3\u91cc\u53ef\u4ee5\u770b\u5230\u3002boot loader \u5c31\u662f\u6839\u636eELF program headers\u51b3\u5b9a\u5982\u4f55\u52a0\u8f7d\u5404\u4e2a\u6bb5\uff0cprogram headers\u660e\u786e\u8bf4\u660e\u4e86\u54ea\u4e00\u90e8\u5206\u9700\u8981\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\u3002 \u8fd9\u91cc\u7684LOAD\u662f\u9700\u8981\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u6bb5\u7684\u6807\u8bb0\u3002VirtAddr\uff08link address\uff09\u662f\u7f16\u8bd1\u5668\u5728link\u7684\u65f6\u5019\u6240\u751f\u6210\u7684\u5730\u5740\uff0c\u662f\u7a0b\u5e8f\u4ee3\u7801\u6267\u884c\u7684\u65f6\u5019\u6240\u671f\u671b\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u901a\u5e38\u662f\u865a\u62df\u5730\u5740\uff08virtual address\uff09\uff0c\u7a0b\u5e8f\u4ee3\u7801\u91cc\u9762\u51fd\u6570\u548c\u53d8\u91cf\u6240\u5728\u7684\u5730\u5740\u5c31\u662flink addrees\u3002PhysAddr\uff08load address \uff09\u662f\u8868\u793a\u8fd9\u4e00\u6bb5\u4ee3\u7801\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u52a0\u8f7d\u5230\u5230\u5185\u5b58\u7684\u8fd9\u4e2a\u7269\u7406\u5730\u5740\u4e0a\u3002 \u901a\u8fc7'Section to Segment mapping:'\u90a3\u6bb5\u4fe1\u606f\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u4e2a Segment \u5305\u542b .text .rodata \u4e24\u4e2asection,\u7b2c\u4e8c\u4e2aSegment\u5305\u62ec.data .bss \u4e24\u4e2a\u4e24\u4e2asection\u3002\u6211\u4eec\u901a\u8fc7 readelf -S kernel \u547d\u4ee4\u770b\u770bELF\u6587\u4ef6\u7684Section Headers\u3002 $ readelf -S kernel There are 16 section headers, starting at offset 0x33db4: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .text PROGBITS 80100000 001000 0070da 00 AX 0 0 16 [ 2] .rodata PROGBITS 801070e0 0080e0 0009cb 00 A 0 0 32 [ 3] .data PROGBITS 80108000 009000 002516 00 WA 0 0 4096 [ 4] .bss NOBITS 8010a520 00b516 00af88 00 WA 0 0 32 [ 5] .debug_line PROGBITS 00000000 00b516 006cb5 00 0 0 1 [ 6] .debug_info PROGBITS 00000000 0121cb 0121ce 00 0 0 1 [ 7] .debug_abbrev PROGBITS 00000000 024399 003fd7 00 0 0 1 [ 8] .debug_aranges PROGBITS 00000000 028370 0003a8 00 0 0 8 [ 9] .debug_str PROGBITS 00000000 028718 000eb6 01 MS 0 0 1 [10] .debug_loc PROGBITS 00000000 0295ce 00681e 00 0 0 1 [11] .debug_ranges PROGBITS 00000000 02fdec 000d08 00 0 0 1 [12] .comment PROGBITS 00000000 030af4 00002b 01 MS 0 0 1 [13] .symtab SYMTAB 00000000 030b20 002050 10 14 78 4 [14] .strtab STRTAB 00000000 032b70 0011ac 00 0 0 1 [15] .shstrtab STRTAB 00000000 033d1c 000096 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), p (processor specific) \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230'.text section'\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff08Off\uff09\u662f001000 \u5927\u5c0f\u662f0070da\uff0c\u7d27\u8ddf\u5176\u540e\u7684\u662f\u2018.rodata\u2019\uff0c\u5b83\u7684\u4f4d\u7f6e\u5e94\u8be5\u662f 001000 + 0070da = 0080da \uff0c\u53ef\u662f.rodata \u7684Off \u5374\u663e\u793a0080e0\uff0c\u8fd9\u662f\u56e0\u4e3a.rodata\u662f\u630932\u4e2a\u5b57\u8282\u5bf9\u9f50\u7684\uff08Al\uff09, 0080da \u630932\u4e2a\u5b57\u8282\u5bf9\u9f50\u540e\u5c31\u662f0080e0\uff0c'.rodata'\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08off=0080e0\uff09 + \u5b83\u7684\u5927\u5c0f\uff08size=0009cb\uff09 = 008aab \u8fd9\u5c31\u662f\u2018.rodata\u2019\u7684\u7ed3\u675f\u4f4d\u7f6e, \u2018.rodata\u2019\u7684\u7ed3\u675f\u4f4d\u7f6e 008aab - \u2018.text\u2019 \u7684\u8d77\u59cb\u4f4d\u7f6e 001000 = 007aab \u6b63\u662fProgram Headers\u4e2d\u7b2c\u4e00\u4e2asegment\u7684\u5927\u5c0f\uff08FileSiz\uff09\u3002\u8fd9\u6b63\u662f\u56e0\u4e3a\u7b2c\u4e00\u4e2asegment \u5305\u542b text .rodata \u8fd9\u4e24\u4e2asection, \u800c\u7f16\u8bd1\u5668\u4f1a\u628a\u6bcf\u4e2asegment\u4e2d\u5305\u542b\u7684sections \u653e\u5728\u4e00\u8d77\u6309\u987a\u5e8f\u6392\u5217. \u540c\u6837\u7684\u9053\u7406\u7b2c\u4e8c\u4e2asegment\u4e5f\u662f\u8fd9\u6837\u7684\u60c5\u51b5\u3002 xv6 \u7684elf.h \u6587\u4ef6\u4e2d\u6709\u5173\u4e8eELF header\u548cprogram header \u7684\u8be6\u7ec6\u5b9a\u4e49. \u4ece bootmain \u5f00\u59cb \u5728\u201c\u4ece\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f\u90a3\u4e00\u8282\u4e2d\u201d\u6211\u4eec\u5199\u5230 \u901a\u8fc7\u8fd9\u4e2a\u8df3\u8f6c\u5b9e\u9645\u4e0a CPU \u5c31\u4f1a\u8df3\u8f6c\u5230 bootasm.S \u6587\u4ef6\u7684 start32 \u6807\u8bc6\u7b26\u5904\u7ee7\u7eed\u6267\u884c\u4e86 \u6211\u4eec\u6253\u5f00 bootasm.S \u6587\u4ef6\u770b\u770b\u5bf9\u5e94\u7684 start32 \u4f4d\u7f6e\u5904\u7684\u4ee3\u7801\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 .code32 # Tell assembler to generate 32-bit code now. start32: # Set up the protected-mode data segment registers # \u50cf\u4e0a\u9762\u8bb2 ljmp \u65f6\u6240\u8bf4\u7684\uff0c\u8fd9\u65f6\u5019\u5df2\u7ecf\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u4e86 # \u6570\u636e\u6bb5\u5728 GDT \u4e2d\u7684\u4e0b\u6807\u662f 2\uff0c\u6240\u4ee5\u8fd9\u91cc\u6570\u636e\u6bb5\u7684\u6bb5\u9009\u62e9\u5b50\u662f 2 << 3 = 0000 0000 0001 0000 # \u8fd9 16 \u4f4d\u7684\u6bb5\u9009\u62e9\u5b50\u4e2d\u7684\u524d 13 \u4f4d\u662f GDT \u6bb5\u8868\u4e0b\u6807\uff0c\u8fd9\u91cc\u524d 13 \u4f4d\u7684\u503c\u662f 2 \u4ee3\u8868\u9009\u62e9\u4e86\u6570\u636e\u6bb5 # \u8fd9\u91cc\u5c06 3 \u4e2a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\u90fd\u8d4b\u503c\u6210\u6570\u636e\u6bb5\u6bb5\u9009\u62e9\u5b50\u7684\u503c movw $(SEG_KDATA<<3), %ax # Our data segment selector \u6bb5\u9009\u62e9\u5b50\u8d4b\u503c\u7ed9 ax \u5bc4\u5b58\u5668 movw %ax, %ds # -> DS: Data Segment \u521d\u59cb\u5316\u6570\u636e\u6bb5\u5bc4\u5b58\u5668 movw %ax, %es # -> ES: Extra Segment \u521d\u59cb\u5316\u6269\u5c55\u6bb5\u5bc4\u5b58\u5668 movw %ax, %ss # -> SS: Stack Segment \u521d\u59cb\u5316\u5806\u6808\u6bb5\u5bc4\u5b58\u5668 movw $0, %ax # Zero segments not ready for use ax \u5bc4\u5b58\u5668\u6e05\u96f6 movw %ax, %fs # -> FS \u8f85\u52a9\u5bc4\u5b58\u5668\u6e05\u96f6 movw %ax, %gs # -> GS \u8f85\u52a9\u5bc4\u5b58\u5668\u6e05\u96f6 # Set up the stack pointer and call into C. movl $start, %esp call bootmain \u8fd9\u91cc\u5728\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u5bc4\u5b58\u5668\u540e\u76f4\u63a5\u8c03\u7528\u4e86\u4e00\u4e2a\u53eb\u505a bootmain \u7684\u51fd\u6570\uff0c\u800c\u8fd9\u4e2a\u51fd\u6570\u662f\u5199\u5728 bootmain.c \u6587\u4ef6\u4e2d\u7684\uff0c\u7ec8\u4e8e\u6211\u4eec\u6682\u65f6\u544a\u522b\u4e86\u6c47\u7f16\u6765\u5230\u4e86 C \u7684\u4e16\u754c\u4e86\u3002\u6765\u770b\u770b bootmain \u51fd\u6570\u5728\u505a\u4ec0\u4e48\u4e8b\u60c5\u3002 bootmain.c \u8fd9\u4e2a\u6587\u4ef6\u5f88\u5c0f\uff0c\u4ee3\u7801\u5f88\u5c11\uff0c\u5b83\u5176\u5b9e\u662f\u5f15\u5bfc\u5de5\u4f5c\u7684\u6700\u540e\u90e8\u5206\uff08\u5f15\u5bfc\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u5728 bootasm.S \u4e2d\u5b9e\u73b0\uff09\uff0c\u5b83\u8d1f\u8d23\u5c06\u5185\u6838\u4ece\u786c\u76d8\u4e0a\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u5f00\u59cb\u6267\u884c\u5185\u6838\u4e2d\u7684\u7a0b\u5e8f\u3002\u6211\u4eec\u6765\u770b\u4ee3\u7801\u3002 void bootmain(void) { struct elfhdr *elf; struct proghdr *ph, *eph; void (*entry)(void); uchar* pa; // \u4ece 0xa0000 \u5230 0xfffff \u7684\u7269\u7406\u5730\u5740\u8303\u56f4\u5c5e\u4e8e\u8bbe\u5907\u7a7a\u95f4\uff0c // \u6240\u4ee5\u5185\u6838\u653e\u7f6e\u5728 0x10000 \u5904\u5f00\u59cb elf = (struct elfhdr*)0x10000; // scratch space // \u4ece\u5185\u6838\u6240\u5728\u786c\u76d8\u4f4d\u7f6e\u8bfb\u53d6\u4e00\u5185\u5b58\u9875 4kb \u6570\u636e readseg((uchar*)elf, 4096, 0); // \u5224\u65ad\u662f\u5426\u4e3a ELF \u6587\u4ef6\u683c\u5f0f if(elf->magic != ELF_MAGIC) return; // let bootasm.S handle error // \u52a0\u8f7d ELF \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u6bb5 (ignores ph flags). ph = (struct proghdr*)((uchar*)elf + elf->phoff); eph = ph + elf->phnum; for(; ph < eph; ph++){ pa = (uchar*)ph->paddr; readseg(pa, ph->filesz, ph->off); if(ph->memsz > ph->filesz) stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz); } // Call the entry point from the ELF header. // Does not return! entry = (void(*)(void))(elf->entry); entry(); } \u8fd9\u91cc\u7684elfhdr\u5c31\u662fELF header, proghdr\u5c31\u662fprogram header, for \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u628aELF kernel \u6587\u4ef6\u4e2d\u7684segment\u6240\u8bb0\u5f55\u7684\u88ab\u52a0\u8f7d\u533a\u57df\u52a0\u8f7d\u5230\u5bf9\u5e94segment\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740\u4e0a\uff08ph->paddr\uff09\uff0cph->off\u662f\u88ab\u52a0\u8f7d\u533a\u57df\u5728ELF\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c ph->filesz\u662f\u88ab\u52a0\u8f7d\u533a\u57df\u7684\u5b9e\u9645\u5927\u5c0f\uff0c\u5f53 ph->memsz \u5927\u4e8eph->filesz\u65f6\uff0c\u5269\u4f59\u7684\u533a\u95f4\u8981\u586b\u5145\u4e3a0\u3002\u52a0\u8f7d\u5b8c\u6210\u540e\u8df3\u8f6c\u5230\u5165\u53e3\u51fd\u6570\uff08elf->entry\uff09\u5f00\u59cb\u8fd0\u884c\u5185\u6838\u3002 \u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u8bfb\u53d6\u78c1\u76d8\u4fe1\u606f\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u770b\u770b\u662f\u600e\u6837\u901a\u8fc7\u5411\u7279\u5b9a\u7aef\u53e3\u53d1\u9001\u6570\u636e\u6765\u8fbe\u5230\u64cd\u4f5c\u78c1\u76d8\u76ee\u7684\u7684\u3002 // Read a single sector at offset into dst. // \u8fd9\u91cc\u4f7f\u7528\u7684\u662f LBA \u78c1\u76d8\u5bfb\u5740\u6a21\u5f0f // LBA\u662f\u975e\u5e38\u5355\u7eaf\u7684\u4e00\u79cd\u5bfb\u5740\u6a21\u5f0f\ufe54\u4ece0\u5f00\u59cb\u7f16\u53f7\u6765\u5b9a\u4f4d\u533a\u5757\uff0c // \u7b2c\u4e00\u533a\u5757LBA=0\uff0c\u7b2c\u4e8c\u533a\u5757LBA=1\uff0c\u4f9d\u6b64\u7c7b\u63a8 void readsect(void *dst, uint offset) // 0x10000, 1 { // Issue command. waitdisk(); outb(0x1F2, 1); // \u8981\u8bfb\u53d6\u7684\u6247\u533a\u6570\u91cf count = 1 outb(0x1F3, offset); // \u6247\u533a LBA \u5730\u5740\u7684 0-7 \u4f4d outb(0x1F4, offset >> 8); // \u6247\u533a LBA \u5730\u5740\u7684 8-15 \u4f4d outb(0x1F5, offset >> 16); // \u6247\u533a LBA \u5730\u5740\u7684 16-23 \u4f4d outb(0x1F6, (offset >> 24) | 0xE0); // offset | 11100000 \u4fdd\u8bc1\u9ad8\u4e09\u4f4d\u6052\u4e3a 1 // \u7b2c7\u4f4d \u6052\u4e3a1 // \u7b2c6\u4f4d LBA\u6a21\u5f0f\u7684\u5f00\u5173\uff0c\u7f6e1\u4e3aLBA\u6a21\u5f0f // \u7b2c5\u4f4d \u6052\u4e3a1 // \u7b2c4\u4f4d \u4e3a0\u4ee3\u8868\u4e3b\u786c\u76d8\u3001\u4e3a1\u4ee3\u8868\u4ece\u786c\u76d8 // \u7b2c3~0\u4f4d \u6247\u533a LBA \u5730\u5740\u7684 24-27 \u4f4d outb(0x1F7, 0x20); // 20h\u4e3a\u8bfb\uff0c30h\u4e3a\u5199 // Read data. waitdisk(); insl(0x1F0, dst, SECTSIZE/4); } \u6211\u4eec\u5df2\u7ecf\u8bb2\u5230\u4e86\u5982\u4f55\u901a\u8fc7\u5411 804x \u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u53d1\u9001\u4fe1\u53f7\u6765\u6253\u5f00 A20 gate \u4e86\uff0c\u540c\u6837\u9053\u7406\uff0c\u6211\u4eec\u5411\u786c\u76d8\u63a7\u5236\u5668\u7684\u6307\u5b9a\u7aef\u53e3\u53d1\u9001\u4fe1\u53f7\u5c31\u53ef\u4ee5\u64cd\u4f5c\u786c\u76d8\uff0c\u4ece\u786c\u76d8\u8bfb\u53d6\u6216\u5411\u786c\u76d8\u5199\u5165\u6570\u636e\u3002IDE \u6807\u51c6\u5b9a\u4e49\u4e86 8 \u4e2a\u5bc4\u5b58\u5668\u6765\u64cd\u4f5c\u786c\u76d8\u3002PC \u4f53\u7cfb\u7ed3\u6784\u5c06\u7b2c\u4e00\u4e2a\u786c\u76d8\u63a7\u5236\u5668\u6620\u5c04\u5230\u7aef\u53e3 1F0-1F7 \u5904\uff0c\u800c\u7b2c\u4e8c\u4e2a\u786c\u76d8\u63a7\u5236\u5668\u5219\u88ab\u6620\u5c04\u5230\u7aef\u53e3 170-177 \u5904\u3002\u8fd9\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u63cf\u8ff0\u5982\u4e0b\uff08\u4ee5\u7b2c\u4e00\u4e2a\u63a7\u5236\u5668\u4e3a\u4f8b\uff09\uff1a 1F0 - \u6570\u636e\u5bc4\u5b58\u5668\u3002\u8bfb\u5199\u6570\u636e\u90fd\u5fc5\u987b\u901a\u8fc7\u8fd9\u4e2a\u5bc4\u5b58\u5668 1F1 - \u9519\u8bef\u5bc4\u5b58\u5668\uff0c\u6bcf\u4e00\u4f4d\u4ee3\u8868\u4e00\u7c7b\u9519\u8bef\u3002\u5168\u96f6\u8868\u793a\u64cd\u4f5c\u6210\u529f\u3002 1F2 - \u6247\u533a\u8ba1\u6570\u3002\u8fd9\u91cc\u9762\u5b58\u653e\u4f60\u8981\u64cd\u4f5c\u7684\u6247\u533a\u6570\u91cf 1F3 - \u6247\u533aLBA\u5730\u5740\u76840-7\u4f4d 1F4 - \u6247\u533aLBA\u5730\u5740\u76848-15\u4f4d 1F5 - \u6247\u533aLBA\u5730\u5740\u768416-23\u4f4d 1F6 (\u4f4e4\u4f4d) - \u6247\u533aLBA\u5730\u5740\u768424-27\u4f4d 1F6 (\u7b2c4\u4f4d) - 0\u8868\u793a\u9009\u62e9\u4e3b\u76d8\uff0c1\u8868\u793a\u9009\u62e9\u4ece\u76d8 1F6 (5-7\u4f4d) - \u5fc5\u987b\u4e3a1 1F7 (\u5199) - \u547d\u4ee4\u5bc4\u5b58\u5668 1F7 (\u8bfb) - \u72b6\u6001\u5bc4\u5b58\u5668 bit 7 = 1 \u63a7\u5236\u5668\u5fd9 bit 6 = 1 \u9a71\u52a8\u5668\u5c31\u7eea bit 5 = 1 \u8bbe\u5907\u9519\u8bef bit 4 N/A bit 3 = 1 \u6247\u533a\u7f13\u51b2\u533a\u9519\u8bef bit 2 = 1 \u78c1\u76d8\u5df2\u88ab\u8bfb\u6821\u9a8c bit 1 N/A bit 0 = 1 \u4e0a\u4e00\u6b21\u547d\u4ee4\u6267\u884c\u5931\u8d25 \u5185\u6838\u52a0\u8f7d\u540e\u7684\u7cfb\u7edf\u5185\u5b58\u5e03\u5c40 \u81f3\u6b64\u5185\u6838\u5df2\u7ecf\u88ab\u8f7d\u5165\u5185\u5b58\u5e76\u51c6\u5907\u6295\u5165\u8fd0\u884c\u4e86\u3002\u5728\u7ed3\u675f\u8fd9\u4e00\u7bc7\u524d\u6211\u4eec\u518d\u770b\u4e00\u773c\u76ee\u524d\u72b6\u6001\u4e0b\u7cfb\u7edf\u6574\u4f53\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u5bf9\u5373\u5c06\u8fd0\u884c\u7684\u5185\u6838\u73af\u5883\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\u3002 \u4ece bootasm.S \u6587\u4ef6\u7684\u4ee3\u7801 movl $start, %esp # \u6808\u9876\u88ab\u653e\u7f6e\u5728 0x7C00 \u5904\uff0c\u5373 $start \u53ef\u77e5\uff0c\u6267\u884c bootmain.c \u4e4b\u524d bootasm.S \u6c47\u7f16\u4ee3\u7801\u5df2\u7ecf\u5c06\u6808\u7684\u6808\u9876\u8bbe\u7f6e\u5728\u4e86 0x7C00 \u5904\u3002\u4e4b\u524d\u6211\u4eec\u4e86\u89e3\u8fc7 x86 \u67b6\u6784\u8ba1\u7b97\u673a\u7684\u542f\u52a8\u8fc7\u7a0b\uff0cBIOS \u4f1a\u5c06\u5f15\u5bfc\u6247\u533a\u7684\u5f15\u5bfc\u7a0b\u5e8f\u52a0\u8f7d\u5230 0x7C00 \u5904\u5e76\u5f15\u5bfc CPU \u4ece\u6b64\u5904\u5f00\u59cb\u8fd0\u884c\uff0c\u6545\u6808\u9876\u5373\u88ab\u8bbe\u7f6e\u5728\u4e86\u548c\u5f15\u5bfc\u7a0b\u5e8f\u4e00\u81f4\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u3002\u6211\u4eec\u77e5\u9053\u6808\u662f\u81ea\u6808\u9876\u5f00\u59cb\u5411\u4e0b\u589e\u957f\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u6808\u4f1a\u9010\u6e10\u8fdc\u79bb\u5f15\u5bfc\u7a0b\u5e8f\uff0c\u6240\u4ee5\u8fd9\u91cc\u8fd9\u6837\u5b89\u7f6e\u6808\u9876\u7684\u4f4d\u7f6e\u5e76\u65e0\u4ec0\u4e48\u95ee\u9898\u3002 \u5728 bootmain.c \u6587\u4ef6\u7684\u4ee3\u7801 elf = (struct elfhdr*)0x10000; // \u4ece\u5185\u6838\u6240\u5728\u786c\u76d8\u4f4d\u7f6e\u8bfb\u53d6\u4e00\u5185\u5b58\u9875 4kb \u6570\u636e readseg((uchar*)elf, 4096, 0); \u53ef\u4ee5\u770b\u51faboot loader \u5148\u628a\u5185\u6838ELF\uff08Executable and Linkable Format\uff09\u52a0\u8f7d\u5230 0x10000 (64K)\u4f4d\u7f6e(\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u4e2a\u4efb\u610f\u9009\u53d6\u7684\u4e34\u65f6\u5b58\u653e\u7684\u4f4d\u7f6e)\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6 ELF header \u548c program header , \u6839\u636eprograme header\u91cc\u7684\u6bb5\u8bb0\u5f55\u7684\u52a0\u8f7d\u5bf9\u5e94\u7684\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5230paddr\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u5176\u4e2d\u4ee3\u7801\u6bb5\u7684paddr\u662f0x100000(1M) ,\u6570\u636e\u6bb5\u7684paddr\u662f0x00108000. \u6240\u4ee5\u52a0\u8f7d\u5b8c\u5185\u6838\u540e\u7684\u5185\u5b58\u5e03\u5c40\u793a\u610f\u56fe\u5982\u4e0b: +------------------------------+ | | | kernel data | +------------------------------+ 0x00108000 | | | kernel code | +------------------------------+ 0x00100000 | | | | | | +------------------------------+ 0x00007d00 | | | boot loader | STACK --------> +------------------------------+ 0x00007c00 grow down | | | stack | +------------------------------+ 0x00000000 \u53c2\u8003\uff1a http://leenjewel.github.io/blog/2014/07/29/%5B%28xue-xi-xv6%29%5D-cong-shi-mo-shi-dao-bao-hu-mo-shi/","title":"Boot loader"},{"location":"xv6/boot_loader/#the-boot-loader","text":"","title":"The Boot Loader"},{"location":"xv6/boot_loader/#x86","text":"\u770b\u5177\u4f53\u7684\u4ee3\u7801\u524d\u5148\u8bf4\u8bf4 x86 \u67b6\u6784\u5f00\u673a\u5f15\u5bfc\u7684\u76f8\u5173\u77e5\u8bc6\u3002\u4ece\u7ed9 x86 \u901a\u7535\u7684\u4e00\u523b\u5f00\u59cb\uff0cCPU \u6267\u884c\u7684\u7b2c\u4e00\u6bb5\u6307\u4ee4\u662f BIOS \u56fa\u5316\u5728 ROM \u4e0a\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u786c\u4ef6\u5b9a\u6b7b\u7684\u89c4\u77e9\uff0c\u5c31\u662f\u8fd9\u6837\u3002 \u800c BIOS \u5728\u786c\u4ef6\u81ea\u68c0\u5b8c\u6210\u540e\u4f1a\u6839\u636e\u4f60\u5728 BIOS \u91cc\u8bbe\u7f6e\u7684\u542f\u52a8\u987a\u5e8f\uff08\u786c\u76d8\u3001\u5149\u9a71\u3001USB\uff09\u8bfb\u53d6\u6bcf\u4e2a\u5f15\u5bfc\u8bbe\u5907\u7684\u7b2c\u4e00\u4e2a\u6247\u533a 512\u5b57\u8282\u7684\u5185\u5bb9\uff0c\u5e76\u5224\u65ad\u8fd9\u6bb5\u5185\u5bb9\u7684\u6700\u540e 2 \u5b57\u8282\u662f\u5426\u4e3a 0xAA55\uff0c\u5982\u679c\u662f\u8bf4\u660e\u8fd9\u4e2a\u8bbe\u5907\u662f\u53ef\u5f15\u5bfc\u7684\uff0c\u4e8e\u662f\u5c31\u5c06\u8fd9 512 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5185\u5b58\u7684 0x7c00\uff0c\u7136\u540e\u544a\u8bc9 CPU \u53bb\u6267\u884c\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6307\u4ee4\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u540c\u6837\u662f\u786c\u4ef6\u5b9a\u6b7b\u7684\u89c4\u77e9\uff0c\u5c31\u662f\u8fd9\u6837\u3002 \u6709\u4e86\u4e0a\u9762\u7684\u4ecb\u7ecd\u6211\u4eec\u518d\u56de\u5230 xv6 \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u7f16\u8bd1\u751f\u6210\u7684 bootblock \u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f60\u4f1a\u60ca\u559c\u7684\u53d1\u73b0\u5b83\u7684\u6587\u4ef6\u5927\u5c0f\u521a\u597d\u662f 512 \u5b57\u8282\u3002\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\uff08\u6211\u5728 Mac OSX \u4e0b\u7528\u7684\u662f 0xED \u8fd9\u4e2a\u8f6f\u4ef6\uff09\u6253\u5f00 bootblock \u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4f60\u53c8\u4f1a\u53d1\u73b0\u8fd9\u4e2a 512 \u5b57\u8282\u7684\u6587\u4ef6\u7684\u6700\u540e\u4e24\u5b57\u8282\u6b63\u597d\u662f 0xAA55\u3002 \u770b\u4e00\u4e0bMakefile \u4e2d bootblock\u7684\u7684\u751f\u6210\u4ee3\u7801 bootblock: bootasm.S bootmain.c $(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c $(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S $(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o $(OBJDUMP) -S bootblock.o > bootblock.asm $(OBJCOPY) -S -O binary -j .text bootblock.o bootblock ./sign.pl bootblock $(LD)\u94fe\u63a5\u547d\u4ee4\u8d1f\u8d23\u628a'.o'\u6587\u4ef6\u94fe\u63a5\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u4e0a\u9762\u8bf4\u8fc7BIOS\u4f1a\u628a\u5f15\u5bfc\u6247\u533a\uff08boot sector\uff09\u91cc\u7684boot loader \u52a0\u8f7d\u52300x7C00\u7684\u5185\u5b58\u5730\u5740\u4e0a\uff0c\u8fd9\u4e5f\u662fboot loader\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9,\u8fd9\u91cc\u7684 -Ttext 0x7C00 \u5c31\u662f\u544a\u8bc9\u94fe\u63a5\u5668\u4ee3\u7801\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u662f0x7C00\uff0c \u8fd9\u6837\u94fe\u63a5\u5668\u5c31\u53ef\u4ee5\u5728\u4ea7\u751f\u7684\u4ee3\u7801\u4e2d\u751f\u6210\u6b63\u786e\u7684\u5185\u5b58\u5730\u5740\u3002\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5165\u53e3\u662f start(\u901a\u8fc7 -e start \u8bbe\u5b9a)\u3002\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u662fELF\u683c\u5f0f\u7684\uff0c\u4f46\u662f\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u8fd8\u672a\u88ab\u52a0\u8f7d\u8fd0\u884c\u65e0\u6cd5\u8bc6\u522bELF\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u6240\u4ee5$(OBJCOPY)\u547d\u4ee4\u628abootblock.o\u8fd9\u4e2aELF\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6bb5\uff08 -j .text \uff09\u6309\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\uff08 -O binary \uff09\u62f7\u8d1d\u5230bootblock\u6587\u4ef6\u4e2d\u3002./sign.pl\u8fd9\u4e2a\u547d\u4ee4\u8d1f\u8d23\u628a boot loader \u6587\u4ef6bootblock\u586b\u5145\u4e3a512\u4e2a\u5b57\u8282\u5927\u5c0f\uff0c\u7136\u540e\u628a\u672b\u5c3e\u4e24\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a 0xAA55 \u4f5c\u4e3a\u5f15\u5bfc\u6247\u533a\u7684\u6807\u793a\u3002 \u5728 xv6.img \u7684\u751f\u6210\u4ee3\u7801\u4e2d xv6.img: bootblock kernel fs.img dd if=/dev/zero of=xv6.img count=10000 dd if=bootblock of=xv6.img conv=notrunc dd if=kernel of=xv6.img seek=1 conv=notrunc \u53ef\u4ee5\u53d1\u73b0xv6.img \u5c31\u662f\u628abootblock\u548ckernel\u62fc\u63a5\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\u662f10000\u4e2a\u6247\u533a \uff08count=10000\uff09\uff0cbootbloack\u5728\u7b2c\u4e00\u4e2a\u6247\u533a\uff0ckernel\u88ab\u62fc\u63a5\u5230\u7b2c\u4e00\u4e2a\u6247\u533a\u540e\u8fb9\uff08seek=1\uff09\u3002","title":"x86 \u7684\u542f\u52a8"},{"location":"xv6/boot_loader/#boot-loader","text":"\u5728\"x86 \u7684\u542f\u52a8\"\u4e00\u8282\u4e2d\u8bb2\u5230BIOS\u4f1a\u628aboot loader\u52a0\u8f7d\u5230\u5185\u5b58\u76840x7c00\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u53bb\u6267\u884cboot loader\u4ee3\u7801\u3002\u6b64\u65f6\u63a7\u5236\u6743\u5df2\u7ecf\u4ea4\u7ed9boot loader\u4e86. boot loader\u4e3b\u8981\u5b8c\u6210\u4e86\u4e24\u4e2a\u529f\u80fd\uff1a \u5b9e\u6a21\u5f0f\u5207\u6362\u5230\u4fdd\u62a4\u6a21\u5f0f\uff1a\u4ece20\u4f4d\uff081M\uff09\u5bfb\u5740\u5b9e\u6a21\u5f0f\u5207\u6362\u523032\u4f4d(4G)\u5bfb\u5740\u7684\u4fdd\u62a4\u6a21\u5f0f \u52a0\u8f7d\u5185\u6838\uff1a\u6839\u636eELF\u5185\u6838\u6587\u4ef6\u6240\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740\uff0c\u4ece\u786c\u76d8\u4e2d\u628a\u5185\u6838\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5185\u6838ELF\u6587\u4ef6\u6240\u5730\u5740\u7684\u5165\u53e3\u70b9\u3002","title":"\u8fdb\u5165Boot Loader"},{"location":"xv6/boot_loader/#_1","text":"\u9996\u5148\u7406\u89e3\u4e00\u4e0b\u5b9e\u6a21\u5f0f\u4e0e\u4fdd\u62a4\u6a21\u5f0f\u3002\u5982\u679c\u8bf4\u8fdb\u7a0b\u662f\u5bf9CPU\u7684\u62bd\u8c61\uff0c\u6587\u4ef6\u662f\u5bf9\u786c\u76d8\u7684\u62bd\u8c61\uff0c\u90a3\u4e48\u865a\u62df\u5185\u5b58\u5c31\u662f\u5bf9\u7269\u7406\u5185\u5b58\u7684\u62bd\u8c61\u3002\u5b9e\u9645\u4e0a\u8ba1\u7b97\u673a\u7f16\u7a0b\u9762\u5bf9\u7684\u90fd\u662f\u865a\u62df\u5185\u5b58\uff0c\u4e5f\u5c31\u662f\u8bf4\u7f16\u7a0b\u65f6\u5b58\u53d6\u6570\u636e\u7684\u5730\u5740\u90fd\u662f\u865a\u62df\u5730\u5740\uff08\u4e5f\u5373\u903b\u8f91\u5730\u5740\uff09\uff0cCPU\u628a\u865a\u62df\u5730\u5740\u4ea4\u7ed9MMU\uff08Memery management unit\uff09\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u518d\u53bb\u8bbf\u95ee\u7269\u7406\u5185\u5b58\u3002\u5176\u5b9e\u8fd9\u91cc\u8bf4\u7684\u5185\u5b58\u662f\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\uff08Adress Space\uff09\u5e76\u4e0d\u5355\u6307\u5b58\u53d6\u6570\u636e\u7684\u5185\u5b58\uff0c\u4e5f\u5305\u62ec\u4e00\u4e9b\u5916\u90e8\u8bbe\u5907\u6bd4\u5982\u663e\u793a\u5668/\u952e\u76d8\u7b49\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u8fd9\u4e9b\u5916\u90e8\u8bbe\u5907\u8bfb\u5199\u4e5f\u662f\u88ab\u5f71\u5c04\u5230\u7279\u5b9a\u7684\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u4e0a\u3002 \u5b9e\u6a21\u5f0f\u4e0bMMU\u4e0d\u4f1a\u8fdb\u884c\u5730\u5740\u8f6c\u6362\u4e5f\u5c31\u662f\u8bf4\u865a\u62df\u5730\u5740\u7b49\u4e8e\u7269\u7406\u5730\u5740\u3002\u5b9e\u6a21\u5f0f\u5bfb\u5740\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b 16 \u2217 selector + offset \u7b2c\u4e00\u4e2a16\u4f4d\u7684\u503c\u53eb\u505aselector\u662f\u5b58\u50a8\u5728\u6bb5\u5bc4\u5b58\u5668\u91cc\u7684\uff0c\u7b2c\u4e8c\u4e2a16\u4f4d\u7684\u503c\u53eb\u505aoffset.\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u8868\u793a\u5462\uff1f\u539f\u6765\u65e9\u671f\u82f1\u7279\u5c14\u7684 8086 CPU \u662f 16 \u4f4d\u7684\uff0c\u5982\u679c\u76f4\u63a5\u7528\u6765\u8868\u793a\u5185\u5b58\u5730\u5740\u7684\u8bdd\uff0c16 \u4f4d\u6700\u5927\u53ef\u4ee5\u8868\u793a\u7684\u5185\u5b58\u5730\u5740\u662f 2^16 = 65536 \u4e2a\u5730\u5740\uff0c\u6bcf\u4e2a\u5730\u5740\u4ee3\u8868\u4e00\u5b57\u8282\u7684\u5185\u5b58\u6570\u636e\u7684\u8bdd\uff0c16 \u4f4d\u6700\u591a\u53ea\u80fd\u652f\u6301 64KB \u5185\u5b58\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u591f\u7528\u7684\u3002\u4e8e\u662f\u82f1\u7279\u5c14\u5728\u4fdd\u6301\u6570\u636e\u7ebf\u5bbd\u4e3a 16 \u4f4d\u7684\u540c\u65f6\u5c06\u5730\u5740\u7ebf\u7684\u5bbd\u5ea6\u589e\u5927\u5230 20 \u4f4d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5185\u5b58\u5730\u5740\u662f 20 \u4f4d\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u652f\u6301 2^20 = 1MB \u7684\u5185\u5b58\uff0c\u5f53\u65f6\u7684\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\u3002\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c16 \u4f4d\u7684\u6570\u636e\u7ebf\u5bbd\uff08\u5bc4\u5b58\u5668\u81ea\u7136\u4e5f\u662f 16 \u4f4d\u7684\uff09\u5982\u4f55\u80fd\u8868\u793a 20 \u4f4d\u7684\u5730\u5740\u5462\uff1f\u7b54\u6848\u662f\u7528\u4e24\u4e2a 16 \u4f4d\u7684\u5bc4\u5b58\u5668\u6765\u8868\u793a\u3002\u8fd9\u5c31\u662f\u201c\u6bb5\u57fa\u5740\u201d + \u201c\u504f\u79fb\u91cf\u201d\u5bfb\u5740\u65b9\u5f0f\u7684\u7531\u6765\u3002\u4e00\u4e2a 16 \u4f4d\u7684\u5bc4\u5b58\u5668\u6765\u8868\u793a\u201c\u6bb5\u57fa\u5740\u201d\uff08CS\u3001DS\u3001SS\u3001ES\u56db\u4e2a\u5bc4\u5b58\u5668\uff09\uff0c\u5177\u4f53\u7684\u505a\u6cd5\u662f\u5148\u5c06 16 \u4f4d\u7684\u201c\u6bb5\u57fa\u5740\u201d\u5de6\u79fb 4 \u4f4d\uff0c\u7136\u540e\u52a0\u4e0a 16 \u4f4d\u7684\u201c\u504f\u79fb\u91cf\u201d\u6700\u7ec8\u5f97\u5230 20 \u4f4d\u7684\u5185\u5b58\u5730\u5740\u9001\u5165\u5730\u5740\u7ebf\u3002 \u4fdd\u62a4\u6a21\u5f0f\u4e0b\u9762\u5bf9\u7684\u662f\u865a\u62df\u5730\u5740\uff0cCPU\u8fdb\u884c\u5b58\u53d6\u6570\u636e\u65f6\u865a\u62df\u5730\u5740\u4f1a\u88ab\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u7136\u540e\u518d\u53bb\u8bbf\u95ee\u5185\u5b58\u3002\u4fdd\u62a4\u6a21\u5f0f\u5206\u4e3a\u4e24\u79cd\uff0c\u6bb5\u4fdd\u5b58\u6a21\u5f0f\u548c\u9875\u4fdd\u62a4\u6a21\u5f0f\u3002 \u6bb5\u4fdd\u62a4\u6a21\u5f0f\u9700\u8981\u7ef4\u62a4\u4e00\u5f20\u5168\u5c40\u63cf\u8ff0\u7b26\u8868(GDT)\uff0cGDT\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u6bb5\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u548c\u957f\u5ea6\u4ee5\u53ca\u5176\u4ed6\u7684\u4e00\u4e9b\u4fdd\u62a4\u4f4d\u3002\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u544a\u8bc9CPU GDT\u6240\u5728\u7684\u5730\u5740\uff0cCPU\uff08MMU\uff09\u901a\u8fc7CS\u6bb5\u5bc4\u5b58\u5668\u7684\u6bb5\u5730\u5740\u7d22\u5f15\u5230\u67d0\u4e00\u6761\u6bb5\u8868\u8bb0\u5f55\uff0c\u627e\u5230\u5bf9\u5e94\u6bb5\u7684\u6bb5\u7269\u7406\u5730\u5740\uff0c\u518d\u52a0\u4e0aIP\u5bc4\u5b58\u5668\u7684\u504f\u79fb\u91cf\u5c31\u5f97\u5230\u4e86\u7269\u7406\u5730\u5740\u3002\u66f4\u591a\u5173\u4e8eMemory segmentation\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003(wikipedia)[https://en.wikipedia.org/wiki/Memory_segmentation] \u9875\u4fdd\u62a4\u6a21\u5f0f\u9700\u8981\u7ef4\u62a4\u4e00\u5f20\u9875\u8868\uff0c\u9875\u8868\u540c\u6837\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u9875\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\uff0c\u901a\u5e38\u4e00\u4e2a\u9875\u7684\u5927\u5c0f\u662f4Kb,\u90a3\u4e48\u4e00\u4e2a32\u4f4d\u7684\u5730\u5740\u7684\u524d20\u4f4d\u662f\u9875\u8868\u7684\u7d22\u5f15\uff0c\u540e12\u4f4d\u662f\u504f\u79fb\u91cf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u544a\u8bc9CPU\u9875\u8868\u7684\u5730\u5740\uff0cCPU\uff08MMU\uff09\u901a\u8fc7\u865a\u62df\u5730\u5740\u7684\u524d20\u4f4d\u7d22\u5f15\u5230\u5bf9\u5e94\u7684\u9875\u8bb0\u5f55\uff0c\u627e\u5230\u5bf9\u5e94\u9875\u7684\u7269\u7406\u5730\u5740\uff0c\u518d\u52a0\u4e0a\u865a\u62df\u5730\u5740\u540e12\u4f4d\u7684\u504f\u79fb\u91cf\u5f97\u5230\u7269\u7406\u5730\u5740\u3002","title":"\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f"},{"location":"xv6/boot_loader/#bootasms","text":"\u4e0b\u9762\u770b\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\uff0cboot loader\u6709\u4e24\u4e2a\u6587\u4ef6bootasm.S\u548cbootmain.c. boot loader\u7684\u5165\u53e3\u5c31\u5728bootasm.S\u6587\u4ef6\u4e2d .code16 # Assemble for 16-bit mode .globl start start: cli # BIOS enabled interrupts; disable # Zero data segment registers DS, ES, and SS. xorw %ax,%ax # Set %ax to zero movw %ax,%ds # -> Data Segment movw %ax,%es # -> Extra Segment movw %ax,%ss # -> Stack Segment .code16 \u8fd9\u53e5\u662f\u8bc9 CPU \u6211\u4eec\u76ee\u524d\u662f\u5728 16 \u4f4d\u6a21\u5f0f\u4e0b\u6267\u884c\u4ee3\u7801\uff0c\u6b64\u65f6\u5185\u5b58\u5bfb\u5740\u80fd\u529b\u53ea\u6709 1MB\uff0c\u5e76\u4e14\u662f\u201c\u5b9e\u6a21\u5f0f\u201d\u4e0b\u3002 cli \u6307\u4ee4\u5173\u95ed\u4e86\u4e2d\u65ad\u54cd\u5e94\uff0c\u610f\u5473\u7740\u4ece\u8fd9\u4e00\u523b\u5f00\u59cb\u4f60\u7684\u8ba1\u7b97\u673a\u5c06\u4e0d\u518d\u54cd\u5e94\u4efb\u4f55\u4e2d\u65ad\u4e8b\u4ef6\uff08\u6bd4\u5982\u8fd9\u65f6\u5019\u4f60\u6572\u4e2a\u952e\u76d8\u70b9\u4e2a\u9f20\u6807\u5565\u7684\uff0cCPU \u5c31\u4e0d\u518d\u7406\u4f60\u4e86\uff09\u3002\u4e4b\u6240\u4ee5\u8981\u5173\u95ed\u4e2d\u65ad\u54cd\u5e94\u662f\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f15\u5bfc\u4ee3\u7801\u7684\u987a\u5229\u6267\u884c\uff08\u603b\u4e0d\u80fd\u6267\u884c\u5230\u4e00\u534a\u88ab CPU \u7ed9\u4e2d\u65ad\u4e86\u5427\uff0c\u90a3\u76f4\u63a5\u5c31\u6302\u4e86\uff09\u3002 \u63a5\u4e0b\u6765\u7684 4 \u884c\u4ee3\u7801\u663e\u793a\u7528\u5f02\u6216\u5c06 %ax \u5bc4\u5b58\u5668\u7684\u503c\u7f6e\u6210 0\uff0c\u7136\u540e\u5728\u7528 %ax \u5bc4\u5b58\u5668\u7684\u503c\u5c06 %ds\u3001%es\u3001%ss \u4e09\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u5168\u90e8\u7f6e 0\uff0c\u76f8\u5f53\u4e8e\u521d\u59cb\u5316\u4e86\u3002 \u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b bootasm.S \u7684\u4ee3\u7801\u3002\u5728\u521d\u59cb\u5316\u597d\u5bc4\u5b58\u5668\u540e\uff0cbootasm.S \u63a5\u4e0b\u6765\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u6253\u5f00 A20 gate \u7a81\u7834 1MB \u5185\u5b58\u5bfb\u5740\u7684\u9650\u5236\u3002X86\u8ba1\u7b97\u673a\u8981\u7a81\u7834 1MB \u5185\u5b58\u5bfb\u5740\u7684\u9650\u5236\u5c31\u8981\u628a A20 gate \u6253\u5f00\uff0c\u63a7\u5236 A20 gate \u7684\u65b9\u6cd5\u6709 3 \u79cd\uff1a * 804x \u952e\u76d8\u63a7\u5236\u5668\u6cd5 * Fast A20 \u6cd5 * BIOS \u4e2d\u65ad\u6cd5 xv6 \u7528\u4e86\u7b2c\u4e00\u79cd 804x \u952e\u76d8\u63a7\u5236\u5668\u6cd5\uff0c\u8fd9\u4e5f\u662f\u6700\u53e4\u8001\u4e14\u6548\u7387\u6700\u6162\u7684\u4e00\u79cd\u3002\u5f53\u7136\u56e0\u4e3a\u786c\u4ef6\u7684\u4e0d\u540c\uff0c\u8fd9\u4e09\u79cd\u65b9\u6cd5\u53ef\u80fd\u4e0d\u4f1a\u88ab\u786c\u4ef6\u90fd\u652f\u6301\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u662f\u8fd9\u4e09\u79cd\u90fd\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u6bcf\u5c1d\u8bd5\u4e00\u4e2a\u5c31\u9a8c\u8bc1\u4e00\u4e0b A20 gate \u662f\u5426\u88ab\u6b63\u786e\u6253\u5f00\u4ee5\u4fdd\u8bc1\u517c\u5bb9\u5404\u79cd\u786c\u4ef6\u3002\u4f46\u662f xv6 \u4f5c\u4e3a\u4e00\u6b3e\u6559\u5b66\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u5c31\u6ca1\u5fc5\u8981\u505a\u7684\u8fd9\u4e48\u590d\u6742\u91cc\u3002\u53ea\u7528\u4e86\u4e00\u79cd\u6700\u53e4\u8001\u7684\u65b9\u6cd5\uff08\u4fdd\u8bc1\u517c\u5bb9\u5927\u591a\u6570\u786c\u4ef6\uff09\u800c\u4e14\u6ca1\u6709\u5bf9\u6253\u5f00\u6210\u529f\u4e0e\u5426\u505a\u9a8c\u8bc1\u3002\u50cf\u8bf8\u5982 Linux \u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u5c31\u628a\u4e09\u79cd\u65b9\u6cd5\u7684\u5b9e\u73b0\u90fd\u505a\u597d\uff0c\u5e76\u4e14\u52a0\u4e0a\u4e86\u9a8c\u8bc1\u673a\u5236\u3002 \u6211\u4eec\u5177\u4f53\u6765\u770b xv6 \u7684\u5b9e\u73b0\u4ee3\u7801 # Physical address line A20 is tied to zero so that the first PCs # with 2 MB would run software that assumed 1 MB. Undo that. # /////////////////////////////////////////////////////////////// # \u8fd9\u91cc\u7528\u4e86\u901a\u8fc7\u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u7684\u65b9\u6cd5\u6253\u5f00 A20 \u5730\u5740 # \u6253\u5f00 A20 \u5730\u5740\u7ebf\u7684\u65b9\u6cd5\u6709\u4e09\u79cd\uff0c\u5177\u4f53\u53ef\u53c2\u8003\uff1a # http://kernelx.weebly.com/a20-address-line.html # # \u4e0b\u9762\u90fd\u662f\u9488\u5bf9 804x \u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u7528\u5230\u7684\u4e24\u4e2a\u7aef\u53e3 # 0x64 \u4ece\u8be5\u7aef\u53e3\u6267\u884c in \u8bfb\u53d6\u64cd\u4f5c\u65f6\uff0c\u8bfb\u53d6\u72b6\u6001\u5bc4\u5b58\u5668\uff0c8 \u4f4d\uff0c\u7b2c\u4e8c # \u4f4d\u6807\u8bc6\u8f93\u5165\u7f13\u51b2\u662f\u5426\u6709\u6570\u636e\u6240\u4ee5\u4e0b\u9762\u7528 0x2 \u6765 test \u8f93\u5165\u7f13\u51b2\u662f\u5426\u6709\u6570\u636e # \u5411\u8be5\u7aef\u53e3\u6267\u884c out \u5199\u64cd\u4f5c\u65f6\uff0c\u4ee3\u8868\u5411\u952e\u76d8\u63a7\u5236\u5668\u53d1\u9001\u547d\u4ee4\uff0c\u53d1\u9001 0xd1 \u4ee3 # \u8868\u8981\u5411\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u7aef\u53e3\u5199\u5165\u6570\u636e\uff0c\u8981\u5199\u5165\u7684\u6570\u636e\u901a\u8fc7 0x60 \u7aef\u53e3\u4f20\u5165 # # P2 \u7aef\u53e3\uff0c8\u4f4d\uff0c\u7b2c\u4e8c\u4f4d\u5c31\u662f A20 \u5f00\u5173\uff0c\u6240\u4ee5\u5728 seta20.2 \u4ee3\u7801\u6bb5\u5c06 0xdf \u901a\u8fc7 # 0x60 \u7aef\u53e3\u5199\u5165\u5230 P2 \u65f6\u5c31\u4f1a\u628a A20 \u7f6e\u4f4d\uff0cA20 \u6253\u5f00\u540e\uff0c\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f seta20.1: inb $0x64,%al # Wait for not busy testb $0x2,%al jnz seta20.1 # \u901a\u8fc7 0x64 \u72b6\u6001\u5bc4\u5b58\u5668\u7684\u7b2c\u4e8c\u4f4d\u5224\u65ad\u952e\u76d8\u7f13\u51b2\u533a\u91cc\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u8fd8\u6709\u6570\u636e\uff0c\u5219\u7b49\u5f85 movb $0xd1,%al # 0xd1 -> port 0x64 outb %al,$0x64 # 0xd1 \u4ee3\u8868\u5411 804x \u63a7\u5236\u5668\u7684 P2 \u5199\u6570\u636e seta20.2: inb $0x64,%al # Wait for not busy testb $0x2,%al jnz seta20.2 # \u540c\u4e0a\uff0c\u7ee7\u7eed\u5224\u65ad\u952e\u76d8\u7f13\u51b2\u533a\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u6709\u6570\u636e\uff0c\u5219\u7b49\u5f85 movb $0xdf,%al # 0xdf -> port 0x60 outb %al,$0x60 # \u5c06 0xdf 11011111 \u5199\u5165\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u53e3\uff0c\u610f\u5473\u7740 A20 \u6253\u5f00\uff0c\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f \u8fd9\u91cc bootasm.S \u7528\u4e86\u4e24\u4e2a\u65b9\u6cd5 seta20.1 \u548c seta20.2 \u6765\u5b9e\u73b0\u901a\u8fc7 804x \u952e\u76d8\u63a7\u5236\u5668\u6253\u5f00 A20 gate\u3002 \u8fd9\u4e2a\u529e\u6cd5\u786e\u5b9e\u662f\u5206\u4e24\u6b65\u6765\u641e\u7684\uff1a \u7b2c\u4e00\u6b65\u662f\u5411 804x \u952e\u76d8\u63a7\u5236\u5668\u7684 0x64 \u7aef\u53e3\u53d1\u9001\u547d\u4ee4\u3002\u8fd9\u91cc\u4f20\u9001\u7684\u547d\u4ee4\u662f 0xd1\uff0c\u8fd9\u4e2a\u547d\u4ee4\u7684\u610f\u601d\u662f\u8981\u5411\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u5199\u5165\u6570\u636e\u3002\u8fd9\u5c31\u662f seta20.1 \u4ee3\u7801\u6bb5\u6240\u505a\u7684\u5de5\u4f5c\u3002 \u7b2c\u4e8c\u6b65\u5c31\u662f\u5411\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u7aef\u53e3\u5199\u6570\u636e\u4e86\u3002\u5199\u6570\u636e\u7684\u65b9\u6cd5\u662f\u628a\u6570\u636e\u901a\u8fc7\u952e\u76d8\u63a7\u5236\u5668\u7684 0x60 \u7aef\u53e3\u5199\u8fdb\u53bb\u3002\u5199\u5165\u7684\u6570\u636e\u662f 0xdf\uff0c\u56e0\u4e3a A20 gate \u5c31\u5305\u542b\u5728\u952e\u76d8\u63a7\u5236\u5668\u7684 P2 \u7aef\u53e3\u4e2d\uff0c\u968f\u7740 0xdf \u7684\u5199\u5165\uff0cA20 gate \u5c31\u88ab\u6253\u5f00\u4e86\u3002 \u63a5\u4e0b\u6765\u8981\u505a\u7684\u5c31\u662f\u8fdb\u5165\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u4e86\u3002\u5728\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\u524d\u9700\u8981\u5c06 GDT \u51c6\u5907\u597d\u3002\u4ec0\u4e48\u662f GDT \uff1f\u5b83\u7684\u4e2d\u6587\u540d\u79f0\u53eb\u201c\u5168\u5c40\u63cf\u8ff0\u7b26\u8868\u201d\uff0c\u60f3\u8981\u5728\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u4e0b\u5bf9\u5185\u5b58\u8fdb\u884c\u5bfb\u5740\u5c31\u5148\u8981\u6709 GDT\uff0cGDT \u8868\u91cc\u7684\u6bcf\u4e00\u9879\u53eb\u505a\u201c\u6bb5\u63cf\u8ff0\u7b26\u201d\uff0c\u7528\u6765\u8bb0\u5f55\u6bcf\u4e2a\u5185\u5b58\u5206\u6bb5\u7684\u4e00\u4e9b\u5c5e\u6027\u4fe1\u606f\uff0c\u6bcf\u4e2a\u201c\u6bb5\u63cf\u8ff0\u7b26\u201d\u5360 8 \u5b57\u8282\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u773c\u8fd9\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u7684\u5177\u4f53\u7ed3\u6784\uff1a \u4e09\u5757\u201c\u57fa\u5730\u5740\u201d\u7ec4\u88c5\u8d77\u6765\u6b63\u597d\u5c31\u662f 32 \u4f4d\u7684\u6bb5\u8d77\u59cb\u5185\u5b58\u5730\u5740\uff0c\u4e24\u5757 Limit \u7ec4\u6210\u8be5\u5185\u5b58\u5206\u6bb5\u7684\u957f\u5ea6\uff0c\u63a5\u4e0b\u6765\u4f9d\u6b21\u89e3\u91ca\u4e00\u4e0b\u5176\u4ed6\u4f4d\u6240\u4ee3\u8868\u7684\u610f\u4e49: P: 0 \u672c\u6bb5\u4e0d\u5728\u5185\u5b58\u4e2d DPL: \u8bbf\u95ee\u8be5\u6bb5\u5185\u5b58\u6240\u9700\u6743\u9650\u7b49\u7ea7 00 \u2014 11\uff0c0\u4e3a\u6700\u5927\u6743\u9650\u7ea7\u522b S: 1 \u4ee3\u8868\u6570\u636e\u6bb5\u3001\u4ee3\u7801\u6bb5\u6216\u5806\u6808\u6bb5\uff0c0 \u4ee3\u8868\u7cfb\u7edf\u6bb5\u5982\u4e2d\u65ad\u95e8\u6216\u8c03\u7528\u95e8 E: 1 \u4ee3\u8868\u4ee3\u7801\u6bb5\uff0c\u53ef\u6267\u884c\u6807\u8bb0\uff0c0 \u4ee3\u8868\u6570\u636e\u6bb5 ED: 0 \u4ee3\u8868\u5ffd\u7565\u7279\u6743\u7ea7\uff0c1 \u4ee3\u8868\u9075\u5b88\u7279\u6743\u7ea7 RW: \u5982\u679c\u662f\u6570\u636e\u6bb5\uff08E=0\uff09\u52191 \u4ee3\u8868\u53ef\u5199\u5165\uff0c0 \u4ee3\u8868\u53ea\u8bfb\uff1b\u5982\u679c\u662f\u4ee3\u7801\u6bb5\uff08E=1\uff09\u52191 \u4ee3\u8868\u53ef\u8bfb\u53d6\uff0c0 \u4ee3\u8868\u4e0d\u53ef\u8bfb\u53d6 A: 1 \u8868\u793a\u8be5\u6bb5\u5185\u5b58\u8bbf\u95ee\u8fc7\uff0c0 \u8868\u793a\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7 G: 1 \u8868\u793a 20 \u4f4d\u6bb5\u754c\u9650\u5355\u4f4d\u662f 4KB\uff0c\u6700\u5927\u957f\u5ea6 4GB\uff1b0 \u8868\u793a 20 \u4f4d\u6bb5\u754c\u9650\u5355\u4f4d\u662f 1 \u5b57\u8282\uff0c\u6700\u5927\u957f\u5ea6 1MB DB:1 \u8868\u793a\u5730\u5740\u548c\u64cd\u4f5c\u6570\u662f 32 \u4f4d\uff0c0 \u8868\u793a\u5730\u5740\u548c\u64cd\u4f5c\u6570\u662f 16 \u4f4d XX: \u4fdd\u7559\u4f4d\u6c38\u8fdc\u662f 0 AA: \u7ed9\u7cfb\u7edf\u63d0\u4f9b\u7684\u4fdd\u7559\u4f4d \u6709\u4e86\u4e0a\u8ff0\u7684\u89e3\u91ca\uff0c\u6211\u4eec\u518d\u6765\u770b\u770b xv6 \u662f\u600e\u6837\u51c6\u5907\u81ea\u5df1\u7684 GDT \u7684\uff0c\u4ee3\u7801\u5728 bootasm.S \u6587\u4ef6\u6700\u5e95\u90e8\uff1a gdt: SEG_NULLASM # \u7a7a SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff) # \u4ee3\u7801\u6bb5 SEG_ASM(STA_W, 0x0, 0xffffffff) # \u6570\u636e\uff08\u5806\u6808\uff09\u6bb5 \u8fd9\u91cc\u7528\u5230\u4e86\u51e0\u4e2a\u5b8f\uff0c\u5177\u4f53\u7684\u5b8f\u5b9a\u4e49\u5728 asm.h \u6587\u4ef6\u4e2d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u76f4\u89c2\u7684\u611f\u53d7\u4e00\u4e0b xv6 \u7684 GDT \u6211\u628a\u5b8f\u8ba1\u7b97\u51fa\u6765\u7684\u503c\u76f4\u63a5\u7ffb\u8bd1\u8fc7\u6765\uff0c\u4ee3\u7801\u5e94\u8be5\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff1a gdt: .word 0, 0; .byte 0, 0, 0, 0 # \u7a7a .word 0xffff, 0x0000; .byte 0x00, 0x9a, 0xcf, 0x00 # \u4ee3\u7801\u6bb5 .word 0xffff, 0x0000; .byte 0x00, 0x92, 0xcf, 0x00 # \u6570\u636e\u6bb5 \u7136\u540e\u6211\u4eec\u518d\u628a\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u7684\u6bb5\u63cf\u8ff0\u7b26\u5177\u4f53\u6bcf\u4e00\u4f4d\u7684\u5bf9\u5e94\u503c\u8868\u5c55\u793a\u51fa\u6765\uff0c\u9996\u5148\u662f\u4ee3\u7801\u6bb5\uff1a \u7136\u540e\u662f\u6570\u636e\u6bb5\uff1a \u6211\u4eec\u6765\u4e00\u6b65\u6b65\u89e3\u91ca\u4e00\u4e0b\u3002\u9996\u5148\u8bf4\u8bf4\u8fd9\u4e24\u4e2a\u5185\u5b58\u6bb5\u7684\u5171\u540c\u70b9\uff0cDB = 1\uff0cG = 1\uff0c\u57fa\u5730\u5740\u90fd\u662f 0x00000000\uff0c\u5185\u5b58\u5206\u6bb5\u957f\u5ea6\u90fd\u662f 0xfffff\uff0c\u8fd9\u8bf4\u660e\u4ed6\u4eec\u90fd\u662f\u7528\u4e8e 32 \u4f4d\u5bfb\u5740\uff0c\u6240\u4f7f\u7528\u7684\u5185\u5b58\u662f\u4ece 0 \u5f00\u59cb\u5230 4GB \u7ed3\u675f\uff08\u5168\u90e8\u5185\u5b58\uff09\u3002\u8fd9\u91cc\u662f\u8fd9\u4e48\u7b97\u51fa\u6765\u7684\uff0c\u6bb5\u957f\u5ea6\u662f 0xfffff = 2^20\uff0cG = 1 \u8868\u793a\u6bb5\u754c\u9650\u5355\u4f4d\u662f 4k\uff0c\u6240\u4ee5 4k * 2^20 = 4GB\u3002 \u518d\u8bf4\u8bf4\u4ed6\u4eec\u7684\u4e0d\u540c\u70b9\uff0c\u4ee3\u7801\u6bb5\u7684 E = 1 \u800c\u6570\u636e\u6bb5\u7684 E = 0 \u8fd9\u8868\u540d\u4e86\u4ed6\u4eec\u7684\u8eab\u4efd\uff0c\u8eab\u4efd\u4e0d\u540c RW \u7684\u503c\u867d\u7136\u76f8\u540c\uff0c\u4f46\u4ee3\u8868\u7684\u610f\u4e49\u4e5f\u5c31\u4e0d\u76f8\u540c\u4e86\uff0c\u4ee3\u7801\u6bb5\u7684 RW = 1 \u4ee3\u8868\u53ef\u8bfb\u53d6\uff0c\u6570\u636e\u6bb5\u7684 RW = 1 \u8868\u793a\u53ef\u8bfb\u53ef\u5199\u3002\u8fd9\u4e5f\u548c\u6211\u4eec\u4e0a\u9762\u89e3\u91ca\u7684\u4fdd\u62a4\u6a21\u5f0f\u6240\u80fd\u591f\u8fbe\u5230\u7684\u76ee\u7684\u76f8\u543b\u5408\u3002 \u5f53\u7136\u4f5c\u4e3a\u4e00\u6b3e\u6559\u5b66\u4e3a\u76ee\u7684\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0cxv6 \u8fd9\u91cc\u7684 GDT \u8bbe\u7f6e\u8fd8\u662f\u4ee5\u7b80\u5355\u5bb9\u6613\u7406\u89e3\u4e3a\u76ee\u7684\u3002\u8bf8\u5982\u201c\u6743\u9650\u4f4d\u201d\u8fd9\u6837\u7684\u5b89\u5168\u673a\u5236\u5c31\u76f4\u63a5\u88ab\u5ffd\u7565\u4e86\uff0c\u800c\u5bf9\u5185\u5b58\u7684\u89c4\u5212\u4e5f\u6ca1\u6709\u505a\u5230\u771f\u6b63\u7684\u201c\u5206\u6bb5\u201d\uff0c\u800c\u662f\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u90fd\u542f\u7528\u4e86\u4ece 0 \u5230 4GB \u7684\u5168\u90e8\u5185\u5b58\u5bfb\u5740\u3002\u5176\u5b9e\u8fd9\u79cd\u5185\u5b58\u89c4\u5212\u65b9\u6cd5\u53eb\u505a\u201c\u5e73\u5766\u5185\u5b58\u6a21\u578b\u201d\uff0c\u5373\u4fbf\u662f Linux \u4e5f\u662f\u7528\u7684\u8fd9\u6837\u7684\u65b9\u5f0f\u89c4\u5212\u5185\u5b58\u7684\uff0c\u5e76\u6ca1\u6709\u505a\u5230\u771f\u6b63\u7684\u201c\u5206\u6bb5\u201d\u3002\u8fd9\u662f\u56e0\u4e3a x86 \u7684\u5206\u9875\u673a\u5236\u662f\u57fa\u4e8e\u5206\u6bb5\u7684\uff0cLinux \u9009\u7528\u4e86\u66f4\u5148\u8fdb\u7684\u5206\u9875\u673a\u5236\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u6240\u4ee5\u5728\u5206\u6bb5\u8fd9\u91cc\u53ea\u662f\u8d70\u4e00\u4e2a\u5fc5\u8981\u7684\u5f62\u5f0f\u7f62\u4e86\u3002\u800c xv6 \u540e\u9762\u5230\u5e95\u662f\u5426\u4e5f\u542f\u7528\u4e86\u5206\u9875\u673a\u5236\uff0c\u6211\u4eec\u76ee\u524d\u8fd8\u4e0d\u5f97\u800c\u77e5\u3002 GDT \u4e5f\u641e\u5b9a\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u628a\u6211\u4eec\u521a\u521a\u5728\u5185\u5b58\u4e2d\u8bbe\u5b9a\u597d\u7684 GDT \u7684\u4f4d\u7f6e\u544a\u8bc9 CPU\uff0c\u7136\u540e\u5c31\u201c\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u6b20\u4e1c\u98ce\u201d\u4e86\u3002CPU \u5355\u72ec\u4e3a\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\u53eb\u505a GDTR \u7528\u6765\u4fdd\u5b58\u6211\u4eec GDT \u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u548c\u6211\u4eec GDT \u7684\u957f\u5ea6\u3002GDTR \u5bc4\u5b58\u5668\u4e00\u5171 48 \u4f4d\uff0c\u5176\u4e2d\u9ad8 32 \u4f4d\u7528\u6765\u5b58\u50a8\u6211\u4eec\u7684 GDT \u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5176\u4f59\u7684\u4f4e 16 \u4f4d\u7528\u6765\u5b58\u6211\u4eec\u7684 GDT \u7684\u5360\u7528\u7a7a\u95f4\u7684\u5927\u5c0f\uff08\u6240\u5360\u5b57\u8282\u6570\uff09\u3002 16 \u4f4d\u53ef\u4ee5\u8868\u793a\u7684\u6700\u5927\u503c\u4e3a 65536 \uff0c\u800c\u4e00\u4e2a\u6bb5\u63cf\u8ff0\u7b26\u662f 8 \u5b57\u8282\uff0c\u6240\u4ee5 GDT \u6700\u591a\u53ef\u4ee5\u6709 8192 \u4e2a\u6bb5\u63cf\u8ff0\u7b26\u3002\u4e0d\u4ec5 CPU \u7528\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5bc4\u5b58\u5668 GDTR \u6765\u5b58\u50a8\u6211\u4eec\u7684 GDT\uff0c\u800c\u4e14\u8fd8\u4e13\u95e8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6307\u4ee4\u7528\u6765\u8ba9\u6211\u4eec\u628a GDT \u7684\u5730\u5740\u548c\u957f\u5ea6\u4f20\u7ed9 GDTR \u5bc4\u5b58\u5668\uff0c\u6765\u770b xv6 \u7684\u4ee3\u7801\uff1a lgdt gdtdesc \u800c\u8fd9\u4e2a gdtdesc \u548c gdt \u4e00\u8d77\u653e\u5728\u4e86 bootasm.S \u6587\u4ef6\u7684\u6700\u5e95\u90e8\uff0c\u6211\u4eec\u770b\u4e00\u773c\uff1a gdtdesc: .word (gdtdesc - gdt - 1) # 16 \u4f4d\u7684 gdt \u5927\u5c0fsizeof(gdt) - 1 .long gdt # 32 \u4f4d\u7684 gdt \u6240\u5728\u7269\u7406\u5730\u5740 \u4e0d\u591a\u4e0d\u5c11\uff0c\u6b63\u597d 48 \u4f4d\u4f20\u7ed9\u4e86 GDTR \u5bc4\u5b58\u5668\uff0c\u5230\u6b64 GDT \u5c31\u51c6\u5907\u597d\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8fdb\u5165\u4fdd\u62a4\u6a21\u5f0f\uff01 \u524d\u9762\u8bb2\u5230\uff0c\u5c31\u5982\u540c A20 gate \u8fd9\u4e2a\u5f00\u5173\u8d1f\u8d23\u6253\u5f00 1MB \u4ee5\u4e0a\u5185\u5b58\u5bfb\u5740\u4e00\u6837\uff0c\u60f3\u8981\u8fdb\u5165\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u6211\u4eec\u4e5f\u9700\u8981\u6253\u5f00\u4e00\u4e2a\u5f00\u5173\uff0c\u8fd9\u4e2a\u5f00\u5173\u53eb\u201c\u63a7\u5236\u5bc4\u5b58\u5668\u201d\uff0cx86 \u7684\u63a7\u5236\u5bc4\u5b58\u5668\u4e00\u5171\u6709 4 \u4e2a\u5206\u522b\u662f CR0\u3001CR1\u3001CR2\u3001CR3\uff0c\u800c\u63a7\u5236\u8fdb\u5165\u201c\u4fdd\u62a4\u6a21\u5f0f\u201d\u7684\u5f00\u5173\u5728 CR0 \u4e0a\uff0c\u8fd9\u56db\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f 32 \u4f4d\u7684\uff0c\u6211\u4eec\u770b\u4e00\u4e0b CR0 \u4e0a\u548c\u4fdd\u62a4\u6a21\u5f0f\u6709\u5173\u7684\u4f4d PG \u4e3a 0 \u65f6\u4ee3\u8868\u53ea\u4f7f\u7528\u5206\u6bb5\u5f0f\uff0c\u4e0d\u4f7f\u7528\u5206\u9875\u5f0f, \u4e3a 1 \u662f\u542f\u7528\u5206\u9875\u5f0f PE\u4e3a 0 \u65f6\u4ee3\u8868\u5173\u95ed\u4fdd\u62a4\u6a21\u5f0f\uff0c\u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f\u4e0b, \u4e3a 1 \u5219\u5f00\u542f\u4fdd\u62a4\u6a21\u5f0f \u7136\u540e\u6211\u4eec\u7ee7\u7eed\u770b xv6 \u6253\u5f00\u4fdd\u62a4\u6a21\u5f0f\u7684\u4ee3\u7801\uff1a movl %cr0, %eax orl $CR0_PE, %eax movl %eax, %cr0 \u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u64cd\u4f5c CR0\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u8981\u7528\u4e00\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u5f53\u524d CR0 \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u8fd9\u91cc\u7b2c\u4e00\u884c\u5c31\u662f\u7528\u901a\u7528\u5bc4\u5b58\u5668 eax \u6765\u4fdd\u5b58 cr0 \u5bc4\u5b58\u5668\u7684\u503c\uff1b\u7136\u540e CR0_PE \u8fd9\u4e2a\u5b8f\u7684\u5b9a\u4e49\u5728 mmu.h \u6587\u4ef6\u4e2d\uff0c\u662f\u4e2a\u6570\u503c 0x00000001\uff0c\u5c06\u8fd9\u4e2a\u6570\u503c\u4e0e eax \u4e2d\u7684 cr0 \u5bc4\u5b58\u5668\u7684\u503c\u505a\u201c\u6216\u201d\u8fd0\u7b97\u540e\uff0c\u5c31\u4fdd\u8bc1\u5c06 cr0 \u7684\u7b2c 0 \u4f4d\u8bbe\u7f6e\u6210\u4e86 1 \u5373 PE = 1 \u4fdd\u8bc1\u6253\u5f00\u4e86\u4fdd\u62a4\u6a21\u5f0f\u7684\u5f00\u5173\u3002\u800c cr0 \u7684\u7b2c 31 \u4f4d PG = 0 \u8868\u793a\u6211\u4eec\u53ea\u4f7f\u7528\u5206\u6bb5\u5f0f\uff0c\u4e0d\u4f7f\u7528\u5206\u9875\uff0c\u8fd9\u65f6\u518d\u5c06\u65b0\u7684\u8ba1\u7b97\u540e\u7684 eax \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u5199\u56de\u5230 cr0 \u5bc4\u5b58\u5668\u4e2d\u5c31\u5b8c\u6210\u4e86\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684\u5207\u6362\u3002 \u5230\u8fd9\u91cc\u6211\u4eec\u5173\u4e8e xv6 \u4ece\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f\u7684\u8bb2\u89e3\u5c31\u63a5\u8fd1\u5c3e\u58f0\u4e86\u3002\u6211\u4eec\u5df2\u7ecf\u8fdb\u5165\u5230\u4fdd\u62a4\u6a21\u5f0f\u4e86\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u5c06\u4ee3\u7801\u5f7b\u5e95\u4ee5 32 \u4f4d\u7684\u4fdd\u62a4\u6a21\u5f0f\u6765\u8fd0\u884c\u4e86\u3002\u6240\u4ee5\u8fd9\u65f6\u6211\u4eec\u7684 xv6 \u4e5f\u8981\u51c6\u5907\u8df3\u8f6c\u4e86\uff0c\u518d\u6765\u770b\u4e00\u884c\u4ee3\u7801\uff1a ljmp $(SEG_KCODE<<3) $start32 \u8fd9\u662f\u4e00\u4e2a\u8df3\u8f6c\u8bed\u53e5\uff0c\u901a\u77e5 CPU \u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\u3002 xv6 \u5728\u8fd9\u65f6\u5c31\u51c6\u5907\u8df3\u8f6c\u5230\u7528 C \u5199\u6210\u7684\u4ee3\u7801\u5904\u53bb\u7ee7\u7eed\u8fd0\u884c\u4e86\u3002\u8fd9\u4e2a\u8df3\u8f6c\u8bed\u53e5\u7684\u4e24\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u4e00\u76f4\u518d\u8bb2\u7684\u5178\u578b\u7684\u201c\u57fa\u5730\u5740\u201d + \u201c\u504f\u79fb\u91cf\u201d\u7684\u65b9\u5f0f\u544a\u8bc9 CPU \u8981\u8df3\u8f6c\u5230\u5185\u5b58\u7684\u4ec0\u4e48\u4f4d\u7f6e\u53bb\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\u3002 \u800c\u8fd9\u65f6\u6211\u4eec\u5df2\u7ecf\u5728\u5206\u6bb5\u5f0f\u7684\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u8fd9\u53e5\u8df3\u8f6c\u8bed\u53e5\u6765\u76f4\u89c2\u7684\u611f\u53d7\u4e00\u4e0b\u5206\u6bb5\u5f0f\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u5185\u5b58\u5bfb\u5740\u3002 \u524d\u9762\u9884\u5907\u77e5\u8bc6\u91cc\u8bf4\u9053\u5728\u5206\u6bb5\u5f0f\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u201c\u6bb5\u57fa\u5740\u201d\uff08\u57fa\u5730\u5740\uff09\u4e0d\u518d\u662f\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f GDT \u8868\u7684\u4e0b\u6807\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u8fc7 GDT \u8868\u6700\u5927\u53ef\u4ee5\u6709 8192 \u4e2a\u8868\u9879\uff08\u6bb5\u63cf\u8ff0\u7b26\uff09\uff0c2^13 = 8192\uff0c\u6240\u4ee5\u4fdd\u5b58\u7740\u201c\u6bb5\u57fa\u5740\u201d\u7684 16 \u4f4d\u6bb5\u5bc4\u5b58\u5668\u53ea\u9700\u8981\u5176\u4e2d\u7684 13 \u4f4d\u5c31\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a GDT \u8868\u7684\u4e0b\u6807\uff0c\u5176\u4f59\u7684 3 \u4f4d\u53ef\u7528\u4f5c\u4ed6\u7528\u3002 \u6309\u7167\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u770b\u770b\u8fd9\u4e2a $(SEG_KCODE<<3) \u751f\u6210\u7684\u201c\u6bb5\u57fa\u5740\u201d\u662f\u4ec0\u4e48\uff1fSEG_KCODE \u662f\u4e2a\u5b8f\u5b9a\u4e49\uff0c\u5177\u4f53\u7684\u5b9a\u4e49\u5728 mmu.h \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f $(1<<3)\uff0c\u518d\u5c06\u5b83\u8fd0\u7b97\u51fa\u6765\u5f97\u5230 \u8fd9\u91cc\u8fd9\u4e2a 16 \u4f4d\u7684\u201c\u6bb5\u57fa\u5740\u201d\u7684\u9ad8 13 \u4f4d\u4ee3\u8868 GDT \u8868\u7684\u4e0b\u6807\uff08\u5b66\u540d\u5e94\u8be5\u53eb\u201c\u6bb5\u9009\u62e9\u5b50\u201d\uff09\uff0c\u8fd9\u91cc\u9ad8 13 \u4f4d\u521a\u597d\u662f 1\uff0c\u800c\u6211\u4eec\u7684 GDT \u91cc\u4e0b\u6807\u4f4d 1 \u7684\u5185\u5b58\u6bb5\u6b63\u597d\u662f\u6211\u4eec\u7684\u201c\u4ee3\u7801\u6bb5\u201d\uff0c\u800c\u201c\u4ee3\u7801\u6bb5\u201d\u6211\u4eec\u5728 GDT \u7684\u201c\u6bb5\u63cf\u8ff0\u7b26\u201d\u4e2d\u8bbe\u7f6e\u4e86\u5b83\u7684\u5176\u5b9e\u5185\u5b58\u5730\u5740\u662f 0x00000000 \uff0c\u5185\u5b58\u6bb5\u957f\u5ea6\u662f 1M*4K \uff0c\u8fd9\u662f\u5b8c\u6574\u7684 4GB \u5185\u5b58\u3002 \u6240\u4ee5\u8fd9\u91cc\u7684\u8df3\u8f6c\u8bed\u53e5\u9009\u62e9\u4e86\u201c\u4ee3\u7801\u6bb5\u201d\uff0c\u7531\u4e8e\u201c\u4ee3\u7801\u6bb5\u201d\u7684\u8d77\u59cb\u5185\u5b58\u5730\u5740\u662f 0x00000000 \uff0c\u957f\u5ea6\u662f\u5b8c\u6574\u7684 4GB\uff0c\u6240\u4ee5\u540e\u9762\u7684\u201c\u504f\u79fb\u91cf\u201d\u4ecd\u7136\u76f8\u5f53\u4e8e\u662f\u5b9e\u9645\u7684\u5185\u5b58\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u201c\u504f\u79fb\u91cf\u201d\u76f4\u63a5\u7528\u4e86 $start32\uff0c\u4e5f\u5c31\u662f start32 \u76f4\u63a5\u5bf9\u5e94\u7684\u4ee3\u7801\u4f4d\u7f6e\u3002\u901a\u8fc7\u8fd9\u4e2a\u8df3\u8f6c\u5b9e\u9645\u4e0a CPU \u5c31\u4f1a\u8df3\u8f6c\u5230 bootasm.S \u6587\u4ef6\u7684 start32 \u6807\u8bc6\u7b26\u5904\u7ee7\u7eed\u6267\u884c\u4e86\u3002","title":"bootasm.S"},{"location":"xv6/boot_loader/#_2","text":"boot loader \u5b9e\u73b0\u7684\u7b2c\u4e8c\u4e2a\u529f\u80fd\u5c31\u662f\u52a0\u8f7d\u5185\u6838\u3002\u4e5f\u5c31\u662f\u6839\u636eELF\u5185\u6838\u6587\u4ef6\u6240\u6307\u5b9a\u7684load address\uff0c\u4ece\u786c\u76d8\u4e2d\u628a\u5185\u6838\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5bf9\u5e94\u7684load address\u4e0a\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5185\u6838ELF\u6587\u4ef6\u6240\u6307\u5b9a\u7684\u5165\u53e3\u70b9\u3002","title":"\u52a0\u8f7d\u5185\u6838"},{"location":"xv6/boot_loader/#elf","text":"\u5728 Wiki \u767e\u79d1\u4e0a\u6709 ELF \u6587\u4ef6\u683c\u5f0f\u7684\u8be6\u7ec6\u89e3\u91ca \uff0c\u7b80\u5355\u7684\u8bf4 ELF \u6587\u4ef6\u683c\u5f0f\u662f Linux \u4e0b\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6807\u51c6\u683c\u5f0f\u3002\u5c31\u597d\u50cf Windows \u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6 .exe \u4e00\u6837\uff08\u5f53\u7136\uff0cWindows \u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6807\u51c6\u683c\u5f0f\u53eb PE \u6587\u4ef6\u683c\u5f0f\uff09\uff0cLinux \u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e5f\u6709\u5b83\u81ea\u5df1\u7684\u683c\u5f0f\u3002\u53ea\u6709\u6309\u7167\u6587\u4ef6\u6807\u51c6\u683c\u5f0f\u7ec4\u7ec7\u597d\u7684\u53ef\u6267\u884c\u6587\u4ef6\u64cd\u4f5c\u7cfb\u7edf\u624d\u77e5\u9053\u5982\u4f55\u52a0\u8f7d\u8fd0\u884c\u5b83\u3002\u6211\u4eec\u5e76\u4f7f\u4f7f\u7528 C \u8bed\u8a00\u6309\u7167\u6559\u79d1\u4e66\u5199\u51fa\u7684 HelloWorld \u4ee3\u7801\u5728 Linux \u73af\u5883\u4e0b\u6700\u7ec8\u901a\u8fc7\u7f16\u8bd1\u5668\uff08gcc\u7b49\uff09\u7f16\u8bd1\u51fa\u7684\u53ef\u4ee5\u8fd0\u884c\u7684\u7a0b\u5e8f\u5c31\u662f ELF \u6587\u4ef6\u683c\u5f0f\u7684\u3002 \u90a3\u4e48 ELF \u6587\u4ef6\u683c\u5f0f\u5177\u4f53\u7684\u7ed3\u6784\u662f\u600e\u6837\u7684\u5462\uff1f \u5927\u6982\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 ELF \u5934\u90e8 ( ELF Header ) \u7a0b\u5e8f\u5934\u8868 (Program Header Table) .text .rodata \u2026\u2026 \u8282\u5934\u8868 (Section Header Table) \u6211\u4eec\u53ef\u4ee5\u7528 readelf -h kernel \u547d\u4ee4\u6765\u68c0\u67e5 ELF header \u4fe1\u606f\u3002 $ readelf -h kernel ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Intel 80386 Version: 0x1 Entry point address: 0x10000c Start of program headers: 52 (bytes into file) Start of section headers: 212404 (bytes into file) Flags: 0x0 Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 3 Size of section headers: 40 (bytes) Number of section headers: 16 Section header string table index: 15 \u8fd9\u91cc\u7684 \u2018Start of program headers\u2019 \u8bb0\u5f55\u7684\u662fprogram headers table\u5728\u8fd9\u4e2aELF\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0c\u2018Size of program headers\u2019\u662fprogram headers table\u4e2d\u4e00\u6761\u8bb0\u5f55\u7684\u5927\u5c0f\uff0c\u2018Number of program headers\u2019 \u662fprogram headers table\u7684\u8bb0\u5f55\u7684\u6761\u6570\u3002\u2018Entry point address\u2019\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\uff0c\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5b8c\u6210\u540e\u4f1a\u8df3\u8f6c\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u6267\u884c\u3002 \u540c\u6837\u6211\u4eec\u518d\u901a\u8fc7 readelf -l kernel \u547d\u4ee4\u6765\u68c0\u67e5program headers \u4fe1\u606f\u3002 $ readelf -l kernel Elf file type is EXEC (Executable file) Entry point 0x10000c There are 3 program headers, starting at offset 52 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align LOAD 0x001000 0x80100000 0x00100000 0x07aab 0x07aab R E 0x1000 LOAD 0x009000 0x80108000 0x00108000 0x02516 0x0d4a8 RW 0x1000 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10 Section to Segment mapping: Segment Sections... 00 .text .rodata 01 .data .bss 02 ELF program headers \u8bb0\u5f55\u4e86\u9700\u8981\u88ab\u52a0\u8f7d\u7684\u90e8\u5206\u5728\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08Offset\uff09\u548c\u5927\u5c0f\uff08FileSiz\uff09\uff0c\u8fd9\u4e9b\u8981\u88ab\u52a0\u8f7d\u7684segment\u901a\u5e38\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2asection, \u8fd9\u4e9bsection \u5728Section to Segment mapping\u90a3\u91cc\u53ef\u4ee5\u770b\u5230\u3002boot loader \u5c31\u662f\u6839\u636eELF program headers\u51b3\u5b9a\u5982\u4f55\u52a0\u8f7d\u5404\u4e2a\u6bb5\uff0cprogram headers\u660e\u786e\u8bf4\u660e\u4e86\u54ea\u4e00\u90e8\u5206\u9700\u8981\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\u3002 \u8fd9\u91cc\u7684LOAD\u662f\u9700\u8981\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u6bb5\u7684\u6807\u8bb0\u3002VirtAddr\uff08link address\uff09\u662f\u7f16\u8bd1\u5668\u5728link\u7684\u65f6\u5019\u6240\u751f\u6210\u7684\u5730\u5740\uff0c\u662f\u7a0b\u5e8f\u4ee3\u7801\u6267\u884c\u7684\u65f6\u5019\u6240\u671f\u671b\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u901a\u5e38\u662f\u865a\u62df\u5730\u5740\uff08virtual address\uff09\uff0c\u7a0b\u5e8f\u4ee3\u7801\u91cc\u9762\u51fd\u6570\u548c\u53d8\u91cf\u6240\u5728\u7684\u5730\u5740\u5c31\u662flink addrees\u3002PhysAddr\uff08load address \uff09\u662f\u8868\u793a\u8fd9\u4e00\u6bb5\u4ee3\u7801\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\u5c31\u52a0\u8f7d\u5230\u5230\u5185\u5b58\u7684\u8fd9\u4e2a\u7269\u7406\u5730\u5740\u4e0a\u3002 \u901a\u8fc7'Section to Segment mapping:'\u90a3\u6bb5\u4fe1\u606f\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u4e2a Segment \u5305\u542b .text .rodata \u4e24\u4e2asection,\u7b2c\u4e8c\u4e2aSegment\u5305\u62ec.data .bss \u4e24\u4e2a\u4e24\u4e2asection\u3002\u6211\u4eec\u901a\u8fc7 readelf -S kernel \u547d\u4ee4\u770b\u770bELF\u6587\u4ef6\u7684Section Headers\u3002 $ readelf -S kernel There are 16 section headers, starting at offset 0x33db4: Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .text PROGBITS 80100000 001000 0070da 00 AX 0 0 16 [ 2] .rodata PROGBITS 801070e0 0080e0 0009cb 00 A 0 0 32 [ 3] .data PROGBITS 80108000 009000 002516 00 WA 0 0 4096 [ 4] .bss NOBITS 8010a520 00b516 00af88 00 WA 0 0 32 [ 5] .debug_line PROGBITS 00000000 00b516 006cb5 00 0 0 1 [ 6] .debug_info PROGBITS 00000000 0121cb 0121ce 00 0 0 1 [ 7] .debug_abbrev PROGBITS 00000000 024399 003fd7 00 0 0 1 [ 8] .debug_aranges PROGBITS 00000000 028370 0003a8 00 0 0 8 [ 9] .debug_str PROGBITS 00000000 028718 000eb6 01 MS 0 0 1 [10] .debug_loc PROGBITS 00000000 0295ce 00681e 00 0 0 1 [11] .debug_ranges PROGBITS 00000000 02fdec 000d08 00 0 0 1 [12] .comment PROGBITS 00000000 030af4 00002b 01 MS 0 0 1 [13] .symtab SYMTAB 00000000 030b20 002050 10 14 78 4 [14] .strtab STRTAB 00000000 032b70 0011ac 00 0 0 1 [15] .shstrtab STRTAB 00000000 033d1c 000096 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), p (processor specific) \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230'.text section'\u5728\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff08Off\uff09\u662f001000 \u5927\u5c0f\u662f0070da\uff0c\u7d27\u8ddf\u5176\u540e\u7684\u662f\u2018.rodata\u2019\uff0c\u5b83\u7684\u4f4d\u7f6e\u5e94\u8be5\u662f 001000 + 0070da = 0080da \uff0c\u53ef\u662f.rodata \u7684Off \u5374\u663e\u793a0080e0\uff0c\u8fd9\u662f\u56e0\u4e3a.rodata\u662f\u630932\u4e2a\u5b57\u8282\u5bf9\u9f50\u7684\uff08Al\uff09, 0080da \u630932\u4e2a\u5b57\u8282\u5bf9\u9f50\u540e\u5c31\u662f0080e0\uff0c'.rodata'\u7684\u8d77\u59cb\u4f4d\u7f6e\uff08off=0080e0\uff09 + \u5b83\u7684\u5927\u5c0f\uff08size=0009cb\uff09 = 008aab \u8fd9\u5c31\u662f\u2018.rodata\u2019\u7684\u7ed3\u675f\u4f4d\u7f6e, \u2018.rodata\u2019\u7684\u7ed3\u675f\u4f4d\u7f6e 008aab - \u2018.text\u2019 \u7684\u8d77\u59cb\u4f4d\u7f6e 001000 = 007aab \u6b63\u662fProgram Headers\u4e2d\u7b2c\u4e00\u4e2asegment\u7684\u5927\u5c0f\uff08FileSiz\uff09\u3002\u8fd9\u6b63\u662f\u56e0\u4e3a\u7b2c\u4e00\u4e2asegment \u5305\u542b text .rodata \u8fd9\u4e24\u4e2asection, \u800c\u7f16\u8bd1\u5668\u4f1a\u628a\u6bcf\u4e2asegment\u4e2d\u5305\u542b\u7684sections \u653e\u5728\u4e00\u8d77\u6309\u987a\u5e8f\u6392\u5217. \u540c\u6837\u7684\u9053\u7406\u7b2c\u4e8c\u4e2asegment\u4e5f\u662f\u8fd9\u6837\u7684\u60c5\u51b5\u3002 xv6 \u7684elf.h \u6587\u4ef6\u4e2d\u6709\u5173\u4e8eELF header\u548cprogram header \u7684\u8be6\u7ec6\u5b9a\u4e49.","title":"ELF\u6587\u4ef6\u683c\u5f0f"},{"location":"xv6/boot_loader/#bootmain","text":"\u5728\u201c\u4ece\u5b9e\u6a21\u5f0f\u5230\u4fdd\u62a4\u6a21\u5f0f\u90a3\u4e00\u8282\u4e2d\u201d\u6211\u4eec\u5199\u5230 \u901a\u8fc7\u8fd9\u4e2a\u8df3\u8f6c\u5b9e\u9645\u4e0a CPU \u5c31\u4f1a\u8df3\u8f6c\u5230 bootasm.S \u6587\u4ef6\u7684 start32 \u6807\u8bc6\u7b26\u5904\u7ee7\u7eed\u6267\u884c\u4e86 \u6211\u4eec\u6253\u5f00 bootasm.S \u6587\u4ef6\u770b\u770b\u5bf9\u5e94\u7684 start32 \u4f4d\u7f6e\u5904\u7684\u4ee3\u7801\u505a\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002 .code32 # Tell assembler to generate 32-bit code now. start32: # Set up the protected-mode data segment registers # \u50cf\u4e0a\u9762\u8bb2 ljmp \u65f6\u6240\u8bf4\u7684\uff0c\u8fd9\u65f6\u5019\u5df2\u7ecf\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u4e86 # \u6570\u636e\u6bb5\u5728 GDT \u4e2d\u7684\u4e0b\u6807\u662f 2\uff0c\u6240\u4ee5\u8fd9\u91cc\u6570\u636e\u6bb5\u7684\u6bb5\u9009\u62e9\u5b50\u662f 2 << 3 = 0000 0000 0001 0000 # \u8fd9 16 \u4f4d\u7684\u6bb5\u9009\u62e9\u5b50\u4e2d\u7684\u524d 13 \u4f4d\u662f GDT \u6bb5\u8868\u4e0b\u6807\uff0c\u8fd9\u91cc\u524d 13 \u4f4d\u7684\u503c\u662f 2 \u4ee3\u8868\u9009\u62e9\u4e86\u6570\u636e\u6bb5 # \u8fd9\u91cc\u5c06 3 \u4e2a\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\u90fd\u8d4b\u503c\u6210\u6570\u636e\u6bb5\u6bb5\u9009\u62e9\u5b50\u7684\u503c movw $(SEG_KDATA<<3), %ax # Our data segment selector \u6bb5\u9009\u62e9\u5b50\u8d4b\u503c\u7ed9 ax \u5bc4\u5b58\u5668 movw %ax, %ds # -> DS: Data Segment \u521d\u59cb\u5316\u6570\u636e\u6bb5\u5bc4\u5b58\u5668 movw %ax, %es # -> ES: Extra Segment \u521d\u59cb\u5316\u6269\u5c55\u6bb5\u5bc4\u5b58\u5668 movw %ax, %ss # -> SS: Stack Segment \u521d\u59cb\u5316\u5806\u6808\u6bb5\u5bc4\u5b58\u5668 movw $0, %ax # Zero segments not ready for use ax \u5bc4\u5b58\u5668\u6e05\u96f6 movw %ax, %fs # -> FS \u8f85\u52a9\u5bc4\u5b58\u5668\u6e05\u96f6 movw %ax, %gs # -> GS \u8f85\u52a9\u5bc4\u5b58\u5668\u6e05\u96f6 # Set up the stack pointer and call into C. movl $start, %esp call bootmain \u8fd9\u91cc\u5728\u521d\u59cb\u5316\u4e86\u4e00\u4e9b\u5bc4\u5b58\u5668\u540e\u76f4\u63a5\u8c03\u7528\u4e86\u4e00\u4e2a\u53eb\u505a bootmain \u7684\u51fd\u6570\uff0c\u800c\u8fd9\u4e2a\u51fd\u6570\u662f\u5199\u5728 bootmain.c \u6587\u4ef6\u4e2d\u7684\uff0c\u7ec8\u4e8e\u6211\u4eec\u6682\u65f6\u544a\u522b\u4e86\u6c47\u7f16\u6765\u5230\u4e86 C \u7684\u4e16\u754c\u4e86\u3002\u6765\u770b\u770b bootmain \u51fd\u6570\u5728\u505a\u4ec0\u4e48\u4e8b\u60c5\u3002 bootmain.c \u8fd9\u4e2a\u6587\u4ef6\u5f88\u5c0f\uff0c\u4ee3\u7801\u5f88\u5c11\uff0c\u5b83\u5176\u5b9e\u662f\u5f15\u5bfc\u5de5\u4f5c\u7684\u6700\u540e\u90e8\u5206\uff08\u5f15\u5bfc\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u5728 bootasm.S \u4e2d\u5b9e\u73b0\uff09\uff0c\u5b83\u8d1f\u8d23\u5c06\u5185\u6838\u4ece\u786c\u76d8\u4e0a\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u5f00\u59cb\u6267\u884c\u5185\u6838\u4e2d\u7684\u7a0b\u5e8f\u3002\u6211\u4eec\u6765\u770b\u4ee3\u7801\u3002 void bootmain(void) { struct elfhdr *elf; struct proghdr *ph, *eph; void (*entry)(void); uchar* pa; // \u4ece 0xa0000 \u5230 0xfffff \u7684\u7269\u7406\u5730\u5740\u8303\u56f4\u5c5e\u4e8e\u8bbe\u5907\u7a7a\u95f4\uff0c // \u6240\u4ee5\u5185\u6838\u653e\u7f6e\u5728 0x10000 \u5904\u5f00\u59cb elf = (struct elfhdr*)0x10000; // scratch space // \u4ece\u5185\u6838\u6240\u5728\u786c\u76d8\u4f4d\u7f6e\u8bfb\u53d6\u4e00\u5185\u5b58\u9875 4kb \u6570\u636e readseg((uchar*)elf, 4096, 0); // \u5224\u65ad\u662f\u5426\u4e3a ELF \u6587\u4ef6\u683c\u5f0f if(elf->magic != ELF_MAGIC) return; // let bootasm.S handle error // \u52a0\u8f7d ELF \u6587\u4ef6\u4e2d\u7684\u7a0b\u5e8f\u6bb5 (ignores ph flags). ph = (struct proghdr*)((uchar*)elf + elf->phoff); eph = ph + elf->phnum; for(; ph < eph; ph++){ pa = (uchar*)ph->paddr; readseg(pa, ph->filesz, ph->off); if(ph->memsz > ph->filesz) stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz); } // Call the entry point from the ELF header. // Does not return! entry = (void(*)(void))(elf->entry); entry(); } \u8fd9\u91cc\u7684elfhdr\u5c31\u662fELF header, proghdr\u5c31\u662fprogram header, for \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u628aELF kernel \u6587\u4ef6\u4e2d\u7684segment\u6240\u8bb0\u5f55\u7684\u88ab\u52a0\u8f7d\u533a\u57df\u52a0\u8f7d\u5230\u5bf9\u5e94segment\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740\u4e0a\uff08ph->paddr\uff09\uff0cph->off\u662f\u88ab\u52a0\u8f7d\u533a\u57df\u5728ELF\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c ph->filesz\u662f\u88ab\u52a0\u8f7d\u533a\u57df\u7684\u5b9e\u9645\u5927\u5c0f\uff0c\u5f53 ph->memsz \u5927\u4e8eph->filesz\u65f6\uff0c\u5269\u4f59\u7684\u533a\u95f4\u8981\u586b\u5145\u4e3a0\u3002\u52a0\u8f7d\u5b8c\u6210\u540e\u8df3\u8f6c\u5230\u5165\u53e3\u51fd\u6570\uff08elf->entry\uff09\u5f00\u59cb\u8fd0\u884c\u5185\u6838\u3002 \u6700\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u8bfb\u53d6\u78c1\u76d8\u4fe1\u606f\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u770b\u770b\u662f\u600e\u6837\u901a\u8fc7\u5411\u7279\u5b9a\u7aef\u53e3\u53d1\u9001\u6570\u636e\u6765\u8fbe\u5230\u64cd\u4f5c\u78c1\u76d8\u76ee\u7684\u7684\u3002 // Read a single sector at offset into dst. // \u8fd9\u91cc\u4f7f\u7528\u7684\u662f LBA \u78c1\u76d8\u5bfb\u5740\u6a21\u5f0f // LBA\u662f\u975e\u5e38\u5355\u7eaf\u7684\u4e00\u79cd\u5bfb\u5740\u6a21\u5f0f\ufe54\u4ece0\u5f00\u59cb\u7f16\u53f7\u6765\u5b9a\u4f4d\u533a\u5757\uff0c // \u7b2c\u4e00\u533a\u5757LBA=0\uff0c\u7b2c\u4e8c\u533a\u5757LBA=1\uff0c\u4f9d\u6b64\u7c7b\u63a8 void readsect(void *dst, uint offset) // 0x10000, 1 { // Issue command. waitdisk(); outb(0x1F2, 1); // \u8981\u8bfb\u53d6\u7684\u6247\u533a\u6570\u91cf count = 1 outb(0x1F3, offset); // \u6247\u533a LBA \u5730\u5740\u7684 0-7 \u4f4d outb(0x1F4, offset >> 8); // \u6247\u533a LBA \u5730\u5740\u7684 8-15 \u4f4d outb(0x1F5, offset >> 16); // \u6247\u533a LBA \u5730\u5740\u7684 16-23 \u4f4d outb(0x1F6, (offset >> 24) | 0xE0); // offset | 11100000 \u4fdd\u8bc1\u9ad8\u4e09\u4f4d\u6052\u4e3a 1 // \u7b2c7\u4f4d \u6052\u4e3a1 // \u7b2c6\u4f4d LBA\u6a21\u5f0f\u7684\u5f00\u5173\uff0c\u7f6e1\u4e3aLBA\u6a21\u5f0f // \u7b2c5\u4f4d \u6052\u4e3a1 // \u7b2c4\u4f4d \u4e3a0\u4ee3\u8868\u4e3b\u786c\u76d8\u3001\u4e3a1\u4ee3\u8868\u4ece\u786c\u76d8 // \u7b2c3~0\u4f4d \u6247\u533a LBA \u5730\u5740\u7684 24-27 \u4f4d outb(0x1F7, 0x20); // 20h\u4e3a\u8bfb\uff0c30h\u4e3a\u5199 // Read data. waitdisk(); insl(0x1F0, dst, SECTSIZE/4); } \u6211\u4eec\u5df2\u7ecf\u8bb2\u5230\u4e86\u5982\u4f55\u901a\u8fc7\u5411 804x \u952e\u76d8\u63a7\u5236\u5668\u7aef\u53e3\u53d1\u9001\u4fe1\u53f7\u6765\u6253\u5f00 A20 gate \u4e86\uff0c\u540c\u6837\u9053\u7406\uff0c\u6211\u4eec\u5411\u786c\u76d8\u63a7\u5236\u5668\u7684\u6307\u5b9a\u7aef\u53e3\u53d1\u9001\u4fe1\u53f7\u5c31\u53ef\u4ee5\u64cd\u4f5c\u786c\u76d8\uff0c\u4ece\u786c\u76d8\u8bfb\u53d6\u6216\u5411\u786c\u76d8\u5199\u5165\u6570\u636e\u3002IDE \u6807\u51c6\u5b9a\u4e49\u4e86 8 \u4e2a\u5bc4\u5b58\u5668\u6765\u64cd\u4f5c\u786c\u76d8\u3002PC \u4f53\u7cfb\u7ed3\u6784\u5c06\u7b2c\u4e00\u4e2a\u786c\u76d8\u63a7\u5236\u5668\u6620\u5c04\u5230\u7aef\u53e3 1F0-1F7 \u5904\uff0c\u800c\u7b2c\u4e8c\u4e2a\u786c\u76d8\u63a7\u5236\u5668\u5219\u88ab\u6620\u5c04\u5230\u7aef\u53e3 170-177 \u5904\u3002\u8fd9\u51e0\u4e2a\u5bc4\u5b58\u5668\u7684\u63cf\u8ff0\u5982\u4e0b\uff08\u4ee5\u7b2c\u4e00\u4e2a\u63a7\u5236\u5668\u4e3a\u4f8b\uff09\uff1a 1F0 - \u6570\u636e\u5bc4\u5b58\u5668\u3002\u8bfb\u5199\u6570\u636e\u90fd\u5fc5\u987b\u901a\u8fc7\u8fd9\u4e2a\u5bc4\u5b58\u5668 1F1 - \u9519\u8bef\u5bc4\u5b58\u5668\uff0c\u6bcf\u4e00\u4f4d\u4ee3\u8868\u4e00\u7c7b\u9519\u8bef\u3002\u5168\u96f6\u8868\u793a\u64cd\u4f5c\u6210\u529f\u3002 1F2 - \u6247\u533a\u8ba1\u6570\u3002\u8fd9\u91cc\u9762\u5b58\u653e\u4f60\u8981\u64cd\u4f5c\u7684\u6247\u533a\u6570\u91cf 1F3 - \u6247\u533aLBA\u5730\u5740\u76840-7\u4f4d 1F4 - \u6247\u533aLBA\u5730\u5740\u76848-15\u4f4d 1F5 - \u6247\u533aLBA\u5730\u5740\u768416-23\u4f4d 1F6 (\u4f4e4\u4f4d) - \u6247\u533aLBA\u5730\u5740\u768424-27\u4f4d 1F6 (\u7b2c4\u4f4d) - 0\u8868\u793a\u9009\u62e9\u4e3b\u76d8\uff0c1\u8868\u793a\u9009\u62e9\u4ece\u76d8 1F6 (5-7\u4f4d) - \u5fc5\u987b\u4e3a1 1F7 (\u5199) - \u547d\u4ee4\u5bc4\u5b58\u5668 1F7 (\u8bfb) - \u72b6\u6001\u5bc4\u5b58\u5668 bit 7 = 1 \u63a7\u5236\u5668\u5fd9 bit 6 = 1 \u9a71\u52a8\u5668\u5c31\u7eea bit 5 = 1 \u8bbe\u5907\u9519\u8bef bit 4 N/A bit 3 = 1 \u6247\u533a\u7f13\u51b2\u533a\u9519\u8bef bit 2 = 1 \u78c1\u76d8\u5df2\u88ab\u8bfb\u6821\u9a8c bit 1 N/A bit 0 = 1 \u4e0a\u4e00\u6b21\u547d\u4ee4\u6267\u884c\u5931\u8d25","title":"\u4ece bootmain \u5f00\u59cb"},{"location":"xv6/boot_loader/#_3","text":"\u81f3\u6b64\u5185\u6838\u5df2\u7ecf\u88ab\u8f7d\u5165\u5185\u5b58\u5e76\u51c6\u5907\u6295\u5165\u8fd0\u884c\u4e86\u3002\u5728\u7ed3\u675f\u8fd9\u4e00\u7bc7\u524d\u6211\u4eec\u518d\u770b\u4e00\u773c\u76ee\u524d\u72b6\u6001\u4e0b\u7cfb\u7edf\u6574\u4f53\u7684\u5185\u5b58\u5e03\u5c40\uff0c\u5bf9\u5373\u5c06\u8fd0\u884c\u7684\u5185\u6838\u73af\u5883\u6709\u4e00\u4e2a\u5927\u81f4\u7684\u4e86\u89e3\u3002 \u4ece bootasm.S \u6587\u4ef6\u7684\u4ee3\u7801 movl $start, %esp # \u6808\u9876\u88ab\u653e\u7f6e\u5728 0x7C00 \u5904\uff0c\u5373 $start \u53ef\u77e5\uff0c\u6267\u884c bootmain.c \u4e4b\u524d bootasm.S \u6c47\u7f16\u4ee3\u7801\u5df2\u7ecf\u5c06\u6808\u7684\u6808\u9876\u8bbe\u7f6e\u5728\u4e86 0x7C00 \u5904\u3002\u4e4b\u524d\u6211\u4eec\u4e86\u89e3\u8fc7 x86 \u67b6\u6784\u8ba1\u7b97\u673a\u7684\u542f\u52a8\u8fc7\u7a0b\uff0cBIOS \u4f1a\u5c06\u5f15\u5bfc\u6247\u533a\u7684\u5f15\u5bfc\u7a0b\u5e8f\u52a0\u8f7d\u5230 0x7C00 \u5904\u5e76\u5f15\u5bfc CPU \u4ece\u6b64\u5904\u5f00\u59cb\u8fd0\u884c\uff0c\u6545\u6808\u9876\u5373\u88ab\u8bbe\u7f6e\u5728\u4e86\u548c\u5f15\u5bfc\u7a0b\u5e8f\u4e00\u81f4\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u3002\u6211\u4eec\u77e5\u9053\u6808\u662f\u81ea\u6808\u9876\u5f00\u59cb\u5411\u4e0b\u589e\u957f\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u6808\u4f1a\u9010\u6e10\u8fdc\u79bb\u5f15\u5bfc\u7a0b\u5e8f\uff0c\u6240\u4ee5\u8fd9\u91cc\u8fd9\u6837\u5b89\u7f6e\u6808\u9876\u7684\u4f4d\u7f6e\u5e76\u65e0\u4ec0\u4e48\u95ee\u9898\u3002 \u5728 bootmain.c \u6587\u4ef6\u7684\u4ee3\u7801 elf = (struct elfhdr*)0x10000; // \u4ece\u5185\u6838\u6240\u5728\u786c\u76d8\u4f4d\u7f6e\u8bfb\u53d6\u4e00\u5185\u5b58\u9875 4kb \u6570\u636e readseg((uchar*)elf, 4096, 0); \u53ef\u4ee5\u770b\u51faboot loader \u5148\u628a\u5185\u6838ELF\uff08Executable and Linkable Format\uff09\u52a0\u8f7d\u5230 0x10000 (64K)\u4f4d\u7f6e(\u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u4e2a\u4efb\u610f\u9009\u53d6\u7684\u4e34\u65f6\u5b58\u653e\u7684\u4f4d\u7f6e)\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6 ELF header \u548c program header , \u6839\u636eprograme header\u91cc\u7684\u6bb5\u8bb0\u5f55\u7684\u52a0\u8f7d\u5bf9\u5e94\u7684\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5230paddr\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u5176\u4e2d\u4ee3\u7801\u6bb5\u7684paddr\u662f0x100000(1M) ,\u6570\u636e\u6bb5\u7684paddr\u662f0x00108000. \u6240\u4ee5\u52a0\u8f7d\u5b8c\u5185\u6838\u540e\u7684\u5185\u5b58\u5e03\u5c40\u793a\u610f\u56fe\u5982\u4e0b: +------------------------------+ | | | kernel data | +------------------------------+ 0x00108000 | | | kernel code | +------------------------------+ 0x00100000 | | | | | | +------------------------------+ 0x00007d00 | | | boot loader | STACK --------> +------------------------------+ 0x00007c00 grow down | | | stack | +------------------------------+ 0x00000000 \u53c2\u8003\uff1a http://leenjewel.github.io/blog/2014/07/29/%5B%28xue-xi-xv6%29%5D-cong-shi-mo-shi-dao-bao-hu-mo-shi/","title":"\u5185\u6838\u52a0\u8f7d\u540e\u7684\u7cfb\u7edf\u5185\u5b58\u5e03\u5c40"},{"location":"xv6/device/","text":"\u8bbe\u5907\u7ba1\u7406 xv6\u6839linux\u4e00\u6837\u628a\u6240\u6709\u7684\u8bbe\u5907\u90fd\u5f53\u6587\u4ef6\u7ba1\u7406\u3002\u8fd9\u91cc\u4ee5\u952e\u76d8\u548c\u663e\u793a\u5668\u4e3a\u4f8b\uff0c\u952e\u76d8\u548c\u663e\u793a\u5668\u7edf\u79f0\u4e3a\u63a7\u5236\u53f0\u8bbe\u5907\uff08console\uff09,\u5176\u4e2d\u952e\u76d8\u662f\u8f93\u5165\u8bbe\u5907\uff0c\u663e\u793a\u5668\u662f\u8f93\u51fa\u8bbe\u5907\u3002 \u63a7\u5236\u53f0\u7684\u521b\u5efa xv6\u7684\u63a7\u5236\u53f0\u7684\u521b\u5efa\u4ee3\u7801\u5728init.c\u4e2d\uff0c\u6709\u5982\u4e0b\u4e24\u53e5\uff1a mknod(\"console\", 1, 1); open(\"console\", O_RDWR); mknod\u662f\u5728\u6587\u4ef6\u7cfb\u7edf\u91cc\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u4e3aconsole\u7684\u8bbe\u5907\u6587\u4ef6\uff0c\u8be5\u8bbe\u5907\u7684 major=1, minor=1 \u63a7\u5236\u53f0\u8bfb\u5199\u65b9\u6cd5\u7684\u6ce8\u518c \u5728console.c\u7684consoleinit\u65b9\u6cd5\u4e2d\u6709\u4e0b\u9762\u4e24\u53e5\u5bf9\u63a7\u5236\u53f0\u8bfb\u5199\u65b9\u6cd5\u8fdb\u884c\u6ce8\u518c devsw[CONSOLE].write = consolewrite; devsw[CONSOLE].read = consoleread; \u5176\u4e2dCONSOLE\u7684\u503c\u662f1,\u4e0e\u521b\u5efa\u65b9\u6cd5\u4e2d\u7684major\u5bf9\u5e94 \u63a7\u5236\u53f0\u8bfb\u5199\u65b9\u6cd5\u7684\u7cfb\u7edf\u8c03\u7528 \u4e0e\u6587\u4ef6\u7684\u8bfb\u5199\u4e00\u6837\u5bf9\u8bbe\u5907\u7684\u8bfb\u5199\u90fd\u662f\u901a\u8fc7open\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u65b9\u6cd5read \u548c write\u3002 \u4f8b\u5982\u8c03\u7528read\u65b9\u6cd5\u540e\uff0cread\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u6d41\u7a0b\u53c8\u8c03\u7528sys_file.c\u7684sys_read\uff0csys_read\u53c8\u8c03\u7528file.c\u7684fileread\uff0cfileread\u5224\u65ad\u5f53\u524d\u6587\u4ef6\u7c7b\u578b\u662fFD_INODE\u8c03\u7528fs.c\u7684readi, readi\u5224\u65adinode\u7684\u7c7b\u578b\u662fT_DEV\u8c03\u7528 devsw[ip->major].read(ip, dst, n) \u4e5f\u5c31\u662f\u524d\u9762\u6ce8\u518c\u7684\u8bfb\u65b9\u6cd5consoleread\u3002 \u952e\u76d8\u8f93\u5165 consoleread\u662f\u4ece\u7cfb\u7edf\u7f13\u5b58\u961f\u5217\u91cc\u8bfb\u53d6\u7684\uff0c\u800c\u7cfb\u7edf\u7f13\u5b58\u961f\u5217\u7684\u5185\u5bb9\u662f\u7531\u952e\u76d8\u8f93\u5165\u7684\u3002\u952e\u76d8\u6309\u952e\u88ab\u6309\u4e0b\u65f6\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad,\u5982\u679c\u662f\u4e3b\u677f\u4e0a\u7684\u952e\u76d8\u5219\u4e2d\u65ad\u7f16\u53f7\u662fT_IRQ0 + IRQ_KBD\uff0c\u5982\u679c\u662f\u952e\u76d8\u662f\u901a\u8fc7\u4e32\u53e3\u8fde\u63a5\u5230\u4e3b\u677f\u4e0a\u7684\u5219\u4e2d\u65ad\u7f16\u53f7\u4e3aT_IRQ0 + IRQ_COM1\uff0c\u6839\u636e\u8fd9\u4e0d\u540c\u7684\u4e2d\u65ad\u7f16\u53f7\u8c03\u7528\u7684\u65b9\u6cd5\u4e5f\u4e0d\u540c\uff0c\u5206\u522b\u662fkbdintr\u548cuartintr\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u8c03\u7528consoleintr\uff0c\u53ea\u662f\u53c2\u6570\u5206\u522b\u662fkbdgetc\u548cuartgetc\u4e24\u4e2a\u4e0d\u540c\u83b7\u53d6\u6309\u952eASCII\u7801\u7684\u65b9\u6cd5\u3002consoleintr\u65b9\u6cd5\u4f1a\u628a\u83b7\u53d6\u5230\u7684\u952e\u76d8\u8f93\u5165\u5b57\u7b26\u8ffd\u52a0\u5230\u7f13\u5b58\u961f\u5217\u91cc\u3002","title":"\u8bbe\u5907\u7ba1\u7406"},{"location":"xv6/device/#_1","text":"xv6\u6839linux\u4e00\u6837\u628a\u6240\u6709\u7684\u8bbe\u5907\u90fd\u5f53\u6587\u4ef6\u7ba1\u7406\u3002\u8fd9\u91cc\u4ee5\u952e\u76d8\u548c\u663e\u793a\u5668\u4e3a\u4f8b\uff0c\u952e\u76d8\u548c\u663e\u793a\u5668\u7edf\u79f0\u4e3a\u63a7\u5236\u53f0\u8bbe\u5907\uff08console\uff09,\u5176\u4e2d\u952e\u76d8\u662f\u8f93\u5165\u8bbe\u5907\uff0c\u663e\u793a\u5668\u662f\u8f93\u51fa\u8bbe\u5907\u3002","title":"\u8bbe\u5907\u7ba1\u7406"},{"location":"xv6/device/#_2","text":"xv6\u7684\u63a7\u5236\u53f0\u7684\u521b\u5efa\u4ee3\u7801\u5728init.c\u4e2d\uff0c\u6709\u5982\u4e0b\u4e24\u53e5\uff1a mknod(\"console\", 1, 1); open(\"console\", O_RDWR); mknod\u662f\u5728\u6587\u4ef6\u7cfb\u7edf\u91cc\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u4e3aconsole\u7684\u8bbe\u5907\u6587\u4ef6\uff0c\u8be5\u8bbe\u5907\u7684 major=1, minor=1","title":"\u63a7\u5236\u53f0\u7684\u521b\u5efa"},{"location":"xv6/device/#_3","text":"\u5728console.c\u7684consoleinit\u65b9\u6cd5\u4e2d\u6709\u4e0b\u9762\u4e24\u53e5\u5bf9\u63a7\u5236\u53f0\u8bfb\u5199\u65b9\u6cd5\u8fdb\u884c\u6ce8\u518c devsw[CONSOLE].write = consolewrite; devsw[CONSOLE].read = consoleread; \u5176\u4e2dCONSOLE\u7684\u503c\u662f1,\u4e0e\u521b\u5efa\u65b9\u6cd5\u4e2d\u7684major\u5bf9\u5e94","title":"\u63a7\u5236\u53f0\u8bfb\u5199\u65b9\u6cd5\u7684\u6ce8\u518c"},{"location":"xv6/device/#_4","text":"\u4e0e\u6587\u4ef6\u7684\u8bfb\u5199\u4e00\u6837\u5bf9\u8bbe\u5907\u7684\u8bfb\u5199\u90fd\u662f\u901a\u8fc7open\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u65b9\u6cd5read \u548c write\u3002 \u4f8b\u5982\u8c03\u7528read\u65b9\u6cd5\u540e\uff0cread\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u6d41\u7a0b\u53c8\u8c03\u7528sys_file.c\u7684sys_read\uff0csys_read\u53c8\u8c03\u7528file.c\u7684fileread\uff0cfileread\u5224\u65ad\u5f53\u524d\u6587\u4ef6\u7c7b\u578b\u662fFD_INODE\u8c03\u7528fs.c\u7684readi, readi\u5224\u65adinode\u7684\u7c7b\u578b\u662fT_DEV\u8c03\u7528 devsw[ip->major].read(ip, dst, n) \u4e5f\u5c31\u662f\u524d\u9762\u6ce8\u518c\u7684\u8bfb\u65b9\u6cd5consoleread\u3002","title":"\u63a7\u5236\u53f0\u8bfb\u5199\u65b9\u6cd5\u7684\u7cfb\u7edf\u8c03\u7528"},{"location":"xv6/device/#_5","text":"consoleread\u662f\u4ece\u7cfb\u7edf\u7f13\u5b58\u961f\u5217\u91cc\u8bfb\u53d6\u7684\uff0c\u800c\u7cfb\u7edf\u7f13\u5b58\u961f\u5217\u7684\u5185\u5bb9\u662f\u7531\u952e\u76d8\u8f93\u5165\u7684\u3002\u952e\u76d8\u6309\u952e\u88ab\u6309\u4e0b\u65f6\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad,\u5982\u679c\u662f\u4e3b\u677f\u4e0a\u7684\u952e\u76d8\u5219\u4e2d\u65ad\u7f16\u53f7\u662fT_IRQ0 + IRQ_KBD\uff0c\u5982\u679c\u662f\u952e\u76d8\u662f\u901a\u8fc7\u4e32\u53e3\u8fde\u63a5\u5230\u4e3b\u677f\u4e0a\u7684\u5219\u4e2d\u65ad\u7f16\u53f7\u4e3aT_IRQ0 + IRQ_COM1\uff0c\u6839\u636e\u8fd9\u4e0d\u540c\u7684\u4e2d\u65ad\u7f16\u53f7\u8c03\u7528\u7684\u65b9\u6cd5\u4e5f\u4e0d\u540c\uff0c\u5206\u522b\u662fkbdintr\u548cuartintr\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u8c03\u7528consoleintr\uff0c\u53ea\u662f\u53c2\u6570\u5206\u522b\u662fkbdgetc\u548cuartgetc\u4e24\u4e2a\u4e0d\u540c\u83b7\u53d6\u6309\u952eASCII\u7801\u7684\u65b9\u6cd5\u3002consoleintr\u65b9\u6cd5\u4f1a\u628a\u83b7\u53d6\u5230\u7684\u952e\u76d8\u8f93\u5165\u5b57\u7b26\u8ffd\u52a0\u5230\u7f13\u5b58\u961f\u5217\u91cc\u3002","title":"\u952e\u76d8\u8f93\u5165"},{"location":"xv6/disk_interrupt/","text":"\u786c\u76d8\u4e2d\u65ad ide.c\u662f\u7cfb\u7edf\u7684\u786c\u76d8\u9a71\u52a8\u5668\uff0c\u4e0a\u5c42\u4f1a\u8c03\u7528iderw\u5bf9\u786c\u76d8\u8fdb\u884c\u8bfb\u5199\u3002iderw\u628a\u8bfb\u5199\u8bf7\u6c42\uff08buf\uff09\u8ffd\u52a0\u5230\u8bf7\u6c42\u961f\u5217\uff08idequeue\uff09\u91cc\u9762\u3002 for(pp=&idequeue; *pp; pp=&(*pp)->qnext) ; *pp = b; \u5982\u679cidequeue\u91cc\u9762\u6ca1\u6709\u5176\u4ed6\u7684\u8bf7\u6c42\uff0c\u5c31\u5f00\u8d77idestart\u5904\u7406\u5f53\u524d\u8bf7\u6c42\u3002\u6700\u540e\u8c03\u7528sleep\u7b49\u5f85\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u3002 \u5728idestart\u91cc\u6839\u636ebuf\u8bb0\u5f55\u7684blockno\u8ba1\u7b97\u51fa\u6247\u533a\u7f16\u53f7\uff0c\u6839\u636e\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\uff08BSIZE\uff09\u8ba1\u7b97\u8bfb\u5199\u6247\u533a\u7684\u6570\u76ee\uff0c\u6839\u636eflags\u91cc\u7684B_DIRTY\u6807\u8bb0\u5224\u65ad\u662f\u8bfb\u8fd8\u662f\u5199\u64cd\u4f5c\u3002\u5e76\u628a\u8fd9\u4e9b\u4fe1\u606f\u901a\u8fc7outb\u544a\u8bc9\u786c\u76d8\u63a7\u5236\u5668\uff0c\u5982\u679c\u662f\u5199\u64cd\u4f5c\u8fd8\u8981\u628abuf\u91cc\u7684data\u901a\u8fc7outsl\u5199\u5165\u5230\u786c\u76d8\u63a7\u5236\u5668\u7684\u7f13\u5b58\u3002 \u5f53\u786c\u76d8\u5b8c\u6210\u4e86\u6570\u636e\u5199\u6216\u6570\u636e\u8bfb\u7684\u51c6\u5907\u540e\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u786c\u76d8\u8bfb\u5199\u4e2d\u65ad\uff0c\u7ecf\u8fc7\u7cfb\u7edf\u4e2d\u65ad\u5904\u7406\u6d41\u7a0b\u540e\u8fdb\u5165ideintr\u65b9\u6cd5\u3002ideintr\u628a\u5904\u7406\u5b8c\u7684\u8bf7\u6c42\u4ece\u8bf7\u6c42\u961f\u5217\u91cc\u79fb\u9664\u3002 idequeue = b->qnext; \u7136\u540e\u5224\u65ad\u5982\u679c\u9700\u8981\u8bfb\u53d6\u786c\u76d8\u6570\u636e\u5c31\u8c03\u7528insl\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\u3002\u7136\u540e\u8c03\u7528wakeup\u5524\u9192\u7b49\u5f85\u786c\u76d8\u8bfb\u5199\u8be5\u6570\u636e\u7684\u8fdb\u7a0b\u3002\u6700\u540e\u8c03\u7528idestart\u7ee7\u7eed\u5904\u7406\u8bf7\u6c42\u961f\u5217\u91cc\u7684\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u3002","title":"\u786c\u76d8\u4e2d\u65ad"},{"location":"xv6/disk_interrupt/#_1","text":"ide.c\u662f\u7cfb\u7edf\u7684\u786c\u76d8\u9a71\u52a8\u5668\uff0c\u4e0a\u5c42\u4f1a\u8c03\u7528iderw\u5bf9\u786c\u76d8\u8fdb\u884c\u8bfb\u5199\u3002iderw\u628a\u8bfb\u5199\u8bf7\u6c42\uff08buf\uff09\u8ffd\u52a0\u5230\u8bf7\u6c42\u961f\u5217\uff08idequeue\uff09\u91cc\u9762\u3002 for(pp=&idequeue; *pp; pp=&(*pp)->qnext) ; *pp = b; \u5982\u679cidequeue\u91cc\u9762\u6ca1\u6709\u5176\u4ed6\u7684\u8bf7\u6c42\uff0c\u5c31\u5f00\u8d77idestart\u5904\u7406\u5f53\u524d\u8bf7\u6c42\u3002\u6700\u540e\u8c03\u7528sleep\u7b49\u5f85\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u3002 \u5728idestart\u91cc\u6839\u636ebuf\u8bb0\u5f55\u7684blockno\u8ba1\u7b97\u51fa\u6247\u533a\u7f16\u53f7\uff0c\u6839\u636e\u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\uff08BSIZE\uff09\u8ba1\u7b97\u8bfb\u5199\u6247\u533a\u7684\u6570\u76ee\uff0c\u6839\u636eflags\u91cc\u7684B_DIRTY\u6807\u8bb0\u5224\u65ad\u662f\u8bfb\u8fd8\u662f\u5199\u64cd\u4f5c\u3002\u5e76\u628a\u8fd9\u4e9b\u4fe1\u606f\u901a\u8fc7outb\u544a\u8bc9\u786c\u76d8\u63a7\u5236\u5668\uff0c\u5982\u679c\u662f\u5199\u64cd\u4f5c\u8fd8\u8981\u628abuf\u91cc\u7684data\u901a\u8fc7outsl\u5199\u5165\u5230\u786c\u76d8\u63a7\u5236\u5668\u7684\u7f13\u5b58\u3002 \u5f53\u786c\u76d8\u5b8c\u6210\u4e86\u6570\u636e\u5199\u6216\u6570\u636e\u8bfb\u7684\u51c6\u5907\u540e\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u786c\u76d8\u8bfb\u5199\u4e2d\u65ad\uff0c\u7ecf\u8fc7\u7cfb\u7edf\u4e2d\u65ad\u5904\u7406\u6d41\u7a0b\u540e\u8fdb\u5165ideintr\u65b9\u6cd5\u3002ideintr\u628a\u5904\u7406\u5b8c\u7684\u8bf7\u6c42\u4ece\u8bf7\u6c42\u961f\u5217\u91cc\u79fb\u9664\u3002 idequeue = b->qnext; \u7136\u540e\u5224\u65ad\u5982\u679c\u9700\u8981\u8bfb\u53d6\u786c\u76d8\u6570\u636e\u5c31\u8c03\u7528insl\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\u3002\u7136\u540e\u8c03\u7528wakeup\u5524\u9192\u7b49\u5f85\u786c\u76d8\u8bfb\u5199\u8be5\u6570\u636e\u7684\u8fdb\u7a0b\u3002\u6700\u540e\u8c03\u7528idestart\u7ee7\u7eed\u5904\u7406\u8bf7\u6c42\u961f\u5217\u91cc\u7684\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u3002","title":"\u786c\u76d8\u4e2d\u65ad"},{"location":"xv6/entry_%20kernel/","text":"\u8fd0\u884c\u5185\u6838 \u5728boot loader \u52a0\u8f7d\u5b8c\u5185\u6838\u540e\uff0c\u901a\u8fc7elf header\u7684e_entry\u8fdb\u5165\u5185\u6838\u7684\u5165\u53e3 ((void (*)(void)) (ELFHDR->e_entry))(); \u8fd9\u4e2a\u5165\u53e3\u5728'entry.S'\u6587\u4ef6\u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5b8c\u6210\u7684\u529f\u80fd\u662f\u5f00\u542f\u5206\u9875\u6a21\u5f0f\uff0c\u5e76\u544a\u8bc9CPU\u9875\u8868\u7684\u5730\u5740\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u8fd0\u884c\u7684\u4ee3\u7801\u662f\u9762\u5411\u865a\u62df\u5730\u5740\u7684\uff0c\u4f46\u662f\u5728\u5f00\u542f\u5206\u9875\u6a21\u5f0f\u4e4b\u524d\uff0c\u8fd9\u4e9b\u865a\u62df\u5730\u5740\u90fd\u8fd8\u662f\u65e0\u6548\u7684\uff0c\u6240\u4ee5\u8981\u628a\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u8fd9\u91cc\u7684\u7269\u7406\u5b9e\u9645\u662f\u7ebf\u6027\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u5728 boot loader \u4e2d\u8bb2\u5230\u768432\u4f4d\u5bfb\u5740\u7684\u6bb5\u4fdd\u62a4\u6a21\u5f0f\uff0c\u8fd9\u91cc\u7684\u7ebf\u6027\u5730\u5740\u7b49\u4e8e\u7269\u7406\u5730\u5740\u3002V2P_WO \u5c31\u662f\u5b9e\u73b0\u865a\u62df\u5730\u5740\u5411\u7269\u7406\u5730\u5740\u8f6c\u6362\u7684\u4e00\u4e2a\u5b8f\u3002\u770b\u4e00\u4e0bV2P_WO \u7684\u5b9e\u73b0\u4ee3\u7801 #define V2P_WO(x) ((x) - KERNBASE) \u5373\uff0c\u7269\u7406\u5730\u5740=\u865a\u62df\u5730\u5740-KERNBASE\u3002\u4e3a\u4ec0\u4e48\u4f1a\u662f\u8fd9\u6837\u54ea\uff0c\u5b9e\u9645\u4e0a\u5728boot loader\u7684\u8bb2\u89e3\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u547d\u4ee4\u2018readelf -l kernel\u2019\u5206\u6790\u8fc7kernel elf\u6587\u4ef6\u7684Program Headers $ readelf -l kernel Elf file type is EXEC (Executable file) Entry point 0x10000c There are 3 program headers, starting at offset 52 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align LOAD 0x001000 0x80100000 0x00100000 0x07aab 0x07aab R E 0x1000 LOAD 0x009000 0x80108000 0x00108000 0x02516 0x0d4a8 RW 0x1000 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10 Section to Segment mapping: Segment Sections... 00 .text .rodata 01 .data .bss 02 \u5728\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u53ef\u4ee5load\u7684\u6bb5\u7684\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u5dee\u4e860x80000000\uff0c\u6b63\u662fKERNBASE\u7684\u503c\u3002\u5b9e\u9645\u4e0a\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u7684\u4f4d\u7f6e\u90fd\u662f\u5728kernel.ld\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684 SECTIONS { /* Link the kernel at this address: \".\" means the current address */ /* Must be equal to KERNLINK */ . = 0x80100000; .text : AT(0x100000) { *(.text .stub .text.* .gnu.linkonce.t.*) } ...... } \u5f00\u542f 4MB \u5185\u5b58\u5206\u9875\u652f\u6301 \u8fd9\u662f\u901a\u8fc7\u8bbe\u7f6e\u5bc4\u5b58\u5668 cr4 \u7684 PSE \u4f4d\u6765\u5b8c\u6210\u7684\u3002cr4 \u5bc4\u5b58\u5668\u662f\u4e2a 32 \u4f4d\u7684\u5bc4\u5b58\u5668\u76ee\u524d\u53ea\u7528\u5230\u4f4e 21 \u4f4d\uff0c\u6bcf\u4e00\u4f4d\u7684\u81f3\u4f4d\u90fd\u63a7\u5236\u7740\u4e00\u4e9b\u529f\u80fd\u7684\u72b6\u6001\uff0c\u6240\u4ee5 cr4 \u5bc4\u5b58\u5668\u53c8\u53eb\u505a\u63a7\u5236\u5bc4\u5b58\u5668\u3002 PSE \u4f4d\u662f cr4 \u63a7\u5236\u5bc4\u5b58\u5668\u7684\u7b2c 5 \u4f4d\uff0c\u5f53\u8be5\u4f4d\u7f6e\u4e3a 1 \u65f6\u8868\u793a\u5185\u5b58\u9875\u5927\u5c0f\u4e3a 4MB\uff0c\u5f53\u7f6e\u4e3a 0 \u65f6\u8868\u793a\u5185\u5b58\u9875\u5927\u5c0f\u4e3a 4KB\u3002 # Turn on page size extension for 4Mbyte pages movl %cr4, %eax orl $(CR4_PSE), %eax movl %eax, %cr4 cr3 \u5bc4\u5b58\u5668\u4e2d\u4fdd\u5b58\u7740\u9875\u8868\u6240\u5728\u7684\u5185\u5b58\u7269\u7406\u5730\u5740 # Set page directory movl $(V2P_WO(entrypgdir)), %eax movl %eax, %cr3 cr0\u63a7\u5236\u5206\u9875\u6a21\u5f0f\u7684\u5f00\u542f\uff0c\uff08\u5728boot loader\u4e2d\u8bb2\u8fc7\uff09\u3002 # Turn on paging. movl %cr0, %eax orl $(CR0_PG|CR0_WP), %eax movl %eax, %cr0 \u9875\u8868entrypgdir\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // The boot page table used in entry.S and entryother.S. // Page directories (and page tables) must start on page boundaries, // hence the __aligned__ attribute. // PTE_PS in a page directory entry enables 4Mbyte pages. __attribute__((__aligned__(PGSIZE))) pde_t entrypgdir[NPDENTRIES] = { // Map VA's [0, 4MB) to PA's [0, 4MB) [0] = (0) | PTE_P | PTE_W | PTE_PS, // Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB) [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS, }; \u6bcf\u6761\u9875\u8868\u7684\u8bb0\u5f55\u662f32\u4f4d\u5927\u5c0f\uff0c\u8fd9\u662f\u4e2a\u53ea\u6709\u4e00\u7ea7\u7684\u9875\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u524d20\u4f4d\u662f\u9875\u8868\u7d22\u5f15\uff0c\u540e12\u4f4d\u4ee3\u8868\u7684\u610f\u4e49\u5982\u4e0b\uff1a + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0 + | Avail | G | PS | D | A | PCD | PWT | US | RW | P | +--------------------------------------------------------+ | 000 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | +--------------------------------------------------------+ P : 0 \u8868\u793a\u6b64\u9875\u4e0d\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c1 \u8868\u793a\u6b64\u9875\u5728\u7269\u7406\u5185\u5b58\u4e2d RW : 0 \u8868\u793a\u53ea\u8bfb\uff0c1 \u8868\u793a\u53ef\u8bfb\u53ef\u5199\uff08\u8981\u914d\u5408 US \u4f4d\uff09 US : 0 \u8868\u793a\u7279\u6743\u7ea7\u9875\u9762\uff0c1 \u8868\u793a\u666e\u901a\u6743\u9650\u9875\u9762 PWT : 1 \u8868\u793a\u5199\u8fd9\u4e2a\u9875\u9762\u65f6\u76f4\u63a5\u5199\u5165\u5185\u5b58\uff0c0 \u8868\u793a\u5148\u5199\u5230\u7f13\u5b58\u4e2d PCD : 1 \u8868\u793a\u8be5\u9875\u7981\u7528\u7f13\u5b58\u673a\u5236\uff0c0 \u8868\u793a\u542f\u7528\u7f13\u5b58 A : \u5f53\u8be5\u9875\u88ab\u521d\u59cb\u5316\u65f6\u4e3a 0\uff0c\u4e00\u4f46\u8fdb\u884c\u8fc7\u8bfb/\u5199\u5219\u7f6e\u4e3a 1 D : \u810f\u9875\u6807\u8bb0\uff08\u8fd9\u91cc\u5c31\u4e0d\u505a\u5177\u4f53\u4ecb\u7ecd\u4e86\uff09 PS : 0 \u8868\u793a\u9875\u9762\u5927\u5c0f\u4e3a 4KB\uff0c1 \u8868\u793a\u9875\u9762\u5927\u5c0f\u4e3a 4MB G : 1 \u8868\u793a\u9875\u9762\u4e3a\u5171\u4eab\u9875\u9762\uff08\u8fd9\u91cc\u5c31\u4e0d\u505a\u5177\u4f53\u4ecb\u7ecd\u4e86\uff09 Avail : 3 \u4f4d\u4fdd\u7559\u4f4d \u901a\u8fc7\u4e0a\u9762\u7684\u9875\u8868\u53ef\u4ee5\u770b\u51fa\uff0c\u5728KERNBASE\u5230KERNBASE+4M\u4e4b\u95f4\u7684\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u8bb0\u5f55\u7684\u57fa\u5730\u5740\u662f0,\u90a3\u4e48\u8fd9\u4e00\u6bb5\u7684\u201c\u7269\u7406\u5730\u5740=\u865a\u62df\u5730\u5740-KERNBASE\u201d\u4e0e\u524d\u9762V2P_WO\u7684\u8ba1\u7b97\u76f8\u540c\u3002\u800c\u57280\u52304M\u4e4b\u95f4\u7684\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u8bb0\u5f55\u7684\u57fa\u5730\u5740\u4e5f\u662f0\uff0c\u6240\u4ee5\u8fd9\u4e00\u6bb5\u7684\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u76f8\u540c\u3002 \u8fd9\u6837\u4fdd\u8bc1\u4e86\u5728\u5206\u9875\u673a\u5236\u5f00\u542f\u7684\u60c5\u51b5\u4e0b\u5185\u6838\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u4e5f\u9650\u5236\u4e86\u5185\u6838\u6700\u591a\u53ea\u80fd\u4f7f\u7528 4MB \u7684\u5185\u5b58\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u73b0\u5728\u7684\u5185\u6838\u6765\u8bf4 4MB \u8db3\u591f\u4e86\u3002 \u8bbe\u7f6e\u5185\u6838\u6808\u9876\u4f4d\u7f6e # Set up the stack pointer. movl $(stack + KSTACKSIZE), %esp .... .comm stack, KSTACKSIZE \u8fd9\u91cc\u901a\u8fc7 .comm \u5728\u5185\u6838 bbs \u6bb5\u5f00\u8f9f\u4e86\u4e00\u6bb5 KSTACKSIZE = 4096 = 4KB \u6b64\u65f6\u5185\u6838\u7684\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\uff1a \u5185\u6838\u521d\u59cb\u5316 \u5230\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee\u865a\u62df\u5185\u5b58\u800c\u4e0d\u9700\u8981\u624b\u5de5\u8f6c\u6362\u4e86\uff0c\u6700\u540e\u5c31\u662f\u8fdb\u5165main\u51fd\u6570\uff0c\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5185\u6838\u521d\u59cb\u5316\u7684\u5de5\u4f5c\u3002 # Jump to main(), and switch to executing at # high addresses. The indirect call is needed because # the assembler produces a PC-relative instruction # for a direct jump. mov $main, %eax jmp *%eax","title":"Entry kernel"},{"location":"xv6/entry_%20kernel/#_1","text":"\u5728boot loader \u52a0\u8f7d\u5b8c\u5185\u6838\u540e\uff0c\u901a\u8fc7elf header\u7684e_entry\u8fdb\u5165\u5185\u6838\u7684\u5165\u53e3 ((void (*)(void)) (ELFHDR->e_entry))(); \u8fd9\u4e2a\u5165\u53e3\u5728'entry.S'\u6587\u4ef6\u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5b8c\u6210\u7684\u529f\u80fd\u662f\u5f00\u542f\u5206\u9875\u6a21\u5f0f\uff0c\u5e76\u544a\u8bc9CPU\u9875\u8868\u7684\u5730\u5740\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u8fd0\u884c\u7684\u4ee3\u7801\u662f\u9762\u5411\u865a\u62df\u5730\u5740\u7684\uff0c\u4f46\u662f\u5728\u5f00\u542f\u5206\u9875\u6a21\u5f0f\u4e4b\u524d\uff0c\u8fd9\u4e9b\u865a\u62df\u5730\u5740\u90fd\u8fd8\u662f\u65e0\u6548\u7684\uff0c\u6240\u4ee5\u8981\u628a\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u8fd9\u91cc\u7684\u7269\u7406\u5b9e\u9645\u662f\u7ebf\u6027\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u5728 boot loader \u4e2d\u8bb2\u5230\u768432\u4f4d\u5bfb\u5740\u7684\u6bb5\u4fdd\u62a4\u6a21\u5f0f\uff0c\u8fd9\u91cc\u7684\u7ebf\u6027\u5730\u5740\u7b49\u4e8e\u7269\u7406\u5730\u5740\u3002V2P_WO \u5c31\u662f\u5b9e\u73b0\u865a\u62df\u5730\u5740\u5411\u7269\u7406\u5730\u5740\u8f6c\u6362\u7684\u4e00\u4e2a\u5b8f\u3002\u770b\u4e00\u4e0bV2P_WO \u7684\u5b9e\u73b0\u4ee3\u7801 #define V2P_WO(x) ((x) - KERNBASE) \u5373\uff0c\u7269\u7406\u5730\u5740=\u865a\u62df\u5730\u5740-KERNBASE\u3002\u4e3a\u4ec0\u4e48\u4f1a\u662f\u8fd9\u6837\u54ea\uff0c\u5b9e\u9645\u4e0a\u5728boot loader\u7684\u8bb2\u89e3\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u547d\u4ee4\u2018readelf -l kernel\u2019\u5206\u6790\u8fc7kernel elf\u6587\u4ef6\u7684Program Headers $ readelf -l kernel Elf file type is EXEC (Executable file) Entry point 0x10000c There are 3 program headers, starting at offset 52 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align LOAD 0x001000 0x80100000 0x00100000 0x07aab 0x07aab R E 0x1000 LOAD 0x009000 0x80108000 0x00108000 0x02516 0x0d4a8 RW 0x1000 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10 Section to Segment mapping: Segment Sections... 00 .text .rodata 01 .data .bss 02 \u5728\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a\u53ef\u4ee5load\u7684\u6bb5\u7684\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u5dee\u4e860x80000000\uff0c\u6b63\u662fKERNBASE\u7684\u503c\u3002\u5b9e\u9645\u4e0a\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u7684\u4f4d\u7f6e\u90fd\u662f\u5728kernel.ld\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684 SECTIONS { /* Link the kernel at this address: \".\" means the current address */ /* Must be equal to KERNLINK */ . = 0x80100000; .text : AT(0x100000) { *(.text .stub .text.* .gnu.linkonce.t.*) } ...... }","title":"\u8fd0\u884c\u5185\u6838"},{"location":"xv6/entry_%20kernel/#4mb","text":"\u8fd9\u662f\u901a\u8fc7\u8bbe\u7f6e\u5bc4\u5b58\u5668 cr4 \u7684 PSE \u4f4d\u6765\u5b8c\u6210\u7684\u3002cr4 \u5bc4\u5b58\u5668\u662f\u4e2a 32 \u4f4d\u7684\u5bc4\u5b58\u5668\u76ee\u524d\u53ea\u7528\u5230\u4f4e 21 \u4f4d\uff0c\u6bcf\u4e00\u4f4d\u7684\u81f3\u4f4d\u90fd\u63a7\u5236\u7740\u4e00\u4e9b\u529f\u80fd\u7684\u72b6\u6001\uff0c\u6240\u4ee5 cr4 \u5bc4\u5b58\u5668\u53c8\u53eb\u505a\u63a7\u5236\u5bc4\u5b58\u5668\u3002 PSE \u4f4d\u662f cr4 \u63a7\u5236\u5bc4\u5b58\u5668\u7684\u7b2c 5 \u4f4d\uff0c\u5f53\u8be5\u4f4d\u7f6e\u4e3a 1 \u65f6\u8868\u793a\u5185\u5b58\u9875\u5927\u5c0f\u4e3a 4MB\uff0c\u5f53\u7f6e\u4e3a 0 \u65f6\u8868\u793a\u5185\u5b58\u9875\u5927\u5c0f\u4e3a 4KB\u3002 # Turn on page size extension for 4Mbyte pages movl %cr4, %eax orl $(CR4_PSE), %eax movl %eax, %cr4 cr3 \u5bc4\u5b58\u5668\u4e2d\u4fdd\u5b58\u7740\u9875\u8868\u6240\u5728\u7684\u5185\u5b58\u7269\u7406\u5730\u5740 # Set page directory movl $(V2P_WO(entrypgdir)), %eax movl %eax, %cr3 cr0\u63a7\u5236\u5206\u9875\u6a21\u5f0f\u7684\u5f00\u542f\uff0c\uff08\u5728boot loader\u4e2d\u8bb2\u8fc7\uff09\u3002 # Turn on paging. movl %cr0, %eax orl $(CR0_PG|CR0_WP), %eax movl %eax, %cr0 \u9875\u8868entrypgdir\u7684\u4ee3\u7801\u5982\u4e0b\uff1a // The boot page table used in entry.S and entryother.S. // Page directories (and page tables) must start on page boundaries, // hence the __aligned__ attribute. // PTE_PS in a page directory entry enables 4Mbyte pages. __attribute__((__aligned__(PGSIZE))) pde_t entrypgdir[NPDENTRIES] = { // Map VA's [0, 4MB) to PA's [0, 4MB) [0] = (0) | PTE_P | PTE_W | PTE_PS, // Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB) [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS, }; \u6bcf\u6761\u9875\u8868\u7684\u8bb0\u5f55\u662f32\u4f4d\u5927\u5c0f\uff0c\u8fd9\u662f\u4e2a\u53ea\u6709\u4e00\u7ea7\u7684\u9875\u9762\uff0c\u6240\u4ee5\u5b83\u7684\u524d20\u4f4d\u662f\u9875\u8868\u7d22\u5f15\uff0c\u540e12\u4f4d\u4ee3\u8868\u7684\u610f\u4e49\u5982\u4e0b\uff1a + 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0 + | Avail | G | PS | D | A | PCD | PWT | US | RW | P | +--------------------------------------------------------+ | 000 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | +--------------------------------------------------------+ P : 0 \u8868\u793a\u6b64\u9875\u4e0d\u5728\u7269\u7406\u5185\u5b58\u4e2d\uff0c1 \u8868\u793a\u6b64\u9875\u5728\u7269\u7406\u5185\u5b58\u4e2d RW : 0 \u8868\u793a\u53ea\u8bfb\uff0c1 \u8868\u793a\u53ef\u8bfb\u53ef\u5199\uff08\u8981\u914d\u5408 US \u4f4d\uff09 US : 0 \u8868\u793a\u7279\u6743\u7ea7\u9875\u9762\uff0c1 \u8868\u793a\u666e\u901a\u6743\u9650\u9875\u9762 PWT : 1 \u8868\u793a\u5199\u8fd9\u4e2a\u9875\u9762\u65f6\u76f4\u63a5\u5199\u5165\u5185\u5b58\uff0c0 \u8868\u793a\u5148\u5199\u5230\u7f13\u5b58\u4e2d PCD : 1 \u8868\u793a\u8be5\u9875\u7981\u7528\u7f13\u5b58\u673a\u5236\uff0c0 \u8868\u793a\u542f\u7528\u7f13\u5b58 A : \u5f53\u8be5\u9875\u88ab\u521d\u59cb\u5316\u65f6\u4e3a 0\uff0c\u4e00\u4f46\u8fdb\u884c\u8fc7\u8bfb/\u5199\u5219\u7f6e\u4e3a 1 D : \u810f\u9875\u6807\u8bb0\uff08\u8fd9\u91cc\u5c31\u4e0d\u505a\u5177\u4f53\u4ecb\u7ecd\u4e86\uff09 PS : 0 \u8868\u793a\u9875\u9762\u5927\u5c0f\u4e3a 4KB\uff0c1 \u8868\u793a\u9875\u9762\u5927\u5c0f\u4e3a 4MB G : 1 \u8868\u793a\u9875\u9762\u4e3a\u5171\u4eab\u9875\u9762\uff08\u8fd9\u91cc\u5c31\u4e0d\u505a\u5177\u4f53\u4ecb\u7ecd\u4e86\uff09 Avail : 3 \u4f4d\u4fdd\u7559\u4f4d \u901a\u8fc7\u4e0a\u9762\u7684\u9875\u8868\u53ef\u4ee5\u770b\u51fa\uff0c\u5728KERNBASE\u5230KERNBASE+4M\u4e4b\u95f4\u7684\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u8bb0\u5f55\u7684\u57fa\u5730\u5740\u662f0,\u90a3\u4e48\u8fd9\u4e00\u6bb5\u7684\u201c\u7269\u7406\u5730\u5740=\u865a\u62df\u5730\u5740-KERNBASE\u201d\u4e0e\u524d\u9762V2P_WO\u7684\u8ba1\u7b97\u76f8\u540c\u3002\u800c\u57280\u52304M\u4e4b\u95f4\u7684\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u8bb0\u5f55\u7684\u57fa\u5730\u5740\u4e5f\u662f0\uff0c\u6240\u4ee5\u8fd9\u4e00\u6bb5\u7684\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u76f8\u540c\u3002 \u8fd9\u6837\u4fdd\u8bc1\u4e86\u5728\u5206\u9875\u673a\u5236\u5f00\u542f\u7684\u60c5\u51b5\u4e0b\u5185\u6838\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u4e5f\u9650\u5236\u4e86\u5185\u6838\u6700\u591a\u53ea\u80fd\u4f7f\u7528 4MB \u7684\u5185\u5b58\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u73b0\u5728\u7684\u5185\u6838\u6765\u8bf4 4MB \u8db3\u591f\u4e86\u3002","title":"\u5f00\u542f 4MB \u5185\u5b58\u5206\u9875\u652f\u6301"},{"location":"xv6/entry_%20kernel/#_2","text":"# Set up the stack pointer. movl $(stack + KSTACKSIZE), %esp .... .comm stack, KSTACKSIZE \u8fd9\u91cc\u901a\u8fc7 .comm \u5728\u5185\u6838 bbs \u6bb5\u5f00\u8f9f\u4e86\u4e00\u6bb5 KSTACKSIZE = 4096 = 4KB \u6b64\u65f6\u5185\u6838\u7684\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\uff1a","title":"\u8bbe\u7f6e\u5185\u6838\u6808\u9876\u4f4d\u7f6e"},{"location":"xv6/entry_%20kernel/#_3","text":"\u5230\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee\u865a\u62df\u5185\u5b58\u800c\u4e0d\u9700\u8981\u624b\u5de5\u8f6c\u6362\u4e86\uff0c\u6700\u540e\u5c31\u662f\u8fdb\u5165main\u51fd\u6570\uff0c\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5185\u6838\u521d\u59cb\u5316\u7684\u5de5\u4f5c\u3002 # Jump to main(), and switch to executing at # high addresses. The indirect call is needed because # the assembler produces a PC-relative instruction # for a direct jump. mov $main, %eax jmp *%eax","title":"\u5185\u6838\u521d\u59cb\u5316"},{"location":"xv6/file_system/","text":"\u6587\u4ef6\u7cfb\u7edf \u901a\u8fc7xv6\u7684\u5728qemu\u4e2d\u7684\u542f\u52a8\u547d\u4ee4 qemu-system-i386 -serial mon:stdio -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp 2 -m 512 \u53ef\u4ee5\u770b\u5230\uff0cxv6\u8bbe\u7f6e\u4e86\u4e24\u5757\u786c\u76d8\uff0c\u4e00\u5757index=0\u662f\u5b58\u50a8\u7cfb\u7edf\u5185\u6838xv6.img, \u5b9e\u9645\u4e0a\u8fd9\u5757\u786c\u76d8\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c\u5c31\u662f\u5355\u7eaf\u7684\u628aboot loader\u548ckernel\u6587\u4ef6\u9010\u4e2a\u5b57\u8282\u62f7\u8d1d\u8fdb\u6765\u7684\u3002\u53e6\u4e00\u5757index=1\uff0c\u8fd9\u4e00\u5757\u662f\u6709\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u5e76\u4e14\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u7684\u662fuser programe\uff0c\u8fd9\u5757\u786c\u76d8\u7684\u521d\u59cb\u6570\u636e\u662f\u7531mkfs.c\u751f\u6210\u7684. \u786c\u76d8\u5e03\u5c40 xv6\u7684\u6587\u4ef6\u7cfb\u7edf\u5728\u786c\u76d8\u4e0a\u7684\u5e03\u5c40\u5982\u4e0b \u7b2c\u4e00\u6247\u533aboot\u6ca1\u6709\u7528\u5230\uff0csuper, log, inodes, bit map \u662f\u6587\u4ef6\u7cfb\u7edf\u7684\u5143\u6570\u636e\u533a\u6bb5\u3002 data\u662f\u6587\u4ef6\u7cfb\u7edf\u7684data block\u533a\u6bb5\u3002 super\uff1a\u8bb0\u5f55\u786c\u76d8\u7684\u6574\u4f53\u72b6\u6001\uff0c\u5305\u62ec\uff1a\u4ee5\u6570\u636e\u5757\u4e2a\u6570\u4e3a\u8ba1\u91cf\u7684\u786c\u76d8\u7684\u603b\u5927\u5c0f\uff0cdata \u533a\u6bb5\u4e2d data blocks\u7684\u4e2a\u6570\uff0cinodes\u533a\u6bb5\u4e2dinode\u7684\u4e2a\u6570, log\u533a\u6bb5\u7684\u6570\u636e\u5757\u7684\u4e2a\u6570\uff0c\u8fd8\u6709\u8fd9\u51e0\u4e2a\u533a\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 log : \u505acrash recovery\u7528\u7684\u6570\u636e\u5757 inodes: \u6bcf\u4e2ainode\u5bf9\u5e94\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u7c7b\u578b\u53ef\u80fd\u662f\u6587\u4ef6/\u76ee\u5f55/\u8bbe\u5907\uff0cinode\u91cc\u8bb0\u5f55\u4e86\u6587\u4ef6\u7c7b\u578b\uff0c\u6587\u4ef6\u5927\u5c0f\uff0c\u4ee5\u53ca\u5b58\u653e\u6587\u4ef6\u5185\u5bb9\u7684\u6570\u636e\u76d8\u5757\u5730\u5740\u7f16\u53f7\u7b49\u3002\u5982\u679cinode\u662f\u76ee\u5f55\u7c7b\u578b\uff0c\u6587\u4ef6\u5185\u5bb9\u5757\u91cc\u5b58\u653e\u7684\u5c31\u662f\u8be5\u76ee\u5f55\u6240\u5305\u542b\u7684\u6587\u4ef6\u8bb0\u5f55\uff0c\u6bcf\u6761\u6587\u4ef6\u8bb0\u5f55\u5305\u542b\u6587\u4ef6\u7684inode\u7f16\u53f7\u548c\u6587\u4ef6\u540d\u79f0\u7b49\u3002 bit map: \u662f\u6807\u8bb0\u6bcf\u4e2a\u6570\u636e\u76d8\u5757\u662f\u5426\u88ab\u5360\u7528\u3002","title":"\u6587\u4ef6\u7cfb\u7edf"},{"location":"xv6/file_system/#_1","text":"\u901a\u8fc7xv6\u7684\u5728qemu\u4e2d\u7684\u542f\u52a8\u547d\u4ee4 qemu-system-i386 -serial mon:stdio -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp 2 -m 512 \u53ef\u4ee5\u770b\u5230\uff0cxv6\u8bbe\u7f6e\u4e86\u4e24\u5757\u786c\u76d8\uff0c\u4e00\u5757index=0\u662f\u5b58\u50a8\u7cfb\u7edf\u5185\u6838xv6.img, \u5b9e\u9645\u4e0a\u8fd9\u5757\u786c\u76d8\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c\u5c31\u662f\u5355\u7eaf\u7684\u628aboot loader\u548ckernel\u6587\u4ef6\u9010\u4e2a\u5b57\u8282\u62f7\u8d1d\u8fdb\u6765\u7684\u3002\u53e6\u4e00\u5757index=1\uff0c\u8fd9\u4e00\u5757\u662f\u6709\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u5e76\u4e14\u6587\u4ef6\u7cfb\u7edf\u5b58\u50a8\u7684\u662fuser programe\uff0c\u8fd9\u5757\u786c\u76d8\u7684\u521d\u59cb\u6570\u636e\u662f\u7531mkfs.c\u751f\u6210\u7684.","title":"\u6587\u4ef6\u7cfb\u7edf"},{"location":"xv6/file_system/#_2","text":"xv6\u7684\u6587\u4ef6\u7cfb\u7edf\u5728\u786c\u76d8\u4e0a\u7684\u5e03\u5c40\u5982\u4e0b \u7b2c\u4e00\u6247\u533aboot\u6ca1\u6709\u7528\u5230\uff0csuper, log, inodes, bit map \u662f\u6587\u4ef6\u7cfb\u7edf\u7684\u5143\u6570\u636e\u533a\u6bb5\u3002 data\u662f\u6587\u4ef6\u7cfb\u7edf\u7684data block\u533a\u6bb5\u3002 super\uff1a\u8bb0\u5f55\u786c\u76d8\u7684\u6574\u4f53\u72b6\u6001\uff0c\u5305\u62ec\uff1a\u4ee5\u6570\u636e\u5757\u4e2a\u6570\u4e3a\u8ba1\u91cf\u7684\u786c\u76d8\u7684\u603b\u5927\u5c0f\uff0cdata \u533a\u6bb5\u4e2d data blocks\u7684\u4e2a\u6570\uff0cinodes\u533a\u6bb5\u4e2dinode\u7684\u4e2a\u6570, log\u533a\u6bb5\u7684\u6570\u636e\u5757\u7684\u4e2a\u6570\uff0c\u8fd8\u6709\u8fd9\u51e0\u4e2a\u533a\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 log : \u505acrash recovery\u7528\u7684\u6570\u636e\u5757 inodes: \u6bcf\u4e2ainode\u5bf9\u5e94\u4e00\u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u7c7b\u578b\u53ef\u80fd\u662f\u6587\u4ef6/\u76ee\u5f55/\u8bbe\u5907\uff0cinode\u91cc\u8bb0\u5f55\u4e86\u6587\u4ef6\u7c7b\u578b\uff0c\u6587\u4ef6\u5927\u5c0f\uff0c\u4ee5\u53ca\u5b58\u653e\u6587\u4ef6\u5185\u5bb9\u7684\u6570\u636e\u76d8\u5757\u5730\u5740\u7f16\u53f7\u7b49\u3002\u5982\u679cinode\u662f\u76ee\u5f55\u7c7b\u578b\uff0c\u6587\u4ef6\u5185\u5bb9\u5757\u91cc\u5b58\u653e\u7684\u5c31\u662f\u8be5\u76ee\u5f55\u6240\u5305\u542b\u7684\u6587\u4ef6\u8bb0\u5f55\uff0c\u6bcf\u6761\u6587\u4ef6\u8bb0\u5f55\u5305\u542b\u6587\u4ef6\u7684inode\u7f16\u53f7\u548c\u6587\u4ef6\u540d\u79f0\u7b49\u3002 bit map: \u662f\u6807\u8bb0\u6bcf\u4e2a\u6570\u636e\u76d8\u5757\u662f\u5426\u88ab\u5360\u7528\u3002","title":"\u786c\u76d8\u5e03\u5c40"},{"location":"xv6/interrups_process/","text":"\u4e2d\u65ad\u5904\u7406 \u4e2d\u65ad\u7684\u4e09\u79cd\u7c7b\u578b \u7cfb\u7edf\u4e2d\u65ad\u7684\u53d1\u751f\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd Systems calls\uff08\u7cfb\u7edf\u8c03\u7528\uff09, \u5373\u7528\u6237\u7a0b\u5e8f\u5411\u5185\u6838\u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u670d\u52a1\u7533\u8bf7\uff0c\u770b\u8d77\u6765\u7c7b\u4f3c\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\uff0c\u6bd4\u5982sleep, write\u3002 \u7b2c\u4e8c\u79cd exceptions\uff08\u8f6f\u4ef6\u5f02\u5e38\uff09, \u4e5f\u5c31\u662f\u5f53\u7a0b\u5e8f\u6267\u884c\u4e86\u4e00\u4e2a\u975e\u6cd5\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u8bbf\u95ee\u4e00\u4e2a\u9875\u8868\u8bb0\u5f55\u91cc\u6839\u672c\u4e0d\u5b58\u5728\u5185\u5b58\u3002 \u7b2c\u4e09\u79cd interrupts\uff08\u786c\u4ef6\u4e2d\u65ad\uff09\uff0c\u5373\u4e00\u4e2a\u8bbe\u5907\u4ea7\u751f\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5173\u6ce8\u7684\u4fe1\u53f7\uff0c\u4f8b\u5982\u65f6\u949f\u82af\u7247\u6bcf\u9694100 msec \u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u4ee5\u5141\u8bb8\u5185\u6838\u5b9e\u73b0\u4e00\u4e2a\u5206\u65f6\u7cfb\u7edf\u3002\u518d\u6bd4\u5982\u5f53\u786c\u76d8\u5b8c\u6210\u4e86\u4e00\u4e2a\u6570\u636e\u5757\u7684\u8bfb\u53d6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\u544a\u8bc9\u7cfb\u7edf\u8fd9\u4e2a\u5757\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u53ef\u4ee5\u4e2a\u53d6\u6570\u636e\u4e86\u3002 \u5176\u4e2d\u786c\u4ef6\u4e2d\u65ad\u53c8\u53ef\u4ee5\u5206\u4e3a\u5904\u7406\u5668\u4e0a\u7684\u672c\u5730\u9ad8\u7ea7\u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668\u4ea7\u751f\u7684\uff08Local APIC \uff09\u548c \u4e3b\u677f\u4e0a\u7684\u8f93\u5165\u8f93\u51fa\u9ad8\u7ea7\u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668\u4ea7\u751f\u7684\uff08I/O APIC \uff09, \u8fd9\u4e24\u79cd\u4e2d\u65ad\u63a7\u5236\u5668\u7684\u521d\u59cb\u5316\u4ee3\u7801\u5206\u522b\u662flapic.c\u4e2d\u7684lapicinit\u65b9\u6cd5\u548cioapic.c\u4e2d\u7684ioapicinit\u65b9\u6cd5\u3002\u5176\u4e2dLocal APIC\u4ea7\u751f\u7684\u4e2d\u65ad\u5c31\u4ea4\u7ed9APIC\u6240\u5728\u7684processor\u5904\u7406\uff0c\u800cI/O APIC\u4ea7\u751f\u7684\u4e2d\u65ad\u4f1a\u7531PIC\u603b\u7ebf\u7ecf\u8fc7\u5317\u6865\u5230\u5904\u7406\u5668\u7cfb\u7edf\u603b\u7ebf\u8def\u7531\u5230\u64cd\u4f5c\u7cfb\u7edf\u6307\u5b9a\u7684processor\u4e0a\u5904\u7406\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u4e0a\u9762\u8bb2\u8ff0\u7684\u4e2d\u65ad\u7c7b\u578b\u4e2d\uff0c Systems calls\u662f\u4e0e\u5f53\u524d\u8fdb\u7a0b\u6709\u5173\u7cfb\u7684\uff0c\u5b83\u662f\u7531\u5f53\u524d\u8fdb\u7a0b\u53d1\u8d77\u7684\u8fdb\u800c\u4ea7\u751f\u7684\u3002\u800cinterrupts\u672a\u5fc5\u4e0e\u5f53\u524d\u8fdb\u7a0b\u6709\u5173\u8054\uff0c\u6bd4\u5982\u4e00\u4e2a\u78c1\u76d8\u4f1a\u5728\u5b83\u5b8c\u6210\u6570\u636e\u5757\u7684\u83b7\u53d6\u540e\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u4f46\u662f\u5728\u8fd9\u4e2a\u4e2d\u65ad\u53d1\u751f\u7684\u65f6\u5019\u5176\u4ed6\u7684\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u3002 \u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08IDT\uff09 x86\u6709256\u4e2a\u4e0d\u540c\u7684\u4e2d\u65ad\uff0c\u5176\u4e2d\u7f16\u53f70-31\u4ee3\u8868\u8f6f\u4ef6\u5f02\u5e38\uff0c32-63\u4ee3\u8868\u786c\u4ef6\u4e2d\u65ad\uff0c64\u4ee3\u8868\u7cfb\u7edf\u8c03\u7528\u3002\u6bcf\u4e2a\u4e2d\u65ad\u6240\u5bf9\u5e94\u5904\u7406\u5165\u53e3\u5b9a\u4e49\u5728\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08IDT\uff09\u91cc\u3002\u5728xv6\u7cfb\u7edf\u4e2dIDT\u5728Tvinit\u4e2d\u521d\u59cb\u5316\uff0c\u4f8b\u5982\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\u7684\u90a3\u6761\u4e2d\u65ad\u8bb0\u5f55\u7684\u4ee3\u7801\u5982\u4e0b SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER); \u800cSETGATE\u8fd9\u4e2a\u5b8f\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b // Set up a normal interrupt/trap gate descriptor. // - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate. // interrupt gate clears FL_IF, trap gate leaves FL_IF alone // - sel: Code segment selector for interrupt/trap handler // - off: Offset in code segment for interrupt/trap handler // - dpl: Descriptor Privilege Level - // the privilege level required for software to invoke // this interrupt/trap gate explicitly using an int instruction. SETGATE(gate, istrap, sel, off, d) \u5176\u4e2d\u7684sel\u548coff\u7ed9\u51fa\u4e86\u5904\u7406\u4e2d\u65ad\u65f6%cs \u548c %eip\u4e24\u5bc4\u5b58\u5668\u4f1a\u88ab\u8d4b\u4e88\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\u3002 d\u4e5f\u5c31\u662fDPL\u4ee3\u8868\u8fd9\u6761\u4e2d\u65ad\u7684\u7279\u6743\u7ea7\u522b\uff0cx86\u67090\uff08\u6700\u9ad8\uff09\u52303\uff08\u6700\u4f4e\uff094\u4e2a\u7279\u6743\u7ea7\u522b\uff0c\u800c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ea\u7528\u5230\u4e24\u4e2a\u7ea7\u522b0\u548c3\uff0c\u5206\u522b\u4ee3\u8868\u5185\u6838\u6a21\u5f0f\u548c\u7528\u6237\u6a21\u5f0f\u3002\u5f53\u524d\u8fd0\u884c\u7684\u6307\u4ee4\u7684\u7279\u6743\u7ea7\u522b\u662f\u88ab\u5b58\u653e\u5728%cs\u5bc4\u5b58\u5668\u7684\u4f4e\u4e09\u4f4d\u4e2d\uff0c\u7528CPL\u4ee3\u8868\u3002\u5982\u679cCPL\u7684\u7279\u6743\u7ea7\u522b\u5c0f\u4e8eDPL\uff0c\u90a3\u4e48\u7cfb\u7edf\u662f\u4e0d\u5141\u8bb8int\u4ee3\u7801\u4ea7\u751f\u8fd9\u4e2a\u4e2d\u65ad\u7684\uff0c\u5982\u679c\u5c1d\u8bd5\u8fd9\u6837\u505a\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7f16\u53f7\u4e3a13\u7684\u5f02\u5e38\u4e2d\u65ad\u3002\u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u63cf\u8ff0\u7b26\u7684\u7279\u6743\u7ea7\u522b\u662fDPL_USER\uff0c\u8fd9\u6837\u5c31\u5141\u8bb8\u7528\u6237\u7a0b\u5e8f\u4f7f\u7528int\u6307\u4ee4\u4ea7\u751f\u8fd9\u4e2a\u4e2d\u65ad\u3002 istrap\u5982\u679c\u662f0\uff0c IF \u6807\u8bb0\u4f1a\u88ab\u6e05\u9664\uff0c\u963b\u6b62\u5176\u4ed6\u4e2d\u65ad\u4ea7\u751f\u3002\u5982\u679c\u662f1\uff0cIF\u6807\u8bb0\u4f1a\u4fdd\u6301\u539f\u6765\u7684\u503c\u3002 task status segment \u5f53\u7cfb\u7edf\u8fdb\u7a0b\u7531\u7528\u6237\u6a21\u5f0f\u8fdb\u5165\u5185\u6838\u6a21\u5f0f\u540e\uff0c\u8fdb\u7a0b\u539f\u6765\u5728\u7528\u6237\u6a21\u5f0f\u4f7f\u7528\u7684\u6808\u4e5f\u5e94\u8be5\u5207\u6362\u4e3a\u53e6\u8be5\u8fdb\u7a0b\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u4f7f\u7528\u7684\u6808\uff0c\u6240\u4ee5CPU\u8981\u77e5\u9053\u5185\u6838\u6808\u6240\u5728\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u8bb0\u5f55\u5728\u4e00\u4e2a task status segment\u4e2d\uff0c\u800ctask status segment\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u8bb0\u5f55\u5728 global descriptor table (GDT)\u4e2d\u7684\u4e00\u6761descriptor\u4e2d\uff0c\u8fd9\u6761\u8bb0\u5f55\u7684\u7d22\u5f15\u662fSEG_TSS\uff0c\u8fd9\u4e2a\u7d22\u5f15\u7531ltr\u6307\u4ee4\u4fdd\u5b58\u5230tr\u5bc4\u5b58\u5668\u7684segment selector\u90e8\u5206\u4e2d\u3002\u5b8c\u6210segment selector\u7684\u4fdd\u5b58\u540e\uff0c\u5904\u7406\u5668\u5c31\u7528\u8fd9\u4e2asegment selector\u5b9a\u4f4d\u5230 global descriptor table\uff08GDT\uff09\u4e2d\u7684TSS\u6bb5\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6bb5\u7684 segment limit \u548c base address\u4e5f\u4fdd\u5b58\u5230tr\u5bc4\u5b58\u5668\u7684\u5176\u4ed6\u90e8\u5206\u4e2d\u3002 task status segment \u7684\u8bbe\u7f6e\u662f\u5728switchuvm\u4e2d\u5b8c\u6210\u7684\u3002 \u4e2d\u65ad\u53d1\u751f\u540e\u7cfb\u7edf\u505a\u4e86\u90a3\u4e9b\u4e8b\u60c5\uff1f \u4fdd\u5b58\u5bc4\u5b58\u5668\u72b6\u6001 \u5f53\u4e00\u4e2a\u4e2d\u65ad\u53d1\u751f\u65f6CPU\u4f1a\u505a\u4e0b\u9762\u51e0\u4ef6\u4e8b\u60c5\uff1a 1) \u5982\u679c\u5904\u7406\u5668\u662f\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u8fd0\u884c\u90a3\u4e48\u5b83\u9996\u5148\u8981\u628a\u7528\u6237\u6808\u5207\u6362\u4e3a\u8be5\u8fdb\u7a0b\u7684\u5185\u6838\u6808\uff0c\u5177\u4f53\u5c31\u662f\u4ecetask register \u8bb0\u5f55\u7684task status \u5bf9\u8c61\u4e2d\u52a0\u8f7d%esp \u548c %ss\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u628a\u65e7\u7684%ss \u548c %esp\u4fdd\u5b58\u5230\u8fd9\u4e2a\u65b0\u6808\u4e2d\u3002\u5982\u679c\u4e2d\u65ad\u53d1\u751f\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\uff0c\u8fd9\u4e00\u5207\u90fd\u4e0d\u4f1a\u53d1\u751f\u3002 2) \u5904\u7406\u5668\u628a%eflags, %cs, \u548c %eip\u4fdd\u5b58\u5230\u6808\u4e2d\u3002\u6709\u4e00\u4e9b\u4e2d\u65ad\u6bd4\u5982 page fault \uff0c\u5904\u7406\u5668\u8fd8\u4f1a\u4fdd\u5b58\u4e00\u4e2aerror\u5b57\u3002 3) \u5904\u7406\u5668\u4ece\u76f8\u5173\u7684\u4e2d\u65ad\u8868\uff08IDT\uff09\u627e\u5230\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\u5e76\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u5165\u53e3\u5904\uff0c\u5177\u4f53\u5c31\u662f\u4ece\u76f8\u5173IDT\u8bb0\u5f55\u4e2d\u52a0\u8f7d%eip \u548c %cs\uff0c\u8fdb\u5165\u5185\u6838\u6a21\u5f0f\u8fd0\u884c\u3002 \u4ee5\u4e0a\u662f\u4e2d\u65ad\u53d1\u751f\u540eCPU\u81ea\u52a8\u505a\u7684\u4e8b\u60c5\uff0c\u5728\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u5165\u53e3\u540e\u5c31\u662f\u64cd\u4f5c\u7cfb\u7edf\u8981\u505a\u7684\u4e8b\u60c5\u4e86\u3002\u4e2d\u65ad\u5165\u53e3\u5b9a\u4e49\u5728vectors.S\u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u7531vectors.pl \u8fd9\u4e2a Perl \u811a\u672c\u751f\u6210\u7684\u3002vectors.S\u91cc\u9762\u6bcf\u4e00\u6761\u8bb0\u5f55\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\uff0c256\u4e2a\u4e2d\u65ad\u5c31\u6709256\u6761\u8bb0\u5f55\u3002 4) \u6bcf\u6761\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\u4ee3\u7801\u505a\u7684\u4e8b\u60c5\u57fa\u672c\u76f8\u540c\uff0cpush\u4e00\u4e2a\u9519\u8bef\u4ee3\u78010\uff08\u5982\u679c\u4e2d\u65ad\u672c\u8eab\u5c31\u4f1a\u4ea7\u751f\u9519\u8bef\u4ee3\u7801\uff0c\u4f8b\u5982\u4e0a\u9762\u8bb2\u5230\u7684CPU\u81ea\u52a8\u505a\u7684\u4e8b\u60c5\u7684\u7b2c\u4e8c\u6b65\u4e2d\u7684page falt, \u8fd9\u91cc\u5c31\u4f1a\u7701\u7565\u8fd9\u4e2apush\uff0c\u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u4fdd\u6301\u6808\u7684\u4e00\u81f4\u6027\uff09\u548c\u4e00\u4e2a\u4e2d\u65ad\u7f16\u53f7\uff0c\u7136\u540e\u8df3\u8f6c\u5230alltraps\u3002 5) Alltraps \u7ee7\u7eed\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5b83\u628a%ds, %es, %fs\uff0c%gs push\u5230\u6808\u4e2d\uff0c\u7136\u540epushal\u628a\u901a\u7528\u5bc4\u5b58\u5668(%eax, %ecx, %edx, %ebx, %oes, %ebp, %esi, %edi)\u90fdpush\u5230\u6808\u4e2d\u3002 \u4e0a\u9762\u4e00\u7cfb\u5217\u7684\u6b65\u9aa4\u5c31\u662f\u6784\u9020\u4e86\u4e00\u4e2atrapframe\u3002trapframe \u5728 kernel stack\u4e2d\u7684\u5e03\u5c40\u5982\u4e0b\uff1a \u5728\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u5668\u4e4b\u524dCPU\u5df2\u7ecf\u8bbe\u7f6e\u4e86%cs\u548c%ss\u6bb5\u5bc4\u5b58\u5668\uff0calltraps \u7ee7\u7eed\u5b8c\u6210 %ds \u548c %es \u6bb5\u5bc4\u5b58\u5668\u7684\u8bbe\u7f6e\u3002 \u6267\u884ctrap\u51fd\u6570 \u4e0a\u9762\u5df2\u7ecf\u628a\u4e2d\u65ad\u53d1\u751f\u65f6CPU\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u4fdd\u5b58\u5230\u4e86trapframe\u4e2d\uff0c\u4e0b\u9762\u5c31\u8981\u5f00\u59cb\u6267\u884ctrap\u51fd\u6570\u4e86\u3002\u4e0a\u9762\u5df2\u7ecf\u8bf4\u660e\u4e86\u6b64\u65f6\u7684\u6808\u9876\u6307\u9488%esp\u5c31\u662f\u6307\u5411trapframe\uff0c\u56e0\u6b64\u628a%esp push\u5230\u6808\u4e2d\u4f5c\u4e3atrap\u51fd\u6570\u7684\u53c2\u6570, \u3002\u7136\u540e\u8c03\u7528trap\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u662f\u7528\u6765\u5904\u7406\u5404\u79cd\u7c7b\u578b\u7684\u4e2d\u65ad,\u6839\u636e\u4e2d\u65ad\u7f16\u53f7\u5206\u914d\u7ed9\u5177\u4f53\u7684Interupte handler \u53bb\u5904\u7406\uff0c\u5728trap\u51fd\u6570\u5b8c\u6210\u540e\u8fd4\u56de\uff0c\u63a5\u7740alltraps \u901a\u8fc7\u6267\u884c addl $4, %esp \u628atrap\u51fd\u6570\u53c2\u6570\u4ece\u6808\u4e2d\u79fb\u9664\u3002\u6700\u540e\u7cfb\u7edf\u53c8\u8981\u901a\u8fc7trapret\u8fd4\u56de\u5230\u4e2d\u65ad\u539f\u6765\u53d1\u751f\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\u4e86\uff0c\u5177\u4f53\u5c31\u662f\u4ecetrapframe\u4e2d\u4f9d\u6b21\u6062\u590d\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u72b6\u6001\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5df2\u7ecf\u5728\u201c\u7b2c\u4e00\u4e2a\u7528\u6237\u8fdb\u7a0b\u201d\u90a3\u4e00\u7ae0\u7684\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f\u7684\u65f6\u5019\u634b\u8fc7\u4e86\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\u5982\u679c\u4e2d\u65ad\u53d1\u751f\u5728\u7cfb\u7edf\u6b63\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u884c\u6808\u7684\u5207\u6362\u4e5f\u4e0d\u4f1a\u4fdd\u5b58\u6808\u7684\u6bb5\u5bc4\u5b58\u5668%ss\u548c\u6808\u6307\u9488\u5bc4\u5b58\u5668%esp\uff0ctrapret\u7684iret\u6307\u4ee4\u9875\u65e0\u9700\u6062\u590d%esp\u548c%ss\u3002","title":"\u4e2d\u65ad\u5904\u7406\u6d41\u7a0b"},{"location":"xv6/interrups_process/#_1","text":"","title":"\u4e2d\u65ad\u5904\u7406"},{"location":"xv6/interrups_process/#_2","text":"\u7cfb\u7edf\u4e2d\u65ad\u7684\u53d1\u751f\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd Systems calls\uff08\u7cfb\u7edf\u8c03\u7528\uff09, \u5373\u7528\u6237\u7a0b\u5e8f\u5411\u5185\u6838\u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u670d\u52a1\u7533\u8bf7\uff0c\u770b\u8d77\u6765\u7c7b\u4f3c\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\uff0c\u6bd4\u5982sleep, write\u3002 \u7b2c\u4e8c\u79cd exceptions\uff08\u8f6f\u4ef6\u5f02\u5e38\uff09, \u4e5f\u5c31\u662f\u5f53\u7a0b\u5e8f\u6267\u884c\u4e86\u4e00\u4e2a\u975e\u6cd5\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u8bbf\u95ee\u4e00\u4e2a\u9875\u8868\u8bb0\u5f55\u91cc\u6839\u672c\u4e0d\u5b58\u5728\u5185\u5b58\u3002 \u7b2c\u4e09\u79cd interrupts\uff08\u786c\u4ef6\u4e2d\u65ad\uff09\uff0c\u5373\u4e00\u4e2a\u8bbe\u5907\u4ea7\u751f\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5173\u6ce8\u7684\u4fe1\u53f7\uff0c\u4f8b\u5982\u65f6\u949f\u82af\u7247\u6bcf\u9694100 msec \u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u4ee5\u5141\u8bb8\u5185\u6838\u5b9e\u73b0\u4e00\u4e2a\u5206\u65f6\u7cfb\u7edf\u3002\u518d\u6bd4\u5982\u5f53\u786c\u76d8\u5b8c\u6210\u4e86\u4e00\u4e2a\u6570\u636e\u5757\u7684\u8bfb\u53d6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\u544a\u8bc9\u7cfb\u7edf\u8fd9\u4e2a\u5757\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u53ef\u4ee5\u4e2a\u53d6\u6570\u636e\u4e86\u3002 \u5176\u4e2d\u786c\u4ef6\u4e2d\u65ad\u53c8\u53ef\u4ee5\u5206\u4e3a\u5904\u7406\u5668\u4e0a\u7684\u672c\u5730\u9ad8\u7ea7\u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668\u4ea7\u751f\u7684\uff08Local APIC \uff09\u548c \u4e3b\u677f\u4e0a\u7684\u8f93\u5165\u8f93\u51fa\u9ad8\u7ea7\u53ef\u7f16\u7a0b\u4e2d\u65ad\u63a7\u5236\u5668\u4ea7\u751f\u7684\uff08I/O APIC \uff09, \u8fd9\u4e24\u79cd\u4e2d\u65ad\u63a7\u5236\u5668\u7684\u521d\u59cb\u5316\u4ee3\u7801\u5206\u522b\u662flapic.c\u4e2d\u7684lapicinit\u65b9\u6cd5\u548cioapic.c\u4e2d\u7684ioapicinit\u65b9\u6cd5\u3002\u5176\u4e2dLocal APIC\u4ea7\u751f\u7684\u4e2d\u65ad\u5c31\u4ea4\u7ed9APIC\u6240\u5728\u7684processor\u5904\u7406\uff0c\u800cI/O APIC\u4ea7\u751f\u7684\u4e2d\u65ad\u4f1a\u7531PIC\u603b\u7ebf\u7ecf\u8fc7\u5317\u6865\u5230\u5904\u7406\u5668\u7cfb\u7edf\u603b\u7ebf\u8def\u7531\u5230\u64cd\u4f5c\u7cfb\u7edf\u6307\u5b9a\u7684processor\u4e0a\u5904\u7406\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u4e0a\u9762\u8bb2\u8ff0\u7684\u4e2d\u65ad\u7c7b\u578b\u4e2d\uff0c Systems calls\u662f\u4e0e\u5f53\u524d\u8fdb\u7a0b\u6709\u5173\u7cfb\u7684\uff0c\u5b83\u662f\u7531\u5f53\u524d\u8fdb\u7a0b\u53d1\u8d77\u7684\u8fdb\u800c\u4ea7\u751f\u7684\u3002\u800cinterrupts\u672a\u5fc5\u4e0e\u5f53\u524d\u8fdb\u7a0b\u6709\u5173\u8054\uff0c\u6bd4\u5982\u4e00\u4e2a\u78c1\u76d8\u4f1a\u5728\u5b83\u5b8c\u6210\u6570\u636e\u5757\u7684\u83b7\u53d6\u540e\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u4f46\u662f\u5728\u8fd9\u4e2a\u4e2d\u65ad\u53d1\u751f\u7684\u65f6\u5019\u5176\u4ed6\u7684\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u3002","title":"\u4e2d\u65ad\u7684\u4e09\u79cd\u7c7b\u578b"},{"location":"xv6/interrups_process/#idt","text":"x86\u6709256\u4e2a\u4e0d\u540c\u7684\u4e2d\u65ad\uff0c\u5176\u4e2d\u7f16\u53f70-31\u4ee3\u8868\u8f6f\u4ef6\u5f02\u5e38\uff0c32-63\u4ee3\u8868\u786c\u4ef6\u4e2d\u65ad\uff0c64\u4ee3\u8868\u7cfb\u7edf\u8c03\u7528\u3002\u6bcf\u4e2a\u4e2d\u65ad\u6240\u5bf9\u5e94\u5904\u7406\u5165\u53e3\u5b9a\u4e49\u5728\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08IDT\uff09\u91cc\u3002\u5728xv6\u7cfb\u7edf\u4e2dIDT\u5728Tvinit\u4e2d\u521d\u59cb\u5316\uff0c\u4f8b\u5982\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\u7684\u90a3\u6761\u4e2d\u65ad\u8bb0\u5f55\u7684\u4ee3\u7801\u5982\u4e0b SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER); \u800cSETGATE\u8fd9\u4e2a\u5b8f\u63a5\u53e3\u5b9a\u4e49\u5982\u4e0b // Set up a normal interrupt/trap gate descriptor. // - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate. // interrupt gate clears FL_IF, trap gate leaves FL_IF alone // - sel: Code segment selector for interrupt/trap handler // - off: Offset in code segment for interrupt/trap handler // - dpl: Descriptor Privilege Level - // the privilege level required for software to invoke // this interrupt/trap gate explicitly using an int instruction. SETGATE(gate, istrap, sel, off, d) \u5176\u4e2d\u7684sel\u548coff\u7ed9\u51fa\u4e86\u5904\u7406\u4e2d\u65ad\u65f6%cs \u548c %eip\u4e24\u5bc4\u5b58\u5668\u4f1a\u88ab\u8d4b\u4e88\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\u3002 d\u4e5f\u5c31\u662fDPL\u4ee3\u8868\u8fd9\u6761\u4e2d\u65ad\u7684\u7279\u6743\u7ea7\u522b\uff0cx86\u67090\uff08\u6700\u9ad8\uff09\u52303\uff08\u6700\u4f4e\uff094\u4e2a\u7279\u6743\u7ea7\u522b\uff0c\u800c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ea\u7528\u5230\u4e24\u4e2a\u7ea7\u522b0\u548c3\uff0c\u5206\u522b\u4ee3\u8868\u5185\u6838\u6a21\u5f0f\u548c\u7528\u6237\u6a21\u5f0f\u3002\u5f53\u524d\u8fd0\u884c\u7684\u6307\u4ee4\u7684\u7279\u6743\u7ea7\u522b\u662f\u88ab\u5b58\u653e\u5728%cs\u5bc4\u5b58\u5668\u7684\u4f4e\u4e09\u4f4d\u4e2d\uff0c\u7528CPL\u4ee3\u8868\u3002\u5982\u679cCPL\u7684\u7279\u6743\u7ea7\u522b\u5c0f\u4e8eDPL\uff0c\u90a3\u4e48\u7cfb\u7edf\u662f\u4e0d\u5141\u8bb8int\u4ee3\u7801\u4ea7\u751f\u8fd9\u4e2a\u4e2d\u65ad\u7684\uff0c\u5982\u679c\u5c1d\u8bd5\u8fd9\u6837\u505a\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7f16\u53f7\u4e3a13\u7684\u5f02\u5e38\u4e2d\u65ad\u3002\u5728\u4e0a\u9762\u4ee3\u7801\u4e2d\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u63cf\u8ff0\u7b26\u7684\u7279\u6743\u7ea7\u522b\u662fDPL_USER\uff0c\u8fd9\u6837\u5c31\u5141\u8bb8\u7528\u6237\u7a0b\u5e8f\u4f7f\u7528int\u6307\u4ee4\u4ea7\u751f\u8fd9\u4e2a\u4e2d\u65ad\u3002 istrap\u5982\u679c\u662f0\uff0c IF \u6807\u8bb0\u4f1a\u88ab\u6e05\u9664\uff0c\u963b\u6b62\u5176\u4ed6\u4e2d\u65ad\u4ea7\u751f\u3002\u5982\u679c\u662f1\uff0cIF\u6807\u8bb0\u4f1a\u4fdd\u6301\u539f\u6765\u7684\u503c\u3002","title":"\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868\uff08IDT\uff09"},{"location":"xv6/interrups_process/#task-status-segment","text":"\u5f53\u7cfb\u7edf\u8fdb\u7a0b\u7531\u7528\u6237\u6a21\u5f0f\u8fdb\u5165\u5185\u6838\u6a21\u5f0f\u540e\uff0c\u8fdb\u7a0b\u539f\u6765\u5728\u7528\u6237\u6a21\u5f0f\u4f7f\u7528\u7684\u6808\u4e5f\u5e94\u8be5\u5207\u6362\u4e3a\u53e6\u8be5\u8fdb\u7a0b\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u4f7f\u7528\u7684\u6808\uff0c\u6240\u4ee5CPU\u8981\u77e5\u9053\u5185\u6838\u6808\u6240\u5728\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u8bb0\u5f55\u5728\u4e00\u4e2a task status segment\u4e2d\uff0c\u800ctask status segment\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u8bb0\u5f55\u5728 global descriptor table (GDT)\u4e2d\u7684\u4e00\u6761descriptor\u4e2d\uff0c\u8fd9\u6761\u8bb0\u5f55\u7684\u7d22\u5f15\u662fSEG_TSS\uff0c\u8fd9\u4e2a\u7d22\u5f15\u7531ltr\u6307\u4ee4\u4fdd\u5b58\u5230tr\u5bc4\u5b58\u5668\u7684segment selector\u90e8\u5206\u4e2d\u3002\u5b8c\u6210segment selector\u7684\u4fdd\u5b58\u540e\uff0c\u5904\u7406\u5668\u5c31\u7528\u8fd9\u4e2asegment selector\u5b9a\u4f4d\u5230 global descriptor table\uff08GDT\uff09\u4e2d\u7684TSS\u6bb5\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6bb5\u7684 segment limit \u548c base address\u4e5f\u4fdd\u5b58\u5230tr\u5bc4\u5b58\u5668\u7684\u5176\u4ed6\u90e8\u5206\u4e2d\u3002 task status segment \u7684\u8bbe\u7f6e\u662f\u5728switchuvm\u4e2d\u5b8c\u6210\u7684\u3002","title":"task status segment"},{"location":"xv6/interrups_process/#_3","text":"","title":"\u4e2d\u65ad\u53d1\u751f\u540e\u7cfb\u7edf\u505a\u4e86\u90a3\u4e9b\u4e8b\u60c5\uff1f"},{"location":"xv6/interrups_process/#_4","text":"\u5f53\u4e00\u4e2a\u4e2d\u65ad\u53d1\u751f\u65f6CPU\u4f1a\u505a\u4e0b\u9762\u51e0\u4ef6\u4e8b\u60c5\uff1a 1) \u5982\u679c\u5904\u7406\u5668\u662f\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u8fd0\u884c\u90a3\u4e48\u5b83\u9996\u5148\u8981\u628a\u7528\u6237\u6808\u5207\u6362\u4e3a\u8be5\u8fdb\u7a0b\u7684\u5185\u6838\u6808\uff0c\u5177\u4f53\u5c31\u662f\u4ecetask register \u8bb0\u5f55\u7684task status \u5bf9\u8c61\u4e2d\u52a0\u8f7d%esp \u548c %ss\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u628a\u65e7\u7684%ss \u548c %esp\u4fdd\u5b58\u5230\u8fd9\u4e2a\u65b0\u6808\u4e2d\u3002\u5982\u679c\u4e2d\u65ad\u53d1\u751f\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\uff0c\u8fd9\u4e00\u5207\u90fd\u4e0d\u4f1a\u53d1\u751f\u3002 2) \u5904\u7406\u5668\u628a%eflags, %cs, \u548c %eip\u4fdd\u5b58\u5230\u6808\u4e2d\u3002\u6709\u4e00\u4e9b\u4e2d\u65ad\u6bd4\u5982 page fault \uff0c\u5904\u7406\u5668\u8fd8\u4f1a\u4fdd\u5b58\u4e00\u4e2aerror\u5b57\u3002 3) \u5904\u7406\u5668\u4ece\u76f8\u5173\u7684\u4e2d\u65ad\u8868\uff08IDT\uff09\u627e\u5230\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\u5e76\u8df3\u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u5165\u53e3\u5904\uff0c\u5177\u4f53\u5c31\u662f\u4ece\u76f8\u5173IDT\u8bb0\u5f55\u4e2d\u52a0\u8f7d%eip \u548c %cs\uff0c\u8fdb\u5165\u5185\u6838\u6a21\u5f0f\u8fd0\u884c\u3002 \u4ee5\u4e0a\u662f\u4e2d\u65ad\u53d1\u751f\u540eCPU\u81ea\u52a8\u505a\u7684\u4e8b\u60c5\uff0c\u5728\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u5165\u53e3\u540e\u5c31\u662f\u64cd\u4f5c\u7cfb\u7edf\u8981\u505a\u7684\u4e8b\u60c5\u4e86\u3002\u4e2d\u65ad\u5165\u53e3\u5b9a\u4e49\u5728vectors.S\u4e2d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u662f\u7531vectors.pl \u8fd9\u4e2a Perl \u811a\u672c\u751f\u6210\u7684\u3002vectors.S\u91cc\u9762\u6bcf\u4e00\u6761\u8bb0\u5f55\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\uff0c256\u4e2a\u4e2d\u65ad\u5c31\u6709256\u6761\u8bb0\u5f55\u3002 4) \u6bcf\u6761\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\u4ee3\u7801\u505a\u7684\u4e8b\u60c5\u57fa\u672c\u76f8\u540c\uff0cpush\u4e00\u4e2a\u9519\u8bef\u4ee3\u78010\uff08\u5982\u679c\u4e2d\u65ad\u672c\u8eab\u5c31\u4f1a\u4ea7\u751f\u9519\u8bef\u4ee3\u7801\uff0c\u4f8b\u5982\u4e0a\u9762\u8bb2\u5230\u7684CPU\u81ea\u52a8\u505a\u7684\u4e8b\u60c5\u7684\u7b2c\u4e8c\u6b65\u4e2d\u7684page falt, \u8fd9\u91cc\u5c31\u4f1a\u7701\u7565\u8fd9\u4e2apush\uff0c\u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u4fdd\u6301\u6808\u7684\u4e00\u81f4\u6027\uff09\u548c\u4e00\u4e2a\u4e2d\u65ad\u7f16\u53f7\uff0c\u7136\u540e\u8df3\u8f6c\u5230alltraps\u3002 5) Alltraps \u7ee7\u7eed\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5b83\u628a%ds, %es, %fs\uff0c%gs push\u5230\u6808\u4e2d\uff0c\u7136\u540epushal\u628a\u901a\u7528\u5bc4\u5b58\u5668(%eax, %ecx, %edx, %ebx, %oes, %ebp, %esi, %edi)\u90fdpush\u5230\u6808\u4e2d\u3002 \u4e0a\u9762\u4e00\u7cfb\u5217\u7684\u6b65\u9aa4\u5c31\u662f\u6784\u9020\u4e86\u4e00\u4e2atrapframe\u3002trapframe \u5728 kernel stack\u4e2d\u7684\u5e03\u5c40\u5982\u4e0b\uff1a \u5728\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u5668\u4e4b\u524dCPU\u5df2\u7ecf\u8bbe\u7f6e\u4e86%cs\u548c%ss\u6bb5\u5bc4\u5b58\u5668\uff0calltraps \u7ee7\u7eed\u5b8c\u6210 %ds \u548c %es \u6bb5\u5bc4\u5b58\u5668\u7684\u8bbe\u7f6e\u3002","title":"\u4fdd\u5b58\u5bc4\u5b58\u5668\u72b6\u6001"},{"location":"xv6/interrups_process/#trap","text":"\u4e0a\u9762\u5df2\u7ecf\u628a\u4e2d\u65ad\u53d1\u751f\u65f6CPU\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u4fdd\u5b58\u5230\u4e86trapframe\u4e2d\uff0c\u4e0b\u9762\u5c31\u8981\u5f00\u59cb\u6267\u884ctrap\u51fd\u6570\u4e86\u3002\u4e0a\u9762\u5df2\u7ecf\u8bf4\u660e\u4e86\u6b64\u65f6\u7684\u6808\u9876\u6307\u9488%esp\u5c31\u662f\u6307\u5411trapframe\uff0c\u56e0\u6b64\u628a%esp push\u5230\u6808\u4e2d\u4f5c\u4e3atrap\u51fd\u6570\u7684\u53c2\u6570, \u3002\u7136\u540e\u8c03\u7528trap\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u662f\u7528\u6765\u5904\u7406\u5404\u79cd\u7c7b\u578b\u7684\u4e2d\u65ad,\u6839\u636e\u4e2d\u65ad\u7f16\u53f7\u5206\u914d\u7ed9\u5177\u4f53\u7684Interupte handler \u53bb\u5904\u7406\uff0c\u5728trap\u51fd\u6570\u5b8c\u6210\u540e\u8fd4\u56de\uff0c\u63a5\u7740alltraps \u901a\u8fc7\u6267\u884c addl $4, %esp \u628atrap\u51fd\u6570\u53c2\u6570\u4ece\u6808\u4e2d\u79fb\u9664\u3002\u6700\u540e\u7cfb\u7edf\u53c8\u8981\u901a\u8fc7trapret\u8fd4\u56de\u5230\u4e2d\u65ad\u539f\u6765\u53d1\u751f\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\u4e86\uff0c\u5177\u4f53\u5c31\u662f\u4ecetrapframe\u4e2d\u4f9d\u6b21\u6062\u590d\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u72b6\u6001\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5df2\u7ecf\u5728\u201c\u7b2c\u4e00\u4e2a\u7528\u6237\u8fdb\u7a0b\u201d\u90a3\u4e00\u7ae0\u7684\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f\u7684\u65f6\u5019\u634b\u8fc7\u4e86\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\u5982\u679c\u4e2d\u65ad\u53d1\u751f\u5728\u7cfb\u7edf\u6b63\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u884c\u6808\u7684\u5207\u6362\u4e5f\u4e0d\u4f1a\u4fdd\u5b58\u6808\u7684\u6bb5\u5bc4\u5b58\u5668%ss\u548c\u6808\u6307\u9488\u5bc4\u5b58\u5668%esp\uff0ctrapret\u7684iret\u6307\u4ee4\u9875\u65e0\u9700\u6062\u590d%esp\u548c%ss\u3002","title":"\u6267\u884ctrap\u51fd\u6570"},{"location":"xv6/scheduler/","text":"CPU\u8c03\u5ea6\u7ebf\u7a0b \u4ece \u7cfb\u7edf\u542f\u52a8\u52a0\u8f7d\uff08boot loader\uff09--> entry.S --> main \u91cc\u7684\u4e00\u7cfb\u5217\u521d\u59cb\u5316 \uff0c\u6700\u540e\u5230scheduler\uff08\uff09\u8fd9\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u4e3b\u5e72\u3002scheduler\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\uff0c\u6709\u72ec\u81ea\u7684\u6808\uff0c\u6bcf\u4e2aCPU\u90fd\u8fd0\u884c\u4e00\u4e2ascheduler\u3002scheduler\u6bcf\u8fd0\u884c\u4e00\u6b21\u5c31\u4f1a\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u72b6\u6001\u4e3aRUNNABLE\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u8ba9\u51faCPU\u7ed9\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\uff0c\u5177\u4f53\u5c31\u662f\u8c03\u7528swtch\u628a\u5f53\u524d\u7684scheduler\u7684\u7ebf\u7a0b\u72b6\u6001\u4fdd\u5b58\u5230\u5b83\u7684\u6808\u4e2d\uff0c\u7136\u540e\u628aCPU\u7684\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e4b\u524d\u5728\u5185\u6838\u6808\u4e2d\u4fdd\u5b58\u7684\u72b6\u6001\u3002\u5f53\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u53c8\u8981\u51b3\u5b9a\u8ba9\u51faCPU\uff0c\u6bd4\u5982\u56e0\u4e3a\u65f6\u95f4\u4e2d\u65ad\u7684\u539f\u56e0\u8c03\u7528yield -> sched -> swtch \u8fd9\u4e00\u6b21\u7f6e\u6362\u4e0e\u524d\u9762\u90a3\u4e00\u6b21\u6b63\u597d\u76f8\u53cd\uff0c\u5148\u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u72b6\u6001\u4fdd\u5b58\u5230\u8be5\u8fdb\u7a0b\u5185\u6838\u6808\u4e2d\uff0c\u7136\u540e\u628a\u524d\u9762\u4fdd\u5b58\u5230scheduler\u7ebf\u7a0b\u6808\u4e2d\u7684CPU\u5bc4\u5b58\u5668\u72b6\u6001\u6062\u590d\u5230CPU\u5bc4\u5b58\u5668\u4e2d\uff0cscheduler\u518d\u6b21\u83b7\u5f97CPU\u7ee7\u7eed\u5728\u4e0a\u4e00\u6b21\u8ba9\u51faCPU\u7684\u5730\u65b9\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u7ee7\u7eedfor\u5faa\u73af\u5bfb\u627e\u4e0b\u4e00\u4e2a\u72b6\u6001\u4e3aRUNNABLE\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u91cd\u590d\u524d\u9762\u7684\u8fc7\u7a0b\u518d\u6b21\u8c03\u7528swtch\u628aCPU\u8ba9\u7ed9\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u3002 \u8fd9\u91cc\u9762\u7684\u91cd\u70b9\u5c31\u662fswtch\u65b9\u6cd5\u4e86\uff0c\u4e0b\u9762\u8be6\u7ec6\u5206\u6790swtch\u65b9\u6cd5\u3002 Context switching \u5982\u4e0a\u6240\u8ff0 switch \u7684\u529f\u80fd\u5c31\u662f \u628a\u5f53\u524d\u7ebf\u7a0b\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u4fdd\u5b58\u5230\u65e7\u7ebf\u7a0b\u7684\u6808\u4e2d\uff0c\u628a\u65b0\u7ebf\u7a0b\u6808\u4e2d\u4e4b\u524d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u6062\u590d\u5230CPU\u5bc4\u5b58\u5668\u4e2d,\u4ee5\u5b9e\u73b0\u7ebf\u7a0b\u7684\u5207\u6362 \u3002switch\u7684\u4ee3\u7801\u5982\u4e0b\uff1a # Context switch # # void swtch(struct context **old, struct context *new); # # Save the current registers on the stack, creating # a struct context, and save its address in *old. # Switch stacks to new and pop previously-saved registers. .globl swtch swtch: movl 4(%esp), %eax // eax = old movl 8(%esp), %edx // edx = new # Save old callee-saved registers pushl %ebp pushl %ebx pushl %esi pushl %edi # Switch stacks movl %esp, (%eax) // *old = esp movl %edx, %esp // esp = new # Load new callee-saved registers popl %edi popl %esi popl %ebx popl %ebp ret \u5728\u8c03\u7528swtch\u51fd\u6570\u7684\u65f6\u5019\u6309\u7167x86\u7684\u60ef\u4f8b\u4f1a\u5148\u628a%eip\u4fdd\u5b58\u5230\u5f53\u524d\u6808\u4e2d,\u7136\u540e\u8df3\u8f6c\u5230swtch\u8fd9\u91cc\u3002\u63a5\u7740swtch\u7684\u56db\u4e2apushl\u547d\u4ee4\u7ee7\u7eed\u4fdd\u5b58callee-saved registers\u5230\u5f53\u524d\u6808\u4e2d\uff0c\u7136\u540e\u540e\u628a\u4fdd\u5b58\u4f4d\u7f6e\u4e5f\u5c31\u662f\u5f53\u524d\u6808\u6307\u9488%esp\u8bb0\u5f55\u5728\u5728*old \u4e2d\u3002 \u63a5\u7740\u628a\u65b0\u7684\u6808\u6307\u9488\u8d4b\u7ed9%esp, \u7136\u540e\u56db\u4e2apopl\u6307\u4ee4\u628a\u65b0\u6808\u4e2d\u4fdd\u5b58\u7684\u72b6\u6001\u503c\u6062\u590d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0cret\u6307\u4ee4\u6062\u590d%eip\u5bc4\u5b58\u5668\u3002 %esp \u548c %eip\u7684\u6062\u590d\u610f\u5473\u7740CPU\u5207\u6362\u4e86\u6808\u548c\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\u3002","title":"Scheduler"},{"location":"xv6/scheduler/#cpu","text":"\u4ece \u7cfb\u7edf\u542f\u52a8\u52a0\u8f7d\uff08boot loader\uff09--> entry.S --> main \u91cc\u7684\u4e00\u7cfb\u5217\u521d\u59cb\u5316 \uff0c\u6700\u540e\u5230scheduler\uff08\uff09\u8fd9\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u4e3b\u5e72\u3002scheduler\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\uff0c\u6709\u72ec\u81ea\u7684\u6808\uff0c\u6bcf\u4e2aCPU\u90fd\u8fd0\u884c\u4e00\u4e2ascheduler\u3002scheduler\u6bcf\u8fd0\u884c\u4e00\u6b21\u5c31\u4f1a\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u72b6\u6001\u4e3aRUNNABLE\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u8ba9\u51faCPU\u7ed9\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\uff0c\u5177\u4f53\u5c31\u662f\u8c03\u7528swtch\u628a\u5f53\u524d\u7684scheduler\u7684\u7ebf\u7a0b\u72b6\u6001\u4fdd\u5b58\u5230\u5b83\u7684\u6808\u4e2d\uff0c\u7136\u540e\u628aCPU\u7684\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\u4e4b\u524d\u5728\u5185\u6838\u6808\u4e2d\u4fdd\u5b58\u7684\u72b6\u6001\u3002\u5f53\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u53c8\u8981\u51b3\u5b9a\u8ba9\u51faCPU\uff0c\u6bd4\u5982\u56e0\u4e3a\u65f6\u95f4\u4e2d\u65ad\u7684\u539f\u56e0\u8c03\u7528yield -> sched -> swtch \u8fd9\u4e00\u6b21\u7f6e\u6362\u4e0e\u524d\u9762\u90a3\u4e00\u6b21\u6b63\u597d\u76f8\u53cd\uff0c\u5148\u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u72b6\u6001\u4fdd\u5b58\u5230\u8be5\u8fdb\u7a0b\u5185\u6838\u6808\u4e2d\uff0c\u7136\u540e\u628a\u524d\u9762\u4fdd\u5b58\u5230scheduler\u7ebf\u7a0b\u6808\u4e2d\u7684CPU\u5bc4\u5b58\u5668\u72b6\u6001\u6062\u590d\u5230CPU\u5bc4\u5b58\u5668\u4e2d\uff0cscheduler\u518d\u6b21\u83b7\u5f97CPU\u7ee7\u7eed\u5728\u4e0a\u4e00\u6b21\u8ba9\u51faCPU\u7684\u5730\u65b9\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u7ee7\u7eedfor\u5faa\u73af\u5bfb\u627e\u4e0b\u4e00\u4e2a\u72b6\u6001\u4e3aRUNNABLE\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u91cd\u590d\u524d\u9762\u7684\u8fc7\u7a0b\u518d\u6b21\u8c03\u7528swtch\u628aCPU\u8ba9\u7ed9\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u3002 \u8fd9\u91cc\u9762\u7684\u91cd\u70b9\u5c31\u662fswtch\u65b9\u6cd5\u4e86\uff0c\u4e0b\u9762\u8be6\u7ec6\u5206\u6790swtch\u65b9\u6cd5\u3002","title":"CPU\u8c03\u5ea6\u7ebf\u7a0b"},{"location":"xv6/scheduler/#context-switching","text":"\u5982\u4e0a\u6240\u8ff0 switch \u7684\u529f\u80fd\u5c31\u662f \u628a\u5f53\u524d\u7ebf\u7a0b\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u4fdd\u5b58\u5230\u65e7\u7ebf\u7a0b\u7684\u6808\u4e2d\uff0c\u628a\u65b0\u7ebf\u7a0b\u6808\u4e2d\u4e4b\u524d\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u6062\u590d\u5230CPU\u5bc4\u5b58\u5668\u4e2d,\u4ee5\u5b9e\u73b0\u7ebf\u7a0b\u7684\u5207\u6362 \u3002switch\u7684\u4ee3\u7801\u5982\u4e0b\uff1a # Context switch # # void swtch(struct context **old, struct context *new); # # Save the current registers on the stack, creating # a struct context, and save its address in *old. # Switch stacks to new and pop previously-saved registers. .globl swtch swtch: movl 4(%esp), %eax // eax = old movl 8(%esp), %edx // edx = new # Save old callee-saved registers pushl %ebp pushl %ebx pushl %esi pushl %edi # Switch stacks movl %esp, (%eax) // *old = esp movl %edx, %esp // esp = new # Load new callee-saved registers popl %edi popl %esi popl %ebx popl %ebp ret \u5728\u8c03\u7528swtch\u51fd\u6570\u7684\u65f6\u5019\u6309\u7167x86\u7684\u60ef\u4f8b\u4f1a\u5148\u628a%eip\u4fdd\u5b58\u5230\u5f53\u524d\u6808\u4e2d,\u7136\u540e\u8df3\u8f6c\u5230swtch\u8fd9\u91cc\u3002\u63a5\u7740swtch\u7684\u56db\u4e2apushl\u547d\u4ee4\u7ee7\u7eed\u4fdd\u5b58callee-saved registers\u5230\u5f53\u524d\u6808\u4e2d\uff0c\u7136\u540e\u540e\u628a\u4fdd\u5b58\u4f4d\u7f6e\u4e5f\u5c31\u662f\u5f53\u524d\u6808\u6307\u9488%esp\u8bb0\u5f55\u5728\u5728*old \u4e2d\u3002 \u63a5\u7740\u628a\u65b0\u7684\u6808\u6307\u9488\u8d4b\u7ed9%esp, \u7136\u540e\u56db\u4e2apopl\u6307\u4ee4\u628a\u65b0\u6808\u4e2d\u4fdd\u5b58\u7684\u72b6\u6001\u503c\u6062\u590d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0cret\u6307\u4ee4\u6062\u590d%eip\u5bc4\u5b58\u5668\u3002 %esp \u548c %eip\u7684\u6062\u590d\u610f\u5473\u7740CPU\u5207\u6362\u4e86\u6808\u548c\u6b63\u5728\u6267\u884c\u7684\u4ee3\u7801\u3002","title":"Context switching"},{"location":"xv6/scheduling/","text":"","title":"Scheduling"},{"location":"xv6/system_call/","text":"\u7cfb\u7edf\u8c03\u7528 \u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6237\u63a5\u53e3 \u7528\u6237\u7a0b\u5e8f\u7cfb\u7edf\u8c03\u7528\u7684\u63a5\u53e3\u5728 user.h \u91cc\u5b9a\u4e49\uff0c\u5728usys.S\u91cc\u5b9e\u73b0\uff0c\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u7528\u4e00\u4e2a\u5b8f\u5b9e\u73b0 #define SYSCALL(name) \\ .globl name; \\ name: \\ movl $SYS_ ## name, %eax; \\ int $T_SYSCALL; \\ ret movl $SYS_ ## name, %eax; \u8fd9\u91cc\u7684\u201d##\u201c\u662f\u5b8f\u5b9a\u4e49\u91cc\u7528\u4e8e\u62fc\u63a5\u53d8\u91cf\u7528\u7684\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u628a\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u8d4b\u503c\u7ed9%eax\uff0c\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u662f\u7528\u6765\u6807\u8bc6\u5c06\u8981\u88ab\u8c03\u7528\u7684\u7cfb\u7edf\u670d\u52a1\u63a5\u53e3\u3002\u8fd8\u8bb0\u5f97\u5728\u201c\u4e2d\u65ad\u5904\u7406\u201d\u90a3\u4e00\u7ae0\uff0c\u4e2d\u65ad\u53d1\u751f\u540e\u6240\u6709\u5bc4\u5b58\u5668\u90fd\u4f1a\u88ab\u88ab\u4fdd\u5b58\u5230trapframe\u4e2d\uff0c\u800ceax\u4f5c\u4e3a\u5176\u4e2d\u4e4b\u4e00\u4f1a\u5728syscall\u90a3\u91cc\u4f7f\u7528\u5230\u3002 int $T_SYSCALL \u4ea7\u751f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\uff0c\u8fd8\u8bb0\u5f97\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u7801\u5373T_SYSCALL\u662f64\u3002 \u7cfb\u7edf\u8c03\u7528\u7684\u6d41\u7a0b \u8fd9\u91cc\u4ee5exec\u4e3a\u4f8b\uff0c\u5f53\u7528\u6237\u7a0b\u5e8f\u6267\u884cexec\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u540e\uff0c\u4f1a\u6267\u884cusys.S\u91ccSYSCALL(exec)\u5b8f\u5b9a\u4e49\u7684\u4ee3\u7801,\u8fd9\u6bb5\u4ee3\u7801\u5728\u9884\u5904\u7406\u5b8c\u6210\u540e\u4f1a\u662f\u4e0b\u9762\u7684\u6837\u5b50 .globl exec; exec: movl $SYS_exec, %eax; int $T_SYSCALL; ret int $T_SYSCALL \u4ea7\u751f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\uff0cCPU\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u7684\u6d41\u7a0b\uff0c\u5173\u4e8e\u4e2d\u65ad\u5904\u7406\u7684\u6d41\u7a0b\u53c2\u89c1\u524d\u4e00\u7ae0\u201c\u4e2d\u65ad\u5904\u7406\u201d\uff0c\u5728\u90a3\u4e00\u7ae0\u91cc\u8bb2\u4e86\u7cfb\u7edf\u5982\u4f55\u627e\u5230\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\uff0c\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u72b6\u6001\uff0c\u6700\u540e\u8fdb\u5165trap\u51fd\u6570\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bb2\u5728trap\u51fd\u6570\u91cc\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u8fc7\u7a0b\u3002 \u5728trap\u51fd\u6570\u91cc\u901a\u8fc7\u4e2d\u65ad\u7f16\u53f7\uff08trapno\uff09\u5224\u65ad\u4e2d\u65ad\u7c7b\u578b\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u8c03\u7528syscall\u51fd\u6570\uff0c\u5728syscall\u51fd\u6570\u91cc\u53d6\u51fa\u4fdd\u5b58\u5728trapframe\u91cc\u7684eax\uff0c\u5373\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u3002\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u5728\u7cfb\u7edf\u8c03\u7528\u5217\u8868\u4e2d\uff08syscalls[]\uff09\u7d22\u5f15\u5230\u76f8\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u5373sys_exec\uff0c\u7136\u540e\u8c03\u7528sys_exec\u5e76\u5c06\u8fd4\u56de\u503c\u8d4b\u4e88trapfraem\u7684eax\uff0c\u5728\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u65f6trapfraem\u7684eax\u505a\u4e3a\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\u4f1a\u88ab\u6062\u590d\u5230%eax\u5bc4\u5b58\u5668\u4e2d\u3002 \u83b7\u53d6\u7cfb\u7edf\u8c03\u7528\u53c2\u6570 \u5185\u6838\u91cc\u9762\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u7684\u51fd\u6570\u6bd4\u5982sys_exec\uff0c\u8981\u83b7\u53d6\u7528\u6237\u7a0b\u5e8f\u4f20\u9012\u7684\u53c2\u6570\uff0c\u800c\u7528\u6237\u7a0b\u5e8f\u4f20\u9012\u7684\u53c2\u6570\u662f\u653e\u5728\u8fdb\u7a0b\u7684\u7528\u6237\u6808\u91cc\u7684\uff0c\u8fd9\u91cc\u7528\u6237\u6808\u7684\u6808\u9876\u6307\u9488\u4fdd\u5b58\u5728trapframe\u7684esp\u91cc\uff0c\u6808\u9876\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740\uff0c\u4ece\u7b2c\u4e8c\u503c\u5f00\u59cb\u624d\u662f\u4f20\u9012\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5730\u5740\u662f %esp+4 \uff0c \u7b2cn\u4e2a\u53c2\u6570\u7684\u5730\u5740\u662f %esp+4+4*n \u3002 \u7cfb\u7edf\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u8f85\u52a9\u51fd\u6570\u5982argint, argptr, argstr\u548cargfd \u5206\u522b\u53bb\u83b7\u53d6\u6574\u578b\uff0c\u6307\u9488\u578b\uff0c\u5b57\u7b26\u4e32\u578b\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u578b\u7684\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u3002\u4f8b\u5982argint\u9996\u5148\u8ba1\u7b97\u7b2cn\u4e2a\u53c2\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5730\u5740\u544a\u8bc9fetchint\uff0cfetchint\u53d6\u51fa\u8fd9\u4e2a\u5730\u5740\u4e0a\u7684int\u6570\u636e\u5e76\u62f7\u8d1d\u5230ip\u6307\u5b9a\u7684\u53d8\u91cf\u5730\u5740\u4e0a\u3002","title":"\u7cfb\u7edf\u8c03\u7528"},{"location":"xv6/system_call/#_1","text":"","title":"\u7cfb\u7edf\u8c03\u7528"},{"location":"xv6/system_call/#_2","text":"\u7528\u6237\u7a0b\u5e8f\u7cfb\u7edf\u8c03\u7528\u7684\u63a5\u53e3\u5728 user.h \u91cc\u5b9a\u4e49\uff0c\u5728usys.S\u91cc\u5b9e\u73b0\uff0c\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u7528\u4e00\u4e2a\u5b8f\u5b9e\u73b0 #define SYSCALL(name) \\ .globl name; \\ name: \\ movl $SYS_ ## name, %eax; \\ int $T_SYSCALL; \\ ret movl $SYS_ ## name, %eax; \u8fd9\u91cc\u7684\u201d##\u201c\u662f\u5b8f\u5b9a\u4e49\u91cc\u7528\u4e8e\u62fc\u63a5\u53d8\u91cf\u7528\u7684\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u628a\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u8d4b\u503c\u7ed9%eax\uff0c\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u662f\u7528\u6765\u6807\u8bc6\u5c06\u8981\u88ab\u8c03\u7528\u7684\u7cfb\u7edf\u670d\u52a1\u63a5\u53e3\u3002\u8fd8\u8bb0\u5f97\u5728\u201c\u4e2d\u65ad\u5904\u7406\u201d\u90a3\u4e00\u7ae0\uff0c\u4e2d\u65ad\u53d1\u751f\u540e\u6240\u6709\u5bc4\u5b58\u5668\u90fd\u4f1a\u88ab\u88ab\u4fdd\u5b58\u5230trapframe\u4e2d\uff0c\u800ceax\u4f5c\u4e3a\u5176\u4e2d\u4e4b\u4e00\u4f1a\u5728syscall\u90a3\u91cc\u4f7f\u7528\u5230\u3002 int $T_SYSCALL \u4ea7\u751f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\uff0c\u8fd8\u8bb0\u5f97\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u7801\u5373T_SYSCALL\u662f64\u3002","title":"\u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6237\u63a5\u53e3"},{"location":"xv6/system_call/#_3","text":"\u8fd9\u91cc\u4ee5exec\u4e3a\u4f8b\uff0c\u5f53\u7528\u6237\u7a0b\u5e8f\u6267\u884cexec\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u540e\uff0c\u4f1a\u6267\u884cusys.S\u91ccSYSCALL(exec)\u5b8f\u5b9a\u4e49\u7684\u4ee3\u7801,\u8fd9\u6bb5\u4ee3\u7801\u5728\u9884\u5904\u7406\u5b8c\u6210\u540e\u4f1a\u662f\u4e0b\u9762\u7684\u6837\u5b50 .globl exec; exec: movl $SYS_exec, %eax; int $T_SYSCALL; ret int $T_SYSCALL \u4ea7\u751f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\uff0cCPU\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u7684\u6d41\u7a0b\uff0c\u5173\u4e8e\u4e2d\u65ad\u5904\u7406\u7684\u6d41\u7a0b\u53c2\u89c1\u524d\u4e00\u7ae0\u201c\u4e2d\u65ad\u5904\u7406\u201d\uff0c\u5728\u90a3\u4e00\u7ae0\u91cc\u8bb2\u4e86\u7cfb\u7edf\u5982\u4f55\u627e\u5230\u4e2d\u65ad\u5904\u7406\u7684\u5165\u53e3\uff0c\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u72b6\u6001\uff0c\u6700\u540e\u8fdb\u5165trap\u51fd\u6570\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bb2\u5728trap\u51fd\u6570\u91cc\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u5904\u7406\u8fc7\u7a0b\u3002 \u5728trap\u51fd\u6570\u91cc\u901a\u8fc7\u4e2d\u65ad\u7f16\u53f7\uff08trapno\uff09\u5224\u65ad\u4e2d\u65ad\u7c7b\u578b\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u7136\u540e\u8c03\u7528syscall\u51fd\u6570\uff0c\u5728syscall\u51fd\u6570\u91cc\u53d6\u51fa\u4fdd\u5b58\u5728trapframe\u91cc\u7684eax\uff0c\u5373\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u3002\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u5728\u7cfb\u7edf\u8c03\u7528\u5217\u8868\u4e2d\uff08syscalls[]\uff09\u7d22\u5f15\u5230\u76f8\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u5373sys_exec\uff0c\u7136\u540e\u8c03\u7528sys_exec\u5e76\u5c06\u8fd4\u56de\u503c\u8d4b\u4e88trapfraem\u7684eax\uff0c\u5728\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u65f6trapfraem\u7684eax\u505a\u4e3a\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\u4f1a\u88ab\u6062\u590d\u5230%eax\u5bc4\u5b58\u5668\u4e2d\u3002","title":"\u7cfb\u7edf\u8c03\u7528\u7684\u6d41\u7a0b"},{"location":"xv6/system_call/#_4","text":"\u5185\u6838\u91cc\u9762\u5b9e\u73b0\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u7684\u51fd\u6570\u6bd4\u5982sys_exec\uff0c\u8981\u83b7\u53d6\u7528\u6237\u7a0b\u5e8f\u4f20\u9012\u7684\u53c2\u6570\uff0c\u800c\u7528\u6237\u7a0b\u5e8f\u4f20\u9012\u7684\u53c2\u6570\u662f\u653e\u5728\u8fdb\u7a0b\u7684\u7528\u6237\u6808\u91cc\u7684\uff0c\u8fd9\u91cc\u7528\u6237\u6808\u7684\u6808\u9876\u6307\u9488\u4fdd\u5b58\u5728trapframe\u7684esp\u91cc\uff0c\u6808\u9876\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740\uff0c\u4ece\u7b2c\u4e8c\u503c\u5f00\u59cb\u624d\u662f\u4f20\u9012\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u5730\u5740\u662f %esp+4 \uff0c \u7b2cn\u4e2a\u53c2\u6570\u7684\u5730\u5740\u662f %esp+4+4*n \u3002 \u7cfb\u7edf\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u8f85\u52a9\u51fd\u6570\u5982argint, argptr, argstr\u548cargfd \u5206\u522b\u53bb\u83b7\u53d6\u6574\u578b\uff0c\u6307\u9488\u578b\uff0c\u5b57\u7b26\u4e32\u578b\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u578b\u7684\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u3002\u4f8b\u5982argint\u9996\u5148\u8ba1\u7b97\u7b2cn\u4e2a\u53c2\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5730\u5740\u544a\u8bc9fetchint\uff0cfetchint\u53d6\u51fa\u8fd9\u4e2a\u5730\u5740\u4e0a\u7684int\u6570\u636e\u5e76\u62f7\u8d1d\u5230ip\u6307\u5b9a\u7684\u53d8\u91cf\u5730\u5740\u4e0a\u3002","title":"\u83b7\u53d6\u7cfb\u7edf\u8c03\u7528\u53c2\u6570"},{"location":"xv6/the_first_process/","text":"\u7b2c\u4e00\u4e2a\u8fdb\u7a0b \u4ec0\u4e48\u662f\u8fdb\u7a0b\uff1f\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u8fdb\u7a0b\u662f\u5bf9\u4e00\u53f0\u673a\u5668\u7684\u62bd\u8c61\uff0c\u5b83\u53ef\u4ee5\u7ed9\u7528\u6237\u4e00\u79cd\u4eab\u6709\u5355\u72ec\u7684\u5904\u7406\u5668\u548c\u5185\u5b58\u7684\u5047\u8c61\u3002\u4ece\u5177\u4f53\u5b9e\u73b0\u4e0a\u8bb2\uff0c\u8fdb\u7a0b\u5c31\u662fCPU\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u548c\u865a\u62df\u5185\u5b58\u7684\u9875\u8868\u3002 \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u521b\u5efa \u7cfb\u7edf\u7684\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u521d\u59cb\u5316\u5728 userinit \u51fd\u6570\u91cc\u5b8c\u6210\u3002\u8be5\u51fd\u6570\u9996\u5148\u8c03\u7528 allocproc \u5206\u914d\u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u8c61\uff0c\u7cfb\u7edf\u6bcf\u4e2a\u8fdb\u7a0b\u5bf9\u8c61\u90fd\u8981\u901a\u8fc7allocproc\u5206\u914d\uff0c \u7cfb\u7edf\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u4e5f\u4e0d\u4f8b\u5916\u3002\u5728allocproc\u4e2d\u6211\u4eec\u4ece\u8fdb\u7a0b\u5217\u8868\uff08ptable\uff09\u4e2d\u7533\u8bf7\u5230\u4e00\u4e2a\u72b6\u6001\u4e3aUNUSED\u7684\u8fdb\u7a0b\uff0c \u7533\u8bf7\u5230\u8fdb\u7a0b\u540e\u8bbe\u7f6e\u5b83\u7684\u72b6\u6001\u4e3aEMBRYO\uff0c\u5e76\u5206\u914d\u4e00\u4e2a\u8fdb\u7a0b\u7f16\u53f7\u3002\u7136\u540e\u8981\u4e3a\u8be5\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u5185\u6838\u6808\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a\u5185\u6838\u6808\uff0c\u4e00\u4e2a\u7528\u6237\u6808\uff0c\u5185\u6838\u6808\u662f\u8be5\u8fdb\u7a0b\u8fdb\u5165\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\u6240\u4f7f\u7528\u7684\u6808\uff0c\u7528\u6237\u6808\u662f\u8be5\u8fdb\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528\u7684\u6808\u3002\u7ee7\u7eed\u770ballocproc\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\u8fdb\u7a0b\u7684trapframe\u548ccontext\u4e5f\u5728\u8fd9\u4e2a\u5206\u914d\u7684\u5185\u6838\u6808\u4e2d\u3002trapframe\u4f5c\u7528\u662f\u5728\u8fdb\u7a0b\u53d1\u751f\u4e2d\u65ad\u65f6\u4fdd\u5b58\u7684\u5f53\u524d\u8fdb\u7a0b\u5bc4\u5b58\u5668\u7684\u72b6\u6001\uff0c\u7136\u540e\u5728\u4e2d\u65ad\u5b8c\u6210\u65f6\u6062\u590d\u8fdb\u7a0b\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u3002\u5728userinit\u4e2d\u53ef\u4ee5\u770b\u5230trapframe\u5728\u8fd9\u91cc\u662f\u7528\u6765\u4fdd\u5b58\u7528\u6237\u6a21\u5f0f\u4e0b\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u3002\u6bd4\u5982 p->tf->cs = (SEG_UCODE << 3) | DPL_USER \u8fd9\u91cc\u7684DPL_USER\uff08=3\uff09\u5c31\u662f\u7528\u6237\u6a21\u5f0f\u7684\u7279\u6743\u7ea7\u522b\uff0c\u7279\u6743\u7ea7\u522b\u5206\u4e09\u4e2a\u7b49\u7ea7\uff0c\u7b49\u7ea7\u6700\u9ad8\u7684\u503c\u662f0\uff0c\u6700\u4f4e\u7684\u503c\u662f3, \u4f4e\u7ea7\u522b\u6307\u4ee4\u7684\u4e0d\u80fd\u8bbf\u95ee\u9ad8\u7ea7\u522b\u7684\u6bb5\u5730\u5740\uff0cxv6\u7cfb\u7edf\u53ea\u7528\u4e86\u4e24\u4e2a\u7ea7\u522b0\u548c3\uff0c\u5185\u6838\u6a21\u5f0f\u662f0\uff0c\u7528\u6237\u6a21\u5f0f\u662f3\u3002\u518d\u6bd4\u5982eip\u5728\u8fd9\u91cc\u8bbe\u7f6e\u4e3a0,\u662f\u8be5\u8fdb\u7a0b\u7684\u5165\u53e3\u5730\u5740\u3002context\u662f\u7cfb\u7edf\u5728\u8fdb\u884c\u8c03\u5ea6\u65f6\u628a\u5f53\u524d\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u4fdd\u5b58\u5728\u65e7\u7684context\u91cc\uff0c\u7136\u540e\u628a\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u65b0\u7684context\u91cc\u7684\u503c\u3002\u5b8c\u6210\u5185\u6838\u6808\u7684\u5206\u914d\u540e\uff0c\u5b83\u7684\u5e03\u5c40\u5982\u4e0b\uff1a userinit\u7684\u4e0b\u4e00\u6b65\u5c31\u662f\u8981\u5206\u914d\u865a\u62df\u5185\u5b58\u7684\u9875\u8868\uff0c\u8fd9\u662f\u901a\u8fc7setupkvm()\u5b9e\u73b0\u7684\u3002setupkvm\u7ed9\u8fdb\u7a0b\u5206\u914d\u4e86\u4e00\u4e2a\u9875\u8868\uff0c\u5e76\u521d\u59cb\u5316\u4e86\u5185\u6838\u7684\u6620\u5c04\u3002\u5185\u6838\u5185\u5b58\u7a7a\u95f4\u8bbe\u7f6e\u5b8c\u6bd5\u540e\uff0c\u8c03\u7528 inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size) \u8bbe\u7f6e\u8fd9\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u7528\u6237\u5185\u5b58\u7a7a\u95f4\uff0c_binary_initcode_start\u548c_binary_initcode_size\u5206\u522b\u662f\u201cinitcode.S\u201d\u7684\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u662f\u7531\u94fe\u63a5\u5668\u6839\u636eMakeFile\u7684\u8bbe\u7f6e kernel: $(OBJS) entry.o entryother initcode kernel.ld $(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother \u81ea\u52a8\u52a0\u5230elf\u6587\u4ef6\u91cc\u7684\u3002inituvm\u4f1a\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u5e76\u628ainitcode.S\u5bf9\u5e94\u7684\u7f16\u8bd1\u4ee3\u7801\u62f7\u8d1d\u8fdb\u6765\u3002 \u6700\u540euserinit\u628a\u8fdb\u7a0b\u7684\u72b6\u6001\u8bbe\u7f6e\u4e3aRUNNABLE\uff0c\u8868\u793a\u8fd9\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u88ab\u8c03\u5ea6\u8fdbcpu\u8fd0\u884c\u4e86\u3002 \u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c \u4e0a\u9762\u5df2\u7ecf\u5b8c\u6210\u4e86\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u521b\u5efa\uff0c\u7136\u540e\u5728\u524d\u9762\u8bb2\u7684\u201cscheduler\u201d\u8fd0\u884c\u8d77\u6765\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u901a\u8fc7swtch\u628a\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u8d77\u6765\u3002 \u8fd8\u8bb0\u5f97\u8fd9\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684context\u662f\u5728allocproc\u4e2d\u8bbe\u7f6e\u7684\uff0c%eip=forkret\uff0c\u5176\u4ed6\u5bc4\u5b58\u5668=0\u3002\u6240\u4ee5\u6700\u540eret\u6307\u4ee4\u8fd4\u56de\u5230forkret\u51fd\u6570\u3002 forkret\u6267\u884c\u4e86\u4e00\u4e9b\u5fc5\u987b\u5728\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7684\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u8fdb\u5165trapret\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fdb\u5165trapret\u5462\uff1f\u770b\u4e0a\u9762\u7684\u8fdb\u7a0b\u5185\u6838\u6808\u7684\u5e03\u5c40\u56fe\uff0c\u8fdb\u7a0bcontext\u5168\u90e8\u9000\u6808\u4ee5\u540e\uff0c\u6808\u9876\u6307\u9488\u6307\u5411\u4e86trapret\uff0c\u6240\u4ee5forkret\u5b8c\u6210\u540e\u8fd4\u56de\u5230trapret\u4e86\u3002trapret\u5728'trapasm.S'\u6587\u4ef6\u91cc\u5b9a\u4e49\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a # Return falls through to trapret... .globl trapret trapret: popal popl %gs popl %fs popl %es popl %ds addl $0x8, %esp # trapno and errcode iret \u8fd9\u91cc\u5b9e\u9645\u5c31\u662f\u628a\u8fdb\u7a0btrapframe\u4fdd\u5b58\u7684\u503c\u6062\u590d\u5230\u5bc4\u5b58\u5668\u4e2d\u3002\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5462\uff1f\u8fd8\u662f\u6839\u636e\u524d\u9762\u8bb2\u5230\u7684\u8fdb\u7a0b\u5185\u6838\u6808\u5e03\u5c40\uff0c\u5f53trapret\u9000\u6808\u4ee5\u540e\u6808\u9876\u6307\u9488\u521a\u597d\u6307\u5411\u8fdb\u7a0b\u7684trapframe\uff0c\u8fd8\u8bb0\u5f97\u8fd9\u4e2atrapframe \u662f\u5728userinit\u91cc\u8bbe\u7f6e\u7684\u3002\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u628a\u5404\u4e2a\u5bc4\u5b58\u5668\u72b6\u6001\u6062\u590d\uff0c addl $0x8, %esp \u662f\u7565\u8fc7trapframe\u91cc\u7684trapno \u548c errcode,\u6700\u540e\u7684iret\u628a\u6307\u4ee4\u5bc4\u5b58\u5668%eip %cs\u548c\u6808\u5bc4\u5b58\u5668 %esp %ss \u4ecetrapframe\u4e2d\u6062\u590d\uff0c\u7cfb\u7edf\u8fdb\u5165\u7528\u6237\u6a21\u5f0f\uff0c\u5f00\u59cb\u8fd0\u884cinitcode.S\u7684\u4ee3\u7801\u3002 \u8fd0\u884cinitcode.S initcode.S \u5b9e\u9645\u5c31\u662f\u624b\u52a8\u5236\u4f5c\u4e86\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u9996\u5148 pushl $argv , pushl $init \u4f5c\u4e3a\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u3002\u7136\u540e pushl $0 \u662f\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740, \u5b9e\u9645\u8c03\u7528exec\u4e0d\u4f1a\u8fd4\u56de\uff0c\u8fd9\u4e2a\u5730\u5740\u53ea\u662f\u5360\u4f4d\u7528\u7684\u3002\u6700\u540e movl $SYS_exec, %eax \u662f\u628aeax\u8bbe\u7f6e\u4e3a\u4ee3\u8868exec\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u7f16\u53f7\uff0c\u5e76\u6267\u884c int T_SYSCALL \u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\uff0c\u5411\u5185\u6838\u7533\u8bf7\u8fd0\u884cexec\u7cfb\u7edf\u8c03\u7528\uff08\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u548c\u4e2d\u65ad\u5904\u7406\u6d41\u7a0b\u53c2\u89c1\u540e\u9762\u7684\u201c\u4e2d\u65ad\u5904\u7406\u201d\u548c\u201c\u7cfb\u7edf\u8c03\u7528\u201d\u7ae0\u8282\uff09\u3002exec\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u6839\u636e\u7528\u6237\u7a0b\u5e8f\u4f20\u5165\u7684\u53c2\u6570\"init\",\u628ainitcode \u66ff\u6362\u4e3ainit\u5e76\u8fd0\u884c\u3002\u201cinit\u201d\u5f00\u542f\u4e86\u4e00\u4e2a\u63a7\u5236\u53f0shell.","title":"\u7b2c\u4e00\u4e2a\u8fdb\u7a0b"},{"location":"xv6/the_first_process/#_1","text":"\u4ec0\u4e48\u662f\u8fdb\u7a0b\uff1f\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u8fdb\u7a0b\u662f\u5bf9\u4e00\u53f0\u673a\u5668\u7684\u62bd\u8c61\uff0c\u5b83\u53ef\u4ee5\u7ed9\u7528\u6237\u4e00\u79cd\u4eab\u6709\u5355\u72ec\u7684\u5904\u7406\u5668\u548c\u5185\u5b58\u7684\u5047\u8c61\u3002\u4ece\u5177\u4f53\u5b9e\u73b0\u4e0a\u8bb2\uff0c\u8fdb\u7a0b\u5c31\u662fCPU\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u548c\u865a\u62df\u5185\u5b58\u7684\u9875\u8868\u3002","title":"\u7b2c\u4e00\u4e2a\u8fdb\u7a0b"},{"location":"xv6/the_first_process/#_2","text":"\u7cfb\u7edf\u7684\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u521d\u59cb\u5316\u5728 userinit \u51fd\u6570\u91cc\u5b8c\u6210\u3002\u8be5\u51fd\u6570\u9996\u5148\u8c03\u7528 allocproc \u5206\u914d\u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u8c61\uff0c\u7cfb\u7edf\u6bcf\u4e2a\u8fdb\u7a0b\u5bf9\u8c61\u90fd\u8981\u901a\u8fc7allocproc\u5206\u914d\uff0c \u7cfb\u7edf\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u4e5f\u4e0d\u4f8b\u5916\u3002\u5728allocproc\u4e2d\u6211\u4eec\u4ece\u8fdb\u7a0b\u5217\u8868\uff08ptable\uff09\u4e2d\u7533\u8bf7\u5230\u4e00\u4e2a\u72b6\u6001\u4e3aUNUSED\u7684\u8fdb\u7a0b\uff0c \u7533\u8bf7\u5230\u8fdb\u7a0b\u540e\u8bbe\u7f6e\u5b83\u7684\u72b6\u6001\u4e3aEMBRYO\uff0c\u5e76\u5206\u914d\u4e00\u4e2a\u8fdb\u7a0b\u7f16\u53f7\u3002\u7136\u540e\u8981\u4e3a\u8be5\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u5185\u6838\u6808\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u4e00\u4e2a\u5185\u6838\u6808\uff0c\u4e00\u4e2a\u7528\u6237\u6808\uff0c\u5185\u6838\u6808\u662f\u8be5\u8fdb\u7a0b\u8fdb\u5165\u5185\u6838\u6a21\u5f0f\u4e0b\u8fd0\u884c\u6240\u4f7f\u7528\u7684\u6808\uff0c\u7528\u6237\u6808\u662f\u8be5\u8fdb\u7a0b\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u4f7f\u7528\u7684\u6808\u3002\u7ee7\u7eed\u770ballocproc\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\u8fdb\u7a0b\u7684trapframe\u548ccontext\u4e5f\u5728\u8fd9\u4e2a\u5206\u914d\u7684\u5185\u6838\u6808\u4e2d\u3002trapframe\u4f5c\u7528\u662f\u5728\u8fdb\u7a0b\u53d1\u751f\u4e2d\u65ad\u65f6\u4fdd\u5b58\u7684\u5f53\u524d\u8fdb\u7a0b\u5bc4\u5b58\u5668\u7684\u72b6\u6001\uff0c\u7136\u540e\u5728\u4e2d\u65ad\u5b8c\u6210\u65f6\u6062\u590d\u8fdb\u7a0b\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u3002\u5728userinit\u4e2d\u53ef\u4ee5\u770b\u5230trapframe\u5728\u8fd9\u91cc\u662f\u7528\u6765\u4fdd\u5b58\u7528\u6237\u6a21\u5f0f\u4e0b\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u72b6\u6001\u3002\u6bd4\u5982 p->tf->cs = (SEG_UCODE << 3) | DPL_USER \u8fd9\u91cc\u7684DPL_USER\uff08=3\uff09\u5c31\u662f\u7528\u6237\u6a21\u5f0f\u7684\u7279\u6743\u7ea7\u522b\uff0c\u7279\u6743\u7ea7\u522b\u5206\u4e09\u4e2a\u7b49\u7ea7\uff0c\u7b49\u7ea7\u6700\u9ad8\u7684\u503c\u662f0\uff0c\u6700\u4f4e\u7684\u503c\u662f3, \u4f4e\u7ea7\u522b\u6307\u4ee4\u7684\u4e0d\u80fd\u8bbf\u95ee\u9ad8\u7ea7\u522b\u7684\u6bb5\u5730\u5740\uff0cxv6\u7cfb\u7edf\u53ea\u7528\u4e86\u4e24\u4e2a\u7ea7\u522b0\u548c3\uff0c\u5185\u6838\u6a21\u5f0f\u662f0\uff0c\u7528\u6237\u6a21\u5f0f\u662f3\u3002\u518d\u6bd4\u5982eip\u5728\u8fd9\u91cc\u8bbe\u7f6e\u4e3a0,\u662f\u8be5\u8fdb\u7a0b\u7684\u5165\u53e3\u5730\u5740\u3002context\u662f\u7cfb\u7edf\u5728\u8fdb\u884c\u8c03\u5ea6\u65f6\u628a\u5f53\u524d\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u4fdd\u5b58\u5728\u65e7\u7684context\u91cc\uff0c\u7136\u540e\u628a\u5bc4\u5b58\u5668\u8bbe\u7f6e\u4e3a\u65b0\u7684context\u91cc\u7684\u503c\u3002\u5b8c\u6210\u5185\u6838\u6808\u7684\u5206\u914d\u540e\uff0c\u5b83\u7684\u5e03\u5c40\u5982\u4e0b\uff1a userinit\u7684\u4e0b\u4e00\u6b65\u5c31\u662f\u8981\u5206\u914d\u865a\u62df\u5185\u5b58\u7684\u9875\u8868\uff0c\u8fd9\u662f\u901a\u8fc7setupkvm()\u5b9e\u73b0\u7684\u3002setupkvm\u7ed9\u8fdb\u7a0b\u5206\u914d\u4e86\u4e00\u4e2a\u9875\u8868\uff0c\u5e76\u521d\u59cb\u5316\u4e86\u5185\u6838\u7684\u6620\u5c04\u3002\u5185\u6838\u5185\u5b58\u7a7a\u95f4\u8bbe\u7f6e\u5b8c\u6bd5\u540e\uff0c\u8c03\u7528 inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size) \u8bbe\u7f6e\u8fd9\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u7528\u6237\u5185\u5b58\u7a7a\u95f4\uff0c_binary_initcode_start\u548c_binary_initcode_size\u5206\u522b\u662f\u201cinitcode.S\u201d\u7684\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\uff0c\u8fd9\u4e24\u4e2a\u53d8\u91cf\u662f\u7531\u94fe\u63a5\u5668\u6839\u636eMakeFile\u7684\u8bbe\u7f6e kernel: $(OBJS) entry.o entryother initcode kernel.ld $(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother \u81ea\u52a8\u52a0\u5230elf\u6587\u4ef6\u91cc\u7684\u3002inituvm\u4f1a\u5206\u914d\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u5e76\u628ainitcode.S\u5bf9\u5e94\u7684\u7f16\u8bd1\u4ee3\u7801\u62f7\u8d1d\u8fdb\u6765\u3002 \u6700\u540euserinit\u628a\u8fdb\u7a0b\u7684\u72b6\u6001\u8bbe\u7f6e\u4e3aRUNNABLE\uff0c\u8868\u793a\u8fd9\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u88ab\u8c03\u5ea6\u8fdbcpu\u8fd0\u884c\u4e86\u3002","title":"\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u521b\u5efa"},{"location":"xv6/the_first_process/#_3","text":"\u4e0a\u9762\u5df2\u7ecf\u5b8c\u6210\u4e86\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u521b\u5efa\uff0c\u7136\u540e\u5728\u524d\u9762\u8bb2\u7684\u201cscheduler\u201d\u8fd0\u884c\u8d77\u6765\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\uff0c\u7136\u540e\u901a\u8fc7swtch\u628a\u8fd9\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u8d77\u6765\u3002 \u8fd8\u8bb0\u5f97\u8fd9\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684context\u662f\u5728allocproc\u4e2d\u8bbe\u7f6e\u7684\uff0c%eip=forkret\uff0c\u5176\u4ed6\u5bc4\u5b58\u5668=0\u3002\u6240\u4ee5\u6700\u540eret\u6307\u4ee4\u8fd4\u56de\u5230forkret\u51fd\u6570\u3002 forkret\u6267\u884c\u4e86\u4e00\u4e9b\u5fc5\u987b\u5728\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7684\u521d\u59cb\u5316\u5de5\u4f5c\uff0c\u6267\u884c\u5b8c\u6210\u540e\u4f1a\u8fdb\u5165trapret\u3002\u4e3a\u4ec0\u4e48\u4f1a\u8fdb\u5165trapret\u5462\uff1f\u770b\u4e0a\u9762\u7684\u8fdb\u7a0b\u5185\u6838\u6808\u7684\u5e03\u5c40\u56fe\uff0c\u8fdb\u7a0bcontext\u5168\u90e8\u9000\u6808\u4ee5\u540e\uff0c\u6808\u9876\u6307\u9488\u6307\u5411\u4e86trapret\uff0c\u6240\u4ee5forkret\u5b8c\u6210\u540e\u8fd4\u56de\u5230trapret\u4e86\u3002trapret\u5728'trapasm.S'\u6587\u4ef6\u91cc\u5b9a\u4e49\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a # Return falls through to trapret... .globl trapret trapret: popal popl %gs popl %fs popl %es popl %ds addl $0x8, %esp # trapno and errcode iret \u8fd9\u91cc\u5b9e\u9645\u5c31\u662f\u628a\u8fdb\u7a0btrapframe\u4fdd\u5b58\u7684\u503c\u6062\u590d\u5230\u5bc4\u5b58\u5668\u4e2d\u3002\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5462\uff1f\u8fd8\u662f\u6839\u636e\u524d\u9762\u8bb2\u5230\u7684\u8fdb\u7a0b\u5185\u6838\u6808\u5e03\u5c40\uff0c\u5f53trapret\u9000\u6808\u4ee5\u540e\u6808\u9876\u6307\u9488\u521a\u597d\u6307\u5411\u8fdb\u7a0b\u7684trapframe\uff0c\u8fd8\u8bb0\u5f97\u8fd9\u4e2atrapframe \u662f\u5728userinit\u91cc\u8bbe\u7f6e\u7684\u3002\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u628a\u5404\u4e2a\u5bc4\u5b58\u5668\u72b6\u6001\u6062\u590d\uff0c addl $0x8, %esp \u662f\u7565\u8fc7trapframe\u91cc\u7684trapno \u548c errcode,\u6700\u540e\u7684iret\u628a\u6307\u4ee4\u5bc4\u5b58\u5668%eip %cs\u548c\u6808\u5bc4\u5b58\u5668 %esp %ss \u4ecetrapframe\u4e2d\u6062\u590d\uff0c\u7cfb\u7edf\u8fdb\u5165\u7528\u6237\u6a21\u5f0f\uff0c\u5f00\u59cb\u8fd0\u884cinitcode.S\u7684\u4ee3\u7801\u3002","title":"\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c"},{"location":"xv6/the_first_process/#initcodes","text":"initcode.S \u5b9e\u9645\u5c31\u662f\u624b\u52a8\u5236\u4f5c\u4e86\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u9996\u5148 pushl $argv , pushl $init \u4f5c\u4e3a\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u3002\u7136\u540e pushl $0 \u662f\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740, \u5b9e\u9645\u8c03\u7528exec\u4e0d\u4f1a\u8fd4\u56de\uff0c\u8fd9\u4e2a\u5730\u5740\u53ea\u662f\u5360\u4f4d\u7528\u7684\u3002\u6700\u540e movl $SYS_exec, %eax \u662f\u628aeax\u8bbe\u7f6e\u4e3a\u4ee3\u8868exec\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u7f16\u53f7\uff0c\u5e76\u6267\u884c int T_SYSCALL \u53d1\u8d77\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\uff0c\u5411\u5185\u6838\u7533\u8bf7\u8fd0\u884cexec\u7cfb\u7edf\u8c03\u7528\uff08\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u548c\u4e2d\u65ad\u5904\u7406\u6d41\u7a0b\u53c2\u89c1\u540e\u9762\u7684\u201c\u4e2d\u65ad\u5904\u7406\u201d\u548c\u201c\u7cfb\u7edf\u8c03\u7528\u201d\u7ae0\u8282\uff09\u3002exec\u7cfb\u7edf\u8c03\u7528\u670d\u52a1\u6839\u636e\u7528\u6237\u7a0b\u5e8f\u4f20\u5165\u7684\u53c2\u6570\"init\",\u628ainitcode \u66ff\u6362\u4e3ainit\u5e76\u8fd0\u884c\u3002\u201cinit\u201d\u5f00\u542f\u4e86\u4e00\u4e2a\u63a7\u5236\u53f0shell.","title":"\u8fd0\u884cinitcode.S"},{"location":"xv6/timer_interrupt/","text":"\u65f6\u95f4\u4e2d\u65ad CPU\u7684\u65f6\u949f\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u8fd9\u6837\u5185\u6838\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u5b9e\u73b0\u591a\u4e2a\u8fdb\u7a0b\u95f4\u7684\u65f6\u95f4\u5206\u7247\uff08time-slice\uff09\u3002\u65f6\u95f4\u4e2d\u65ad\u7684\u9891\u7387\u901a\u5e38\u662f\u6bcf\u79d2100\u6b21\uff0c\u8fd9\u6837\u5373\u53ef\u4ee5\u4fdd\u8bc1\u8212\u9002\u7684\u4ea4\u4e92\u6548\u679c\u53c8\u4e0d\u81f3\u4e8e\u9891\u7e41\u7684\u4e2d\u65ad\u5f71\u54cdCPU\u7684\u8fd0\u884c\u3002 \u65f6\u95f4\u4e2d\u65ad\u7684\u6d41\u7a0b \u9075\u5faa\u4e2d\u65ad\u5904\u7406\u7684\u6d41\u7a0b\uff0c\u65f6\u95f4\u4e2d\u65ad\u4e5f\u4f1a\u8fdb\u5165trap\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u9488\u5bf9\u65f6\u95f4\u4e2d\u65ad\u5b9e\u73b0\u4e86\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u5b9e\u73b0ticks\u8ba1\u6570\u5524\u9192\u4e4b\u524dsleep\u7684\u8fdb\u7a0b\uff0c\u53e6\u4e00\u4e2a\u662f\u8c03\u7528yield\u8ba9\u51faCPU\u7ed9\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u3002\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8\u5173\u4e8e\u65f6\u95f4\u5206\u7247\u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u53ea\u5206\u6790\u7b2c\u4e8c\u4e2a\u529f\u80fd\u3002 \u8ffd\u8e2ayield\u7684\u8c03\u7528\u8f68\u8ff9\u4f9d\u6b21\u8fdb\u5165 yield\uff08\uff09-> sched() --> swtch(&p->context, mycpu()->scheduler) ,\u5173\u4e8eswtch\u7684\u5177\u4f53\u5206\u6790\u5728\"CPU\u8c03\u5ea6\u7ebf\u7a0b\"\u90a3\u91cc\u5df2\u7ecf\u4f5c\u8fc7\u63cf\u8ff0\u3002\u8fd9\u91cc\u7684 mycpu()->scheduler \u5c31\u662f\u4e0a\u4e00\u6b21\u5728 scheduler\uff08\uff09 \u8c03\u7528swtch\u8ba9\u51faCPU\u7ed9\u5f53\u4e0b\u8fd9\u4e2a\u8fdb\u7a0b\u5e76\u628a\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u4f4d\u7f6e\u3002\u8fd9\u91cc\u518d\u6b21\u8c03\u7528swtch \u53ea\u662f\u53c2\u6570\u7684\u987a\u5e8f\u4e0e\u4e0a\u4e00\u6b21\u6b63\u597d\u76f8\u53cd\uff0cCPU\u8c03\u5ea6\u7ebf\u7a0b\uff08mycpu()->scheduler\uff09\u88ab\u6362\u5165\uff0c\u8fdb\u7a0b\uff08p->context\uff09\u88ab\u6362\u51fa\u3002\u8fd9\u91cc\u7684swtch\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5f53\u524d\u8fdb\u7a0b\u8ba9\u51faCPU\u505c\u6b62\u8fd0\u884c\uff0cscheduler\u91cd\u65b0\u83b7\u5f97CPU\u63a5\u7740\u4e0a\u6b21\u505c\u6b62\u7684\u5730\u65b9\u7ee7\u7eed\u8fd0\u884c\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\u540e\u9762\u7684\u67d0\u4e00\u4e2a\u65f6\u523bscheduler\u4e5f\u4f1a\u518d\u6b21\u9009\u4e2d\u5f53\u524d\u505c\u6b62\u7684\u8fdb\u7a0b\u518d\u6b21\u6062\u590d\u5b83\u7684\u8fd0\u884c\u3002\u5f53\u88ab\u6062\u590d\u7684\u65f6\u5019\uff0c\u5f53\u524d\u8fdb\u7a0b\u63a5\u7740\u4e0a\u6b21\u4e2d\u6b62\u7684\u5730\u65b9\u4e5f\u5c31\u662f\u8c03\u7528swtch\u7684\u5730\u65b9\u7684\u7ee7\u7eed\u6267\u884c,\u6309\u4e4b\u524d\u201cyield\u201d\u7684\u8c03\u7528\u8f68\u8ff9\u76f8\u53cd\u7684\u65b9\u5411\u4f9d\u6b21\u8fd4\u56de\uff0c\u6700\u540e\u8c03\u7528trapret\u8fd4\u56de\u5230\u88ab\u201c\u65f6\u95f4\u4e2d\u65ad\u201d\u4e2d\u65ad\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u3002 \u4ece\u4e0a\u9762\u7684\u53ef\u4ee5\u770b\u51fasched() \u548c scheduler() \u76f8\u4e92\u534f\u4f5c\uff0c\u50cf\u8fd9\u6837\u7684\u4e24\u4e2a\u51fd\u6570\u88ab\u79f0\u4e3a\u201ccoroutines\u201d\u3002","title":"\u65f6\u95f4\u4e2d\u65ad"},{"location":"xv6/timer_interrupt/#_1","text":"CPU\u7684\u65f6\u949f\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e2d\u65ad\uff0c\u8fd9\u6837\u5185\u6838\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u5b9e\u73b0\u591a\u4e2a\u8fdb\u7a0b\u95f4\u7684\u65f6\u95f4\u5206\u7247\uff08time-slice\uff09\u3002\u65f6\u95f4\u4e2d\u65ad\u7684\u9891\u7387\u901a\u5e38\u662f\u6bcf\u79d2100\u6b21\uff0c\u8fd9\u6837\u5373\u53ef\u4ee5\u4fdd\u8bc1\u8212\u9002\u7684\u4ea4\u4e92\u6548\u679c\u53c8\u4e0d\u81f3\u4e8e\u9891\u7e41\u7684\u4e2d\u65ad\u5f71\u54cdCPU\u7684\u8fd0\u884c\u3002","title":"\u65f6\u95f4\u4e2d\u65ad"},{"location":"xv6/timer_interrupt/#_2","text":"\u9075\u5faa\u4e2d\u65ad\u5904\u7406\u7684\u6d41\u7a0b\uff0c\u65f6\u95f4\u4e2d\u65ad\u4e5f\u4f1a\u8fdb\u5165trap\u51fd\u6570\uff0c\u5728\u8fd9\u91cc\u9488\u5bf9\u65f6\u95f4\u4e2d\u65ad\u5b9e\u73b0\u4e86\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u5b9e\u73b0ticks\u8ba1\u6570\u5524\u9192\u4e4b\u524dsleep\u7684\u8fdb\u7a0b\uff0c\u53e6\u4e00\u4e2a\u662f\u8c03\u7528yield\u8ba9\u51faCPU\u7ed9\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u3002\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8\u5173\u4e8e\u65f6\u95f4\u5206\u7247\u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u53ea\u5206\u6790\u7b2c\u4e8c\u4e2a\u529f\u80fd\u3002 \u8ffd\u8e2ayield\u7684\u8c03\u7528\u8f68\u8ff9\u4f9d\u6b21\u8fdb\u5165 yield\uff08\uff09-> sched() --> swtch(&p->context, mycpu()->scheduler) ,\u5173\u4e8eswtch\u7684\u5177\u4f53\u5206\u6790\u5728\"CPU\u8c03\u5ea6\u7ebf\u7a0b\"\u90a3\u91cc\u5df2\u7ecf\u4f5c\u8fc7\u63cf\u8ff0\u3002\u8fd9\u91cc\u7684 mycpu()->scheduler \u5c31\u662f\u4e0a\u4e00\u6b21\u5728 scheduler\uff08\uff09 \u8c03\u7528swtch\u8ba9\u51faCPU\u7ed9\u5f53\u4e0b\u8fd9\u4e2a\u8fdb\u7a0b\u5e76\u628a\u81ea\u5df1\u7684\u5bc4\u5b58\u5668\u4fdd\u5b58\u7684\u4f4d\u7f6e\u3002\u8fd9\u91cc\u518d\u6b21\u8c03\u7528swtch \u53ea\u662f\u53c2\u6570\u7684\u987a\u5e8f\u4e0e\u4e0a\u4e00\u6b21\u6b63\u597d\u76f8\u53cd\uff0cCPU\u8c03\u5ea6\u7ebf\u7a0b\uff08mycpu()->scheduler\uff09\u88ab\u6362\u5165\uff0c\u8fdb\u7a0b\uff08p->context\uff09\u88ab\u6362\u51fa\u3002\u8fd9\u91cc\u7684swtch\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5f53\u524d\u8fdb\u7a0b\u8ba9\u51faCPU\u505c\u6b62\u8fd0\u884c\uff0cscheduler\u91cd\u65b0\u83b7\u5f97CPU\u63a5\u7740\u4e0a\u6b21\u505c\u6b62\u7684\u5730\u65b9\u7ee7\u7eed\u8fd0\u884c\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\u540e\u9762\u7684\u67d0\u4e00\u4e2a\u65f6\u523bscheduler\u4e5f\u4f1a\u518d\u6b21\u9009\u4e2d\u5f53\u524d\u505c\u6b62\u7684\u8fdb\u7a0b\u518d\u6b21\u6062\u590d\u5b83\u7684\u8fd0\u884c\u3002\u5f53\u88ab\u6062\u590d\u7684\u65f6\u5019\uff0c\u5f53\u524d\u8fdb\u7a0b\u63a5\u7740\u4e0a\u6b21\u4e2d\u6b62\u7684\u5730\u65b9\u4e5f\u5c31\u662f\u8c03\u7528swtch\u7684\u5730\u65b9\u7684\u7ee7\u7eed\u6267\u884c,\u6309\u4e4b\u524d\u201cyield\u201d\u7684\u8c03\u7528\u8f68\u8ff9\u76f8\u53cd\u7684\u65b9\u5411\u4f9d\u6b21\u8fd4\u56de\uff0c\u6700\u540e\u8c03\u7528trapret\u8fd4\u56de\u5230\u88ab\u201c\u65f6\u95f4\u4e2d\u65ad\u201d\u4e2d\u65ad\u7684\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u3002 \u4ece\u4e0a\u9762\u7684\u53ef\u4ee5\u770b\u51fasched() \u548c scheduler() \u76f8\u4e92\u534f\u4f5c\uff0c\u50cf\u8fd9\u6837\u7684\u4e24\u4e2a\u51fd\u6570\u88ab\u79f0\u4e3a\u201ccoroutines\u201d\u3002","title":"\u65f6\u95f4\u4e2d\u65ad\u7684\u6d41\u7a0b"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/","text":"1 \u5b89\u88c5\u4f9d\u8d56\u5305 # \u4f9d\u8d56\u5305openssl\u5b89\u88c5 sudo apt-get install openssl libssl-dev # \u4f9d\u8d56\u5305pcre\u5b89\u88c5 sudo apt-get install libpcre3 libpcre3-dev # \u4f9d\u8d56\u5305zlib\u5b89\u88c5 sudo apt-get install zlib1g-dev 2 \u7f16\u8bd1Nginx 2.1 \u6e90\u7801\u4e0b\u8f7d Nginx\u4e0b\u8f7d git clone https://github.com/nginx/nginx \u4e0b\u8f7dnginx-rtmp-module git clone https://github.com/arut/nginx-rtmp-module.git 2.2 \u7f16\u8bd1 cd nginx auto/configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module make -j8 sudo make install \u9ed8\u8ba4\u5b89\u88c5\u5230 /usr/local/nginx \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff1a /usr/local/nginx/conf/nginx.conf 3 \u914d\u7f6enginx 3.1 \u70b9\u64ad\u914d\u7f6e 3.1.1 \u5efa\u7acb\u5a92\u4f53\u6587\u4ef6\u5939 mkdir /mnt/hgfs/dn_class/vod 3.1.2 \u51c6\u5907\u5a92\u4f53\u6587\u4ef6\uff1a \u628a\u5a92\u4f53\u6587\u4ef6 \"35.mp4\" \u590d\u5236\u5230/mnt/hgfs/dn_class/vod\u76ee\u5f55\u4e0b\u3002 \u5a92\u4f53\u6587\u4ef6\u81ea\u5df1\u62f7\u8d1d\uff0c\u7b26\u5408AAC+H264\u7684\u683c\u5f0f\u5373\u53ef\u3002 3.1.3 \u5728nginx\u4e2d\u914d\u7f6ertmp \u6253\u5f00\u914d\u7f6e\u6587\u4ef6nginx.conf\uff08\u8def\u5f84/usr/local/nginx/conf/nginx.conf\uff09\uff0c\u6dfb\u52a0RTMP\u7684\u914d\u7f6e\u3002 #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } rtmp { #RTMP server server { listen 1935; #server port chunk_size 4096; #chunk_size application vod { play /mnt/hgfs/dn_class/vod; #media file position } } } ........ \u5176\u4ed6\u914d\u7f6e\u4e0d\u9700\u7406\u4f1a \u914d\u7f6e\u76ee\u5f55/mnt/hgfs/qingfu/vod\u4e3a\u5b58\u653e\u89c6\u9891\u6587\u4ef6\u7684\u4f4d\u7f6e. \u914d\u7f6e\u597d\u540e\uff0c\u91cd\u65b0\u542f\u52a8\u4e00\u4e0bnginx sudo /usr/local/nginx/sbin/nginx -s reload \u5982\u679c\u62a5\u9519, nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory) \u5219\u8bf4\u660enginx\u6ca1\u6709\u542f\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u5148\u542f\u52a8 sudo /usr/local/nginx/sbin/nginx ```` - 3.1.4 \u4f7f\u7528ffplay\u8fdb\u884c\u64ad\u653e ```bash ffplay rtmp://192.168.100.33/vod/35.mp4 3.2 \u76f4\u64ad\u914d\u7f6e \u63a5\u7740\u6211\u4eec\u5c31\u5728\u70b9\u64ad\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\u7684\u57fa\u7840\u4e4b\u4e0a\u6dfb\u52a0\u76f4\u64ad\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002 3.2.1 \u914d\u7f6e RTMP\u670d\u52a1\u6dfb\u52a0\u4e00\u4e2aapplication, \u8fd9\u4e2a\u540d\u5b57\u53ef\u4ee5\u4efb\u610f\u8d77\uff0c\u4e5f\u53ef\u4ee5\u8d77\u591a\u4e2a\u540d\u5b57\uff0c\u7531\u4e8e\u662f\u76f4\u64ad\u6211\u5c31\u53eb\u505a\u5b83live\u3002 events { worker_connections 1024; } rtmp { #RTMP server server { listen 1935; #server port chunk_size 4096; #chunk_size # vod server application vod { play /mnt/hgfs/dn_class/vod; #media file position } # live server 1 application live{ #Darren live first add live on; } } } ........ \u5176\u4ed6\u914d\u7f6e\u4e0d\u9700\u7406\u4f1a 3.2.2 \u63a8\u6d41 \u5728Ubuntu\u7aef\u7528ffmpeg\u4ea7\u751f\u4e00\u4e2a\u6a21\u62df\u76f4\u64ad\u6e90\uff0c\u5411rtmp\u670d\u52a1\u5668\u63a8\u9001 ffmpeg -re -i /mnt/hgfs/dn_class/vod/35.mp4 -c copy -f flv rtmp://192.168.100.33/live/35 \u6ce8\u610f\uff0c\u6e90\u6587\u4ef6\u5fc5\u987b\u662fH.264+AAC\u7f16\u7801\u7684\u3002\u5982\u679c\u4e0d\u662f\u5219\u9700\u8981\u8f6c\u7801\uff0c ffmpeg -re -i /path/to/your/video.mp4 -c:v libx264 -preset fast -maxrate 3000k -bufsize 6000k -pix_fmt yuv420p -g 50 -c:a aac -b:a 128k -ar 44100 -f flv rtmp://192.168.100.33/live/35 -re: Read the input at its native frame rate. -i /path/to/your/video.mp4: Input file. -c:v libx264: Use the H.264 video codec. -preset fast: Set the encoding speed/quality tradeoff. -maxrate 3000k -bufsize 6000k: Control the bitrate. -pix_fmt yuv420p: Set pixel format. -g 50: Set the GOP size. -c:a aac: Use the AAC audio codec. -b:a 128k -ar 44100: Set audio bitrate and sample rate. -f flv: Output format is FLV (Flash Video). rtmp://localhost/live/stream: RTMP URL where the stream is sent. 3.2.3 \u62c9\u6d41 \u4f7f\u7528ffplay\u8fdb\u884c\u62c9\u6d41 ffplay rtmp://192.168.100.33/live/35 https://www.jianshu.com/p/16741e363a77","title":"Nginx\u642d\u5efartmp\u6d41\u5a92\u4f53\u670d\u52a1\u5668"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#1","text":"# \u4f9d\u8d56\u5305openssl\u5b89\u88c5 sudo apt-get install openssl libssl-dev # \u4f9d\u8d56\u5305pcre\u5b89\u88c5 sudo apt-get install libpcre3 libpcre3-dev # \u4f9d\u8d56\u5305zlib\u5b89\u88c5 sudo apt-get install zlib1g-dev","title":"1 \u5b89\u88c5\u4f9d\u8d56\u5305"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#2-nginx","text":"","title":"2 \u7f16\u8bd1Nginx"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#21","text":"Nginx\u4e0b\u8f7d git clone https://github.com/nginx/nginx \u4e0b\u8f7dnginx-rtmp-module git clone https://github.com/arut/nginx-rtmp-module.git","title":"2.1 \u6e90\u7801\u4e0b\u8f7d"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#22","text":"cd nginx auto/configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module make -j8 sudo make install \u9ed8\u8ba4\u5b89\u88c5\u5230 /usr/local/nginx \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff1a /usr/local/nginx/conf/nginx.conf","title":"2.2 \u7f16\u8bd1"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#3-nginx","text":"","title":"3 \u914d\u7f6enginx"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#31","text":"","title":"3.1 \u70b9\u64ad\u914d\u7f6e"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#311","text":"mkdir /mnt/hgfs/dn_class/vod","title":"3.1.1 \u5efa\u7acb\u5a92\u4f53\u6587\u4ef6\u5939"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#312","text":"\u628a\u5a92\u4f53\u6587\u4ef6 \"35.mp4\" \u590d\u5236\u5230/mnt/hgfs/dn_class/vod\u76ee\u5f55\u4e0b\u3002 \u5a92\u4f53\u6587\u4ef6\u81ea\u5df1\u62f7\u8d1d\uff0c\u7b26\u5408AAC+H264\u7684\u683c\u5f0f\u5373\u53ef\u3002","title":"3.1.2 \u51c6\u5907\u5a92\u4f53\u6587\u4ef6\uff1a"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#313-nginxrtmp","text":"\u6253\u5f00\u914d\u7f6e\u6587\u4ef6nginx.conf\uff08\u8def\u5f84/usr/local/nginx/conf/nginx.conf\uff09\uff0c\u6dfb\u52a0RTMP\u7684\u914d\u7f6e\u3002 #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } rtmp { #RTMP server server { listen 1935; #server port chunk_size 4096; #chunk_size application vod { play /mnt/hgfs/dn_class/vod; #media file position } } } ........ \u5176\u4ed6\u914d\u7f6e\u4e0d\u9700\u7406\u4f1a \u914d\u7f6e\u76ee\u5f55/mnt/hgfs/qingfu/vod\u4e3a\u5b58\u653e\u89c6\u9891\u6587\u4ef6\u7684\u4f4d\u7f6e. \u914d\u7f6e\u597d\u540e\uff0c\u91cd\u65b0\u542f\u52a8\u4e00\u4e0bnginx sudo /usr/local/nginx/sbin/nginx -s reload \u5982\u679c\u62a5\u9519, nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory) \u5219\u8bf4\u660enginx\u6ca1\u6709\u542f\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u5148\u542f\u52a8 sudo /usr/local/nginx/sbin/nginx ```` - 3.1.4 \u4f7f\u7528ffplay\u8fdb\u884c\u64ad\u653e ```bash ffplay rtmp://192.168.100.33/vod/35.mp4","title":"3.1.3 \u5728nginx\u4e2d\u914d\u7f6ertmp"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#32","text":"\u63a5\u7740\u6211\u4eec\u5c31\u5728\u70b9\u64ad\u670d\u52a1\u5668\u914d\u7f6e\u6587\u4ef6\u7684\u57fa\u7840\u4e4b\u4e0a\u6dfb\u52a0\u76f4\u64ad\u670d\u52a1\u5668\u7684\u914d\u7f6e\u3002","title":"3.2 \u76f4\u64ad\u914d\u7f6e"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#321","text":"RTMP\u670d\u52a1\u6dfb\u52a0\u4e00\u4e2aapplication, \u8fd9\u4e2a\u540d\u5b57\u53ef\u4ee5\u4efb\u610f\u8d77\uff0c\u4e5f\u53ef\u4ee5\u8d77\u591a\u4e2a\u540d\u5b57\uff0c\u7531\u4e8e\u662f\u76f4\u64ad\u6211\u5c31\u53eb\u505a\u5b83live\u3002 events { worker_connections 1024; } rtmp { #RTMP server server { listen 1935; #server port chunk_size 4096; #chunk_size # vod server application vod { play /mnt/hgfs/dn_class/vod; #media file position } # live server 1 application live{ #Darren live first add live on; } } } ........ \u5176\u4ed6\u914d\u7f6e\u4e0d\u9700\u7406\u4f1a","title":"3.2.1 \u914d\u7f6e"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#322","text":"\u5728Ubuntu\u7aef\u7528ffmpeg\u4ea7\u751f\u4e00\u4e2a\u6a21\u62df\u76f4\u64ad\u6e90\uff0c\u5411rtmp\u670d\u52a1\u5668\u63a8\u9001 ffmpeg -re -i /mnt/hgfs/dn_class/vod/35.mp4 -c copy -f flv rtmp://192.168.100.33/live/35 \u6ce8\u610f\uff0c\u6e90\u6587\u4ef6\u5fc5\u987b\u662fH.264+AAC\u7f16\u7801\u7684\u3002\u5982\u679c\u4e0d\u662f\u5219\u9700\u8981\u8f6c\u7801\uff0c ffmpeg -re -i /path/to/your/video.mp4 -c:v libx264 -preset fast -maxrate 3000k -bufsize 6000k -pix_fmt yuv420p -g 50 -c:a aac -b:a 128k -ar 44100 -f flv rtmp://192.168.100.33/live/35 -re: Read the input at its native frame rate. -i /path/to/your/video.mp4: Input file. -c:v libx264: Use the H.264 video codec. -preset fast: Set the encoding speed/quality tradeoff. -maxrate 3000k -bufsize 6000k: Control the bitrate. -pix_fmt yuv420p: Set pixel format. -g 50: Set the GOP size. -c:a aac: Use the AAC audio codec. -b:a 128k -ar 44100: Set audio bitrate and sample rate. -f flv: Output format is FLV (Flash Video). rtmp://localhost/live/stream: RTMP URL where the stream is sent.","title":"3.2.2 \u63a8\u6d41"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/Nginx%E6%90%AD%E5%BB%BArtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/#323","text":"\u4f7f\u7528ffplay\u8fdb\u884c\u62c9\u6d41 ffplay rtmp://192.168.100.33/live/35 https://www.jianshu.com/p/16741e363a77","title":"3.2.3 \u62c9\u6d41"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/WebRTC%E6%BA%90%E7%A0%81/","text":"\u4e0b\u8f7d\u5e76\u5b89\u88c5 depot_tools Clone the depot_tools repository: cd /usr/local git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git Update the PATH Variable: Add the following line at the end of the file ~/.bash_profile export PATH=\"$PATH:/usr/local/depot_tools\" source ~/.bash_profile Verify Installation: which gclient \u514b\u9686WebRTC\u4ee3\u7801\u4ed3\u5e93\uff1a mkdir webrtc cd webrtc fetch --nohooks webrtc gclient sync \u7f16\u8bd1WebRTC\u5e93","title":"WebRTC\u6e90\u7801"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/WebRTC%E6%BA%90%E7%A0%81/#depot_tools","text":"Clone the depot_tools repository: cd /usr/local git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git Update the PATH Variable: Add the following line at the end of the file ~/.bash_profile export PATH=\"$PATH:/usr/local/depot_tools\" source ~/.bash_profile Verify Installation: which gclient","title":"\u4e0b\u8f7d\u5e76\u5b89\u88c5 depot_tools"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/WebRTC%E6%BA%90%E7%A0%81/#webrtc","text":"mkdir webrtc cd webrtc fetch --nohooks webrtc gclient sync","title":"\u514b\u9686WebRTC\u4ee3\u7801\u4ed3\u5e93\uff1a"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/WebRTC%E6%BA%90%E7%A0%81/#webrtc_1","text":"","title":"\u7f16\u8bd1WebRTC\u5e93"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/","text":"git clone --depth 1 https://gitee.com/mirrors/x264.git PKG_CONFIG_PATH=\"$HOME/ffmpeg_build/lib/pkgconfig\" ./configure --prefix=\"$HOME/ffmpeg_build\" --enable-static --enable-pic opus attention If you ever happen to want to link against installed libraries in a given directory, LIBDIR, you must either use libtool, and specify the full pathname of the library, or use the '-LLIBDIR' flag during linking and do at least one of the following: - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable during execution - add LIBDIR to the 'LD_RUN_PATH' environment variable during linking - use the '-Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to '/etc/ld.so.conf' install on linux ffmpeg wget -O ffmpeg-4.2.1.tar.bz2 https://ffmpeg.org/releases/ffmpeg-4.2.1.tar.bz2 && \\ tar xjvf ffmpeg-4.2.1.tar.bz2 PKG_CONFIG_PATH=\"$HOME/ffmpeg_build/lib/pkgconfig\" CFLAGS=\"-O3 -fPIC\" ../configure --prefix=\"$HOME/ffmpeg_build\" --pkg-config-flags=\"--static\" --extra-cflags=\"-I$HOME/ffmpeg_build/include\" --extra-ldflags=\"-L$HOME/ffmpeg_build/lib\" --extra-libs=\"-lpthread -lm\" --bindir=\"$HOME/bin\" --enable-gpl --enable-libass --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-pic --enable-shared --enable-nonfree make; make install install on macos Install dependencies with Homebrew brew install automake fdk-aac git lame libass libtool libvorbis libvpx opus sdl2 shtool texi2html theora wget x264 x265 xvid nasm install libass install harfbuzz git clone https://github.com/harfbuzz/harfbuzz.git brew install pkg-config ragel gtk-doc freetype glib cairo meson cd harfbuzz meson build -Ddocs=disabled && ninja -Cbuild && meson test -Cbuild sudo meson install -C build install libass git clone https://github.com/libass/libass.git ./configure --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass \\ --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame \\ --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libopus --enable-libxvid \\ --samples=fate-suite/ ../configure --prefix=/usr/local/ffmpeg/7.0.1 --enable-shared --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265 --enable-libopus --enable-libmp3lame --enable-libass --enable-libvorbis --enable-libvpx --enable-libfreetype reference (H.264)[https://trac.ffmpeg.org/wiki/Encode/H.264] (CompilationGuide)[https://trac.ffmpeg.org/wiki/CompilationGuide]","title":"Ffmpeg install"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#_1","text":"git clone --depth 1 https://gitee.com/mirrors/x264.git PKG_CONFIG_PATH=\"$HOME/ffmpeg_build/lib/pkgconfig\" ./configure --prefix=\"$HOME/ffmpeg_build\" --enable-static --enable-pic","title":""},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#opus","text":"attention If you ever happen to want to link against installed libraries in a given directory, LIBDIR, you must either use libtool, and specify the full pathname of the library, or use the '-LLIBDIR' flag during linking and do at least one of the following: - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable during execution - add LIBDIR to the 'LD_RUN_PATH' environment variable during linking - use the '-Wl,-rpath -Wl,LIBDIR' linker flag - have your system administrator add LIBDIR to '/etc/ld.so.conf'","title":"opus"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#install-on-linux","text":"","title":"install on linux"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#ffmpeg","text":"wget -O ffmpeg-4.2.1.tar.bz2 https://ffmpeg.org/releases/ffmpeg-4.2.1.tar.bz2 && \\ tar xjvf ffmpeg-4.2.1.tar.bz2 PKG_CONFIG_PATH=\"$HOME/ffmpeg_build/lib/pkgconfig\" CFLAGS=\"-O3 -fPIC\" ../configure --prefix=\"$HOME/ffmpeg_build\" --pkg-config-flags=\"--static\" --extra-cflags=\"-I$HOME/ffmpeg_build/include\" --extra-ldflags=\"-L$HOME/ffmpeg_build/lib\" --extra-libs=\"-lpthread -lm\" --bindir=\"$HOME/bin\" --enable-gpl --enable-libass --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-pic --enable-shared --enable-nonfree make; make install","title":"ffmpeg"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#install-on-macos","text":"Install dependencies with Homebrew brew install automake fdk-aac git lame libass libtool libvorbis libvpx opus sdl2 shtool texi2html theora wget x264 x265 xvid nasm","title":"install on macos"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#install-libass","text":"install harfbuzz git clone https://github.com/harfbuzz/harfbuzz.git brew install pkg-config ragel gtk-doc freetype glib cairo meson cd harfbuzz meson build -Ddocs=disabled && ninja -Cbuild && meson test -Cbuild sudo meson install -C build install libass git clone https://github.com/libass/libass.git ./configure --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass \\ --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame \\ --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libopus --enable-libxvid \\ --samples=fate-suite/ ../configure --prefix=/usr/local/ffmpeg/7.0.1 --enable-shared --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265 --enable-libopus --enable-libmp3lame --enable-libass --enable-libvorbis --enable-libvpx --enable-libfreetype","title":"install libass"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%20install/#reference","text":"(H.264)[https://trac.ffmpeg.org/wiki/Encode/H.264] (CompilationGuide)[https://trac.ffmpeg.org/wiki/CompilationGuide]","title":"reference"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","text":"ffmpeg -filters \u64ad\u653eyuv ffplay -f rawvideo -pixel_format yuv420p -video_size 1280x720 sample.yuv -f rawvideo\uff1a\u544a\u8bc9 ffplay \u8f93\u5165\u6587\u4ef6\u662f\u539f\u59cb\u89c6\u9891\u6570\u636e\u3002 -pixel_format yuv420p\uff1a\u6307\u5b9a\u50cf\u7d20\u683c\u5f0f\u4e3a YUV420p\u3002 -video_size 1920x1080\uff1a\u6307\u5b9a\u89c6\u9891\u5206\u8fa8\u7387\u4e3a 1920x1080\u3002 \u64ad\u653epcm \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a PCM \u6587\u4ef6\uff0c\u540d\u4e3a audio.pcm\uff0c\u91c7\u6837\u7387\u4e3a 44100 Hz\uff0c\u58f0\u9053\u6570\u4e3a 2\uff08\u7acb\u4f53\u58f0\uff09\uff0c\u91c7\u6837\u683c\u5f0f\u4e3a 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff08signed 16-bit little-endian\uff09\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u64ad\u653e\u8be5\u6587\u4ef6\uff1a ffplay -f s16le -ar 44100 -ac 2 audio.pcm -f s16le\uff1a\u6307\u5b9a PCM \u6587\u4ef6\u7684\u683c\u5f0f\u4e3a signed 16-bit little-endian\u3002 -ar 44100\uff1a\u6307\u5b9a\u91c7\u6837\u7387\u4e3a 44100 Hz\u3002 -ac 2\uff1a\u6307\u5b9a\u58f0\u9053\u6570\u4e3a 2\uff08\u7acb\u4f53\u58f0\uff09\u3002","title":"Ffmpeg\u57fa\u672c\u547d\u4ee4"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#_1","text":"ffmpeg -filters","title":""},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#yuv","text":"ffplay -f rawvideo -pixel_format yuv420p -video_size 1280x720 sample.yuv -f rawvideo\uff1a\u544a\u8bc9 ffplay \u8f93\u5165\u6587\u4ef6\u662f\u539f\u59cb\u89c6\u9891\u6570\u636e\u3002 -pixel_format yuv420p\uff1a\u6307\u5b9a\u50cf\u7d20\u683c\u5f0f\u4e3a YUV420p\u3002 -video_size 1920x1080\uff1a\u6307\u5b9a\u89c6\u9891\u5206\u8fa8\u7387\u4e3a 1920x1080\u3002","title":"\u64ad\u653eyuv"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#pcm","text":"\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a PCM \u6587\u4ef6\uff0c\u540d\u4e3a audio.pcm\uff0c\u91c7\u6837\u7387\u4e3a 44100 Hz\uff0c\u58f0\u9053\u6570\u4e3a 2\uff08\u7acb\u4f53\u58f0\uff09\uff0c\u91c7\u6837\u683c\u5f0f\u4e3a 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff08signed 16-bit little-endian\uff09\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u64ad\u653e\u8be5\u6587\u4ef6\uff1a ffplay -f s16le -ar 44100 -ac 2 audio.pcm -f s16le\uff1a\u6307\u5b9a PCM \u6587\u4ef6\u7684\u683c\u5f0f\u4e3a signed 16-bit little-endian\u3002 -ar 44100\uff1a\u6307\u5b9a\u91c7\u6837\u7387\u4e3a 44100 Hz\u3002 -ac 2\uff1a\u6307\u5b9a\u58f0\u9053\u6570\u4e3a 2\uff08\u7acb\u4f53\u58f0\uff09\u3002","title":"\u64ad\u653epcm"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/notion/","text":"Audio Sampling Rate: Definition: The number of times per second the audio signal is sampled. Common Rates: 44.1 kHz (CD quality), 48 kHz (professional video), 96 kHz, and 192 kHz (high-resolution audio). Bit Depth: Definition: The number of bits used to represent each audio sample. Common Bit Depths: 16-bit (CD quality), 24-bit (professional audio), and 32-bit. Video Frame Rate: Definition: The number of frames displayed per second. Common Frame Rates: 24 fps, 30 fps, 60 fps.","title":"Notion"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/notion/#audio","text":"Sampling Rate: Definition: The number of times per second the audio signal is sampled. Common Rates: 44.1 kHz (CD quality), 48 kHz (professional video), 96 kHz, and 192 kHz (high-resolution audio). Bit Depth: Definition: The number of bits used to represent each audio sample. Common Bit Depths: 16-bit (CD quality), 24-bit (professional audio), and 32-bit.","title":"Audio"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/notion/#video","text":"Frame Rate: Definition: The number of frames displayed per second. Common Frame Rates: 24 fps, 30 fps, 60 fps.","title":"Video"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/qt%20install/","text":"\u4ee5ubuntu\u7cfb\u7edf\u4e3a\u4f8b\uff1a 1. Install Missing Dependencies: sudo apt-get install libxcb-cursor0 sudo apt-get install libxcb1 libxcb-xfixes0 libxcb-render0 libxcb-shape0 libxcb-shm0 2. Verify Installation of Qt and Its Plugins: sudo apt-get install qt5-default qtbase5-dev qtbase5-dev-tools 3. install \u4e0b\u8f7d\u5728\u7ebf\u5b89\u88c5\u7a0b\u5e8f\uff1a https://download.qt.io/official_releases/online_installers/ https://download.qt.io/archive/qt/5.14/5.14.2 wget http://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-5.15.0-online.run chmod +x qt-unified-linux-x64-5.15.0-online.run","title":"Qt install"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/qt%20install/#1-install-missing-dependencies","text":"sudo apt-get install libxcb-cursor0 sudo apt-get install libxcb1 libxcb-xfixes0 libxcb-render0 libxcb-shape0 libxcb-shm0","title":"1. Install Missing Dependencies:"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/qt%20install/#2-verify-installation-of-qt-and-its-plugins","text":"sudo apt-get install qt5-default qtbase5-dev qtbase5-dev-tools","title":"2. Verify Installation of Qt and Its Plugins:"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/qt%20install/#3-install","text":"\u4e0b\u8f7d\u5728\u7ebf\u5b89\u88c5\u7a0b\u5e8f\uff1a https://download.qt.io/official_releases/online_installers/ https://download.qt.io/archive/qt/5.14/5.14.2 wget http://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-5.15.0-online.run chmod +x qt-unified-linux-x64-5.15.0-online.run","title":"3. install"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/qt/","text":"","title":"Qt"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/record%20screen/","text":"Record Screen on Ubuntu ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk '{print $2}') -i :0.0 -r 25 -c:v libx264 -crf 0 -preset ultrafast output.mkv -f x11grab: Specifies the X11 screen capture. -s $(xdpyinfo | grep dimensions | awk '{print $2}'): Automatically gets the screen resolution using xdpyinfo. -i :0.0: Specifies the display to capture (replace with your display identifier if different). -r 25: Sets the frame rate (you can adjust this as needed). -c:v libx264: Uses the H.264 codec for video compression. -crf 0: Sets the Constant Rate Factor to 0 for lossless recording (adjustable). -preset ultrafast: Uses the ultrafast preset for minimal compression delay (adjustable). output.mkv: The name of the output file. Or, ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk '{print $2}') -i :0.0 -c:v libx264 -r 30 -pix_fmt yuv420p output.mp4 -f x11grab: Specifies the input format for screen capture. -s $(xdpyinfo | grep dimensions | awk '{print $2}'): Automatically sets the * screen size. -i :0.0: Indicates the display to capture (default display). -c:v libx264: Uses the H.264 codec for video compression. -r 30: Sets the frame rate to 30 FPS. -pix_fmt yuv420p: Ensures compatibility with most media players. output.mp4: The output file.","title":"Record screen"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/record%20screen/#record-screen-on-ubuntu","text":"ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk '{print $2}') -i :0.0 -r 25 -c:v libx264 -crf 0 -preset ultrafast output.mkv -f x11grab: Specifies the X11 screen capture. -s $(xdpyinfo | grep dimensions | awk '{print $2}'): Automatically gets the screen resolution using xdpyinfo. -i :0.0: Specifies the display to capture (replace with your display identifier if different). -r 25: Sets the frame rate (you can adjust this as needed). -c:v libx264: Uses the H.264 codec for video compression. -crf 0: Sets the Constant Rate Factor to 0 for lossless recording (adjustable). -preset ultrafast: Uses the ultrafast preset for minimal compression delay (adjustable). output.mkv: The name of the output file. Or, ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk '{print $2}') -i :0.0 -c:v libx264 -r 30 -pix_fmt yuv420p output.mp4 -f x11grab: Specifies the input format for screen capture. -s $(xdpyinfo | grep dimensions | awk '{print $2}'): Automatically sets the * screen size. -i :0.0: Indicates the display to capture (default display). -c:v libx264: Uses the H.264 codec for video compression. -r 30: Sets the frame rate to 30 FPS. -pix_fmt yuv420p: Ensures compatibility with most media players. output.mp4: The output file.","title":"Record Screen on Ubuntu"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/save/","text":"\u96f7\u9704\u9a85\uff1a https://blog.csdn.net/leixiaohua1020/article/details/44587465 https://leixiaohua1020.github.io/ https://wangwei1237.github.io/books/ https://coding.imooc.com/class/857.html?&utm_source=baidu-pc&utm_medium=sem4&utm_campaign=coding&bd_vid=10205843690001867780 \u5c0f\u9a6c\u54e5-\u97f3\u89c6\u9891\u5f00\u53d1\u6280\u672f\uff1a \u94fe\u63a5\uff1ahttps://pan.baidu.com/s/1JDhReVX4tuS-k4FIvkEP8w \u63d0\u53d6\u7801\uff1a3tT8 \u5c0f\u9a6c\u54e5\u535a\u5ba2 https://www.cnblogs.com/mjios/p/14465178.html \u4ee3\u7801 https://github.com/CoderMJLee/audio-video-dev-tutorial \u9648\u8d85\u97f3\u89c6\u9891MP4 \u94fe\u63a5:https://pan.baidu.com/s/1nWOUHbkiRRRWwpTDdr93Vw?pwd=3y54 \u63d0\u53d6\u7801:3y54 \u9648\u8d85\u97f3\u89c6\u9891 https://edu.csdn.net/course/detail/8958 \u674e\u8d85\uff1a https://www.bilibili.com/video/BV1oT421675G https://www.bilibili.com/video/BV1a1421k7Eo https://pan.baidu.com/s/1jq9uqvjTP6oOF97dt41fZA?pwd=1f21#list/path=%2Fsharelink1103160936186-467290719741354%2FC%2B%2B%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AE%9E%E6%88%98-FFmpeg%E5%9F%BA%E7%A1%80%E5%88%B0%E5%B7%A5%E7%A8%8B-%E5%A4%9A%E8%B7%AFH265%E7%9B%91%E6%8E%A7%E5%BD%95%E6%94%BE%E5%BC%80%E5%8F%91%E3%80%90%E5%A4%8F%E6%9B%B9%E4%BF%8A%E3%80%91&parentPath=%2Fsharelink1103160936186-467290719741354 https://www.bilibili.com/video/BV1MH4y1B7JD/?p=19&vd_source=f7c3035649d82d9d7358c49700809de3 https://www.alipan.com/s/mDGM3qxxwSE/folder/661ecc0046936bde88724af08b9f70e849b8f805 https://pan.quark.cn/s/91748286b65b#/list/share/21646282249340d08d2b43cb8a4aacbc-%E3%80%90%E7%A0%81%E7%89%9B%E5%AD%A6%E9%99%A2%E3%80%91FFmpeg%E7%9B%B4%E6%92%ADWebRtc%E9%9F%B3%E8%A7%86%E9%A2%91%E4%BC%9A%E8%AE%AE%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91%E9%9F%B3%E8%A7%86%E9%A2%91%20*101%20%E5%B8%A6%E6%BA%90%E7%A0%81%E8%AF%BE%E4%BB%B6 https://vika.cn/share/shrEL5y0WbxlKbFkFWvQM/dst9KEPw4pTfVXVAAn/viwr3SK1xbeCo","title":"Save"},{"location":"%E9%9F%B3%E8%A7%86%E9%A2%91/sdl/","text":"","title":"Sdl"}]}